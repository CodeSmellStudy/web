commit b6ffb0eaf986e68d3cbecfd3a3f31e202cf7c4ac
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jan 6 19:09:43 2020 +1000

    Update README.md
    
    Added link to YourKit Java, they've given me a free license in return for a link.

11	0	README.md

commit ec74618b659a4df1bc2bdde1dda643281b98a00f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 14 17:36:03 2018 +1000

    Updated the version.  Fixed an issue where delete custom object fields prevented an object using them from being deleted.

1	1	build.xml
12	1	data/default-ui-language-strings.json
4	0	data/whats-new.xml
22	0	src/com/quollwriter/db/ObjectManager.java
84	39	src/com/quollwriter/db/UserConfigurableObjectFieldDataHandler.java

commit 4207743190646f44f7f3fd9ecab52789e150225f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jul 2 11:34:16 2018 +1000

    Tweak to ensure that the stack trace will capture the cause chain.

10	0	src/com/quollwriter/Utils.java

commit 185534802390feaaccf65ba063da3c6e2a224abc
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jun 30 10:17:11 2018 +1000

    Update the what's new and ui strings.

11	0	data/default-ui-language-strings.json
4	0	data/whats-new.xml

commit 2ef2123e159be36605ec8a210e95130064be900b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 29 21:01:18 2018 +1000

    Don't send the log files when emailling support about an error.

2	2	src/com/quollwriter/Environment.java

commit 00285d355de14ca68c6603350836dec1a881ea40
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 29 09:41:33 2018 +1000

    Set the window icon of the full screen frame, the icon from the parent project viewer is used.

2	0	src/com/quollwriter/ui/FullScreenFrame.java

commit 7bf52ed96948aba596fecce959178d7aaedbb48c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 29 09:40:54 2018 +1000

    Stop sending the general log when the user submits a bug report with the *send log files* checkbox is selected.

0	2	src/com/quollwriter/ui/AbstractViewer.java

commit 332623e41a5920e1b9475387145cc43dec7223d3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 29 09:39:22 2018 +1000

    Make the project viewer window visible/not visible when exiting/entering full screen mode.  This ensures that only one Quoll Writer window is visible and prevents focus issues on Windows.

27	6	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 52584309134bde4d41e99adce41d755ba650e24b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 29 09:38:05 2018 +1000

    Only add events to the log when in debug mode.

6	1	src/com/quollwriter/achievements/AchievementsManager.java

commit 772cca6c8c770d2bc7c8230ceee1148013d2db66
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 29 09:37:31 2018 +1000

    Update version number and add new error message for exiting full screen mode.

1	1	build.xml
5	1	data/default-ui-language-strings.json

commit 9259f76669bd9130026813a1e939fbe972e3a584
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 22 07:54:17 2018 +1000

    Update the what's new and language strings.

14	3	data/default-ui-language-strings.json
4	0	data/whats-new.xml

commit 1dd4353e0db7fd5a27103004cc93eb88628aea0a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 21 16:23:24 2018 +1000

    Update the version number.

1	1	build.xml

commit 381332fcb4f85903048481e164871aaf73963a52
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 21 16:22:46 2018 +1000

    Changed the exports to add the correct country code.

5	5	data/export/epub/opf-template.xml
81	0	src/com/quollwriter/data/Project.java
14	3	src/com/quollwriter/exporter/EPUBDocumentExporter.java
115	0	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java

commit c15cbf8c5671be2bba23989a7227011281266ec4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jun 4 21:05:59 2018 +1000

    Set a target of 1.8 for the compile.

1	0	build.xml

commit 7e1bece15e010ac250666b1e204a89317375bd48
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 1 10:56:33 2018 +1000

    The way that the ordering for custom object type fields are updated has been changed.  It now performs the update 'later' and will only update the orderby field value.

17	1	src/com/quollwriter/Environment.java
49	0	src/com/quollwriter/db/UserConfigurableObjectTypeDataHandler.java
81	2	src/com/quollwriter/ui/userobjects/FieldsAddEdit.java

commit 8363f8a073685b900bc4b9346a672f8bad823a74
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 1 10:44:51 2018 +1000

    Added a new unique constraint for the object type fields to prevent duplicate orderby values.  This will only be for new users though and won't be applied for existing users.

29	23	data/project-info-schema/update-scripts/0-1.xml

commit 085f6b5ad2476a0c281c62f1ae112828f596f90a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 31 22:10:06 2018 +1000

    Update the version and fix a bug with the custom object name not being set correctly.

1	1	build.xml
12	1	data/default-ui-language-strings.json
4	0	data/whats-new.xml
1	0	src/com/quollwriter/db/UserConfigurableObjectTypeDataHandler.java

commit 0fc1836e0647e50a00cf270a8393641828997c46
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed May 30 15:14:21 2018 +1000

    Added a check for string being in the user strings but not in the parent/base strings.

10	0	src/com/quollwriter/ui/LanguageStringsEditor.java

commit db49dfa66ded72dc027200ccb2890bb8d1a54fdc
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 27 19:53:50 2018 +1000

    Update the version number (which will be done first for subsequent versions).  Also update the what's new.

2	2	build.xml
12	1	data/default-ui-language-strings.json
4	0	data/whats-new.xml

commit 4f41896475b92549e4e84b61202661dbfb90b685
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 24 10:41:28 2018 +1000

    Added a wrapper around System.out for testing to ensure that utf-8 can be output not the default charset.

13	1	src/com/quollwriter/Environment.java

commit f48ee3f647a694f4077590eb6734dfd20e2d8f75
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 24 10:39:27 2018 +1000

    Added a test to check that the string is formatted correctly.

30	85	src/com/quollwriter/LanguageStrings.java

commit 558cc4b01adf34e9e333819da8d9e55835edc9d8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 24 10:36:42 2018 +1000

    Ensure that utf-8 is used for message encrypting/decrypting.

119	119	src/com/quollwriter/editors/EditorsUtils.java
38	38	src/com/quollwriter/editors/messages/EditorChatMessage.java

commit b78ad09de8fe69b36343f1486f1385921f3cb957
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 24 10:30:31 2018 +1000

    Ensure that utf-8 is used for message encoding/decoding.

41	41	src/com/quollwriter/editors/messages/MessageFactory.java

commit 1e90654c6fc6ae32238b40b706b9b58de13fcecc
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 19 11:04:50 2018 +1000

    Fixed a typo in the properties file.

1	1	data/properties.xml
1	1	src/com/quollwriter/LanguageStrings.java

commit 53e8e49719b3611fb107968927ac044c9eb78508
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 18 07:55:34 2018 +1000

    Fixed a language string issue with the confirm beta popup.  When the 'Edit Needed' note type is first added via the note action handler, the correct UI language value is used.  A change has been made to how user properties are read from the DB to prevent encoding issues.  The default properties have been updated to enabled achievements.

10	0	data/properties.xml
23	0	src/com/quollwriter/Utils.java
5	2	src/com/quollwriter/db/ProjectInfoObjectManager.java
2	2	src/com/quollwriter/ui/Options.java
4	2	src/com/quollwriter/ui/UserPropertyHandler.java
10	1	src/com/quollwriter/ui/actionHandlers/NoteActionHandler.java

commit da54e8c25fcb37e7b18b7bc72c1201e5b808a64a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed May 16 11:31:11 2018 +1000

    Make the spellchecker available in the language strings editor.  Fix up a couple of places that weren't using the language strings.  Limit the ui language strings selector to only use local strings for the current QW version.

22	1	src/com/quollwriter/Environment.java
24	4	src/com/quollwriter/data/UserConfigurableObjectType.java
21	21	src/com/quollwriter/db/UserConfigurableObjectTypeDataHandler.java
1	1	src/com/quollwriter/ui/AbstractProjectViewer.java
2	2	src/com/quollwriter/ui/LanguageStringsEditor.java
1	1	src/com/quollwriter/ui/UIUtils.java
56	38	src/com/quollwriter/ui/renderers/SelectableProjectTreeCellRenderer.java

commit dcfbe9fad47dc3c10059968ac1a965e56cc6dfac
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 11 21:51:51 2018 +1000

    Addition of a couple of new strings for the 'Edit Needed' note type and force the tree cell renderer to use the new value.  Also force the notes and chapter accordion items to use the relevant UI string names.

3	1	data/default-ui-language-strings.json
1	0	src/com/quollwriter/LanguageStrings.java
8	0	src/com/quollwriter/ui/ChaptersAccordionItem.java
8	0	src/com/quollwriter/ui/NotesAccordionItem.java
8	0	src/com/quollwriter/ui/renderers/ProjectTreeCellRenderer.java

commit e9e95e21e5018d03e273c95c74ee30fce398c7bc
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 11 20:59:48 2018 +1000

    Defer initialization of the user property handler items until first use.  Remove the legacy user properties file once it has been used (since user properties are now stored in the projects info db).

8	5	src/com/quollwriter/Environment.java
22	22	src/com/quollwriter/data/ObjectDescriptionUserConfigurableObjectTypeField.java
195	174	src/com/quollwriter/data/UserConfigurableObjectType.java
231	143	src/com/quollwriter/data/UserConfigurableObjectTypeField.java
38	10	src/com/quollwriter/db/ProjectInfoObjectManager.java
2	5	src/com/quollwriter/ui/AbstractViewer.java
1	1	src/com/quollwriter/ui/AssetAccordionItem.java
1	6	src/com/quollwriter/ui/ChapterDescriptionAccordionItem.java
1	6	src/com/quollwriter/ui/ChapterGoalsAccordionItem.java
1	6	src/com/quollwriter/ui/ChapterPlanAccordionItem.java
34	5	src/com/quollwriter/ui/UserPropertyHandler.java
5	3	src/com/quollwriter/ui/WhatsNew.java

commit 271c2ad5d52d404f53a8c9a6e7d1ac2264bac498
Author: Gary Bentley <gary@quollwriter.com>
Date:   Tue May 8 21:06:27 2018 +1000

    Only init the error message text when it's about to be used.

2	1	src/com/quollwriter/ui/FirstUseWizard.java

commit ed3c17780dd24027fc4cfffe3ea2fccabe791617
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 6 09:31:02 2018 +1000

    Ensured that the auto-save time value is being gained from the correct set of properties.

3	1	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 931f4820ed126b772e4e76708b3b568fad06c03f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 4 09:41:38 2018 +1000

    A number of fixes to both the default strings, adding in missing values and fixing up errors.  A few new strings have been added, mostly for those that are present in the properties.xml file.  The first use wizard has been modified to ensure full use of the strings and a number of places that weren't using strings.  For user configurable objects, especially legacy ones, they now use the localized string rather than using the name in the object itself.

28	16	data/default-ui-language-strings.json
4	36	data/properties.xml
0	6	src/com/quollwriter/Constants.java
92	43	src/com/quollwriter/Environment.java
87	12	src/com/quollwriter/LanguageStrings.java
2	0	src/com/quollwriter/RefValueProvider.java
1	1	src/com/quollwriter/importer/HTMLDocumentImporter.java
46	46	src/com/quollwriter/importer/MSWordDocumentImporter.java
5	5	src/com/quollwriter/text/rules/ParagraphReadabilityRule.java
1	1	src/com/quollwriter/ui/AssetAccordionItem.java
7	2	src/com/quollwriter/ui/ChapterDescriptionAccordionItem.java
6	1	src/com/quollwriter/ui/ChapterGoalsAccordionItem.java
6	1	src/com/quollwriter/ui/ChapterPlanAccordionItem.java
4	9	src/com/quollwriter/ui/FirstUseWizard.java
58	58	src/com/quollwriter/ui/FullScreenTextProperties.java
8	0	src/com/quollwriter/ui/LanguageStringsEditor.java
45	36	src/com/quollwriter/ui/PopupWizard.java
1	1	src/com/quollwriter/ui/ProjectTextProperties.java
1	1	src/com/quollwriter/ui/ProjectViewer.java
9	1	src/com/quollwriter/ui/Targets.java
22	0	src/com/quollwriter/ui/UIUtils.java
55	47	src/com/quollwriter/ui/UserPropertyHandler.java
1	1	src/com/quollwriter/ui/WarmupsViewer.java
2	1	src/com/quollwriter/ui/panels/IdeaBoard.java
2	1	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit e85d7972ab00074b9ef9fd73d41ea651ac7516c3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed May 2 11:14:38 2018 +1000

    No longer url encode the url when creating a link.

1	1	src/com/quollwriter/ui/UIUtils.java

commit 6ad1f36c0cedd53319ea03d115701e1be8e0ce17
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 20 09:56:25 2018 +1000

    The new code to update the strings has been commented out.  It shouldn't, in theory, be necessary if the server is also up to date and returns the correct version of the strings.

0	13	data/default-ui-language-strings.json
2	2	data/whats-new.xml
2	2	src/com/quollwriter/ui/UIUtils.java

commit 04166c363a8b84f509e7d5977f605dcb749c956a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Apr 19 12:27:26 2018 +1000

    Update version and add new feature to upgrade a set of UI strings to the current version of QW.

1	1	build.xml
14	1	data/default-ui-language-strings.json
7	0	data/whats-new.xml
131	1	src/com/quollwriter/ui/UIUtils.java

commit e7669dada22bd211c499ea872baebf546697cffc
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Apr 18 11:11:01 2018 +1000

    Update the build number and what's new info.

1	1	build.xml
7	0	data/whats-new.xml

commit cc74da7baba64d7b84a29ec2618771fca7aa6754
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Apr 18 10:45:24 2018 +1000

    Removed an unnecessary padding between the idea add/edit box and the button underneath.

1	1	src/com/quollwriter/ui/panels/IdeaBoard.java

commit f8790d144e6a5dd9937022c1133eea8504a052e5
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 15 19:01:16 2018 +1000

    Fix to prevent the scrollpane wrapper for the text area won't resize when text it typed into it.

1	0	src/com/quollwriter/ui/Options.java
7	3	src/com/quollwriter/ui/TextArea.java

commit 28b76375df6dcd8808e7cef423a56430ec704f5b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Mar 18 09:07:50 2018 +1000

    Close a project viewer when it fails to open to ensure that the resources are cleaned up.

3	0	src/com/quollwriter/Environment.java

commit 85fab42246c7535e4e50aaf7d81624dbd706d471
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Mar 18 09:06:55 2018 +1000

    If placeholder text is present in the TextArea then return null for getText.  Prevent an NPE when getting a scenes item description.

1	1	src/com/quollwriter/ui/TextArea.java
24	10	src/com/quollwriter/ui/actionHandlers/SceneFormatDetails.java

commit 5c3d56cc75363d8f6102eab1e70c6476886841d8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Mar 18 09:05:45 2018 +1000

    Prevent a structure item from being added twice.

15	0	src/com/quollwriter/ui/IconColumn.java

commit 12bd40e67d468be7da3d9af50bcc5d3a3d40f472
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Mar 17 12:33:58 2018 +1000

    Removed some debug code that was causing too many what's new items to be displayed when QW has been upgraded.

1	2	src/com/quollwriter/ui/WhatsNew.java

commit f67d319d01c6f4452f7e871e660f24a5a2a67dcd
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Mar 17 11:59:01 2018 +1000

    Fixed a bug that caused the TextArea for an Idea to resize when the text overflowed the height of the box.

1	1	build.xml
7	0	data/whats-new.xml
2	0	src/com/quollwriter/ui/panels/IdeaBoard.java

commit 83f587e9292ed8327f0b21b0922d867c008c5d6c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Mar 4 08:47:57 2018 +1000

    Updated the what's new.

7	0	data/whats-new.xml

commit 6be2b3eb9c186fe3791fbd803d147884267e9ece
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Mar 4 08:38:16 2018 +1000

    Add in missing layout files.

10	10	build.xml
-	-	data/asset-layout-0-n.png
-	-	data/asset-layout-1-n.png
-	-	data/asset-layout-2-n.png
-	-	data/asset-layout-3-n.png
-	-	data/asset-layout-4-n.png
-	-	data/asset-layout-5-n.png
-	-	data/asset-layout-6-n.png
-	-	data/asset-layout-7-n.png
-	-	data/asset-layout-8-n.png

commit 86ea0808717b1ca6cd8f9e717b136ead97991537
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Mar 2 09:33:57 2018 +1000

    Finally, update the version to 2.6.5.

3	7	build.xml

commit 0029142ac69f5c7e39b87734b9b3116b13711dd5
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Mar 2 00:11:35 2018 +1000

    Update to the what's new.  A couple of tweaks to the wizard button strings and a tweak to ensure that a selected ui language can be used even if it's already downloaded.

11	0	data/default-ui-language-strings.json
1	4	data/whats-new.xml
33	1	src/com/quollwriter/ui/FirstUseWizard.java
1	1	src/com/quollwriter/ui/LanguageStringsEditor.java
3	1	src/com/quollwriter/ui/WhatsNew.java
6	6	src/com/quollwriter/ui/Wizard.java

commit 4573ccd769f1cffe964834790ff29070da2280b8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Mar 1 15:51:38 2018 +1000

    Prevent duplication of the UI languages in the select list.

6	4	src/com/quollwriter/ui/UIUtils.java

commit bb311ff927e683215258c0e344a400bc14358f89
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Mar 1 11:32:01 2018 +1000

    Turn off the forced debug mode, that was used for testing.

0	1	src/com/quollwriter/Startup.java

commit ca833cbbb53ad43e1d354b6ee37773e1b1cb107f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Mar 1 10:29:54 2018 +1000

    Added some extra error checking to the language strings.  Also added a T&Cs checkbox and link to submitting the language strings.

5	5	data/default-ui-language-strings.json
25	0	src/com/quollwriter/LanguageStrings.java
32	1	src/com/quollwriter/ui/LanguageStringsEditor.java

commit 3963aad226372fb04b23d620a3387a0e70735bed
Author: Gary Bentley <gary@quollwriter.com>
Date:   Tue Feb 27 21:37:04 2018 +1000

    Added locally held UI language strings to the UI language strings selector.

45	0	src/com/quollwriter/Environment.java
27	28	src/com/quollwriter/ui/LanguageStringsEditor.java
12	2	src/com/quollwriter/ui/UIUtils.java

commit 0b1c766ffaae939160082cabbee2178db68c6ea9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Feb 26 00:28:02 2018 +1000

    Tweaks and fixes to the Language Strings Editor including better reference id handling and error checking.

27	0	src/com/quollwriter/Environment.java
480	49	src/com/quollwriter/LanguageStrings.java
2	0	src/com/quollwriter/RefValueProvider.java
244	115	src/com/quollwriter/ui/LanguageStringsEditor.java
1	1	src/com/quollwriter/ui/Options.java

commit f9ce4c81d23884ecca79ba8ced510fbb63e06261
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Feb 22 23:11:02 2018 +1000

    Fixes related to testing and added the ability for the Language Strings Editor to display differences between versions to easily see what is new/changed.

15	5	data/default-ui-language-strings.json
122	79	src/com/quollwriter/Environment.java
155	2	src/com/quollwriter/LanguageStrings.java
1	0	src/com/quollwriter/Startup.java
1	1	src/com/quollwriter/Utils.java
1	1	src/com/quollwriter/editors/EditorsEnvironment.java
5	5	src/com/quollwriter/editors/ui/EditorRemovedMessageBox.java
63	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java
86	1	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java
620	87	src/com/quollwriter/ui/LanguageStringsEditor.java
52	34	src/com/quollwriter/ui/UIUtils.java
9	9	src/com/quollwriter/ui/sidebars/AbstractSideBar.java
54	26	src/com/quollwriter/ui/sidebars/AccordionItemsSideBar.java

commit 93b04679d5d211bccdbb7a10c5c01066b1f03b4a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Feb 17 16:59:24 2018 +1000

    Fixes relating to the testing of version 2.6.5.  Also modified the project comments viewer to display all comments in the selector and added a header button to open the associated project.

41	20	data/default-ui-language-strings.json
5	0	data/properties.xml
21	0	src/com/quollwriter/Environment.java
1	0	src/com/quollwriter/LanguageStrings.java
5	5	src/com/quollwriter/editors/DefaultEditorsWebServiceErrorAction.java
2	0	src/com/quollwriter/editors/EditorsEnvironment.java
2	2	src/com/quollwriter/editors/EditorsMessageHandler.java
1	1	src/com/quollwriter/editors/EditorsWebServiceHandler.java
136	132	src/com/quollwriter/editors/messages/EditorMessage.java
1	1	src/com/quollwriter/editors/ui/CommentActionHandler.java
1	1	src/com/quollwriter/editors/ui/EditorLogin.java
5	5	src/com/quollwriter/editors/ui/EditorsUIUtils.java
7	2	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
100	0	src/com/quollwriter/editors/ui/ProjectCommentsViewer.java
57	30	src/com/quollwriter/editors/ui/ProjectEditStopMessageBox.java
1	1	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
19	16	src/com/quollwriter/editors/ui/sidebars/ProjectCommentsSideBar.java
1	1	src/com/quollwriter/ui/ProblemFinderRuleConfig.java

commit 57c1a76032ad4d1259ea17baebdb13b0cb403a7d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Feb 15 21:09:17 2018 +1000

    Fixes arising from testing of version 2.6.5.

-	-	data/default-find-image.png
50	29	data/default-ui-language-strings.json
15	15	data/problem-finder-rules.xml
1	1	data/properties.xml
42	65	src/com/quollwriter/Environment.java
345	10	src/com/quollwriter/LanguageStrings.java
419	419	src/com/quollwriter/achievements/AchievementsManager.java
61	61	src/com/quollwriter/achievements/rules/AbstractAchievementRule.java
1	1	src/com/quollwriter/data/Chapter.java
11	4	src/com/quollwriter/data/DataObject.java
3	1	src/com/quollwriter/text/rules/TooManyClausesRule.java
24	11	src/com/quollwriter/ui/AbstractProjectViewer.java
2	3	src/com/quollwriter/ui/AbstractViewer.java
103	27	src/com/quollwriter/ui/AssetAccordionItem.java
2	1	src/com/quollwriter/ui/Landing.java
55	11	src/com/quollwriter/ui/LanguageStringsEditor.java
1	1	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
485	467	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
10	1	src/com/quollwriter/ui/ProjectViewer.java
12	1	src/com/quollwriter/ui/UIUtils.java
4	5	src/com/quollwriter/ui/Wizard.java
0	46	src/com/quollwriter/ui/actionHandlers/AssetActionHandler.java
10	8	src/com/quollwriter/ui/actionHandlers/NoteActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/TextInputActionHandler.java
4	1	src/com/quollwriter/ui/panels/QuollEditorPanel.java
10	1	src/com/quollwriter/ui/panels/StatisticsPanel.java
15	0	src/com/quollwriter/ui/sidebars/ProblemFinderSideBar.java
31	15	src/com/quollwriter/ui/userobjects/LayoutAddEdit.java

commit 2256caf6f573af7816f4b72c61763d0743a99e71
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jan 31 11:36:42 2018 +1000

    More UI language strings changes.

93	2	data/default-ui-language-strings.json
7	0	src/com/quollwriter/LanguageStrings.java
80	301	src/com/quollwriter/editors/ui/EditorsUIUtils.java
306	284	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java

commit 0b8b3bfe87a16ed1e2cae74e63e50f609ea9c260
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jan 29 23:50:07 2018 +1000

    More UI language strings changes.  Again, this commit is not stable and hasn't been fully tested.

457	82	data/default-ui-language-strings.json
26	0	src/com/quollwriter/LanguageStrings.java
107	91	src/com/quollwriter/editors/ui/EditorChaptersAccordionItem.java
4	2	src/com/quollwriter/editors/ui/EditorLogin.java
86	43	src/com/quollwriter/editors/ui/EditorRegister.java
3	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java
117	105	src/com/quollwriter/editors/ui/ProjectCommentsChaptersAccordionItem.java
38	33	src/com/quollwriter/editors/ui/ProjectCommentsViewer.java
23	17	src/com/quollwriter/editors/ui/ProjectSentReceivedViewer.java
114	107	src/com/quollwriter/editors/ui/panels/ChapterCommentsPanel.java
38	17	src/com/quollwriter/editors/ui/panels/EditorChapterPanel.java
266	248	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
70	39	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
8	8	src/com/quollwriter/editors/ui/sidebars/ProjectCommentsSideBar.java

commit f805034afd897ea6c61120185071694b2881bf56
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 26 22:57:03 2018 +1000

    More changes for the UI language stuff.  Again, this commit is not fully tested or debugged and should not be used for a real release.

1742	217	data/default-ui-language-strings.json
3	1	src/com/quollwriter/Constants.java
97	14	src/com/quollwriter/Environment.java
161	3	src/com/quollwriter/LanguageStrings.java
0	9	src/com/quollwriter/Startup.java
345	336	src/com/quollwriter/editors/DefaultEditorMessageProcessor.java
72	64	src/com/quollwriter/editors/DefaultEditorsWebServiceErrorAction.java
99	49	src/com/quollwriter/editors/EditorsEnvironment.java
16	409	src/com/quollwriter/editors/EditorsMessageHandler.java
205	204	src/com/quollwriter/editors/EditorsWebServiceCall.java
613	1091	src/com/quollwriter/editors/EditorsWebServiceHandler.java
58	55	src/com/quollwriter/editors/ui/ChatMessageBox.java
122	114	src/com/quollwriter/editors/ui/CommentActionHandler.java
31	23	src/com/quollwriter/editors/ui/DeleteCommentActionHandler.java
117	105	src/com/quollwriter/editors/ui/EditorChatBox.java
179	135	src/com/quollwriter/editors/ui/EditorInfoBox.java
18	6	src/com/quollwriter/editors/ui/EditorInfoMessageBox.java
224	204	src/com/quollwriter/editors/ui/EditorLogin.java
79	114	src/com/quollwriter/editors/ui/EditorProjectViewer.java
42	20	src/com/quollwriter/editors/ui/EditorRegister.java
29	13	src/com/quollwriter/editors/ui/EditorRemovedMessageBox.java
905	1165	src/com/quollwriter/editors/ui/EditorsUIUtils.java
88	77	src/com/quollwriter/editors/ui/InviteMessageBox.java
16	7	src/com/quollwriter/editors/ui/InviteResponseMessageBox.java
107	129	src/com/quollwriter/editors/ui/MessageAccordionItem.java
128	123	src/com/quollwriter/editors/ui/MessageBox.java
629	92	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
59	24	src/com/quollwriter/editors/ui/NewProjectResponseMessageBox.java
170	164	src/com/quollwriter/editors/ui/ProjectCommentsMessageBox.java
30	8	src/com/quollwriter/editors/ui/ProjectEditStopMessageBox.java
84	77	src/com/quollwriter/editors/ui/UpdateProjectMessageBox.java
239	234	src/com/quollwriter/editors/ui/sidebars/EditorPanel.java
741	719	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
193	175	src/com/quollwriter/editors/ui/sidebars/ProjectCommentsSideBar.java
19	6	src/com/quollwriter/text/ProblemFinder.java
41	58	src/com/quollwriter/text/SentenceIterator.java
2	1	src/com/quollwriter/ui/AbstractViewer.java
4	1	src/com/quollwriter/ui/DefaultQuollWriterUpdater.java
5	1	src/com/quollwriter/ui/EditPanel.java
6	2	src/com/quollwriter/ui/FirstUseWizard.java
11	6	src/com/quollwriter/ui/ImageSelector.java
59	56	src/com/quollwriter/ui/ImportProject.java
8	6	src/com/quollwriter/ui/Landing.java
14	2	src/com/quollwriter/ui/LanguageStringsEditor.java
0	50	src/com/quollwriter/ui/Options.java
4	3	src/com/quollwriter/ui/ProjectViewer.java
4	2	src/com/quollwriter/ui/Targets.java
20	1	src/com/quollwriter/ui/TextArea.java
2	1	src/com/quollwriter/ui/TextPropertiesEditPanel.java
59	41	src/com/quollwriter/ui/UIUtils.java
9	3	src/com/quollwriter/ui/actionHandlers/NoteActionHandler.java
19	26	src/com/quollwriter/ui/actionHandlers/NoteFormatDetails.java
6	4	src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java
2	1	src/com/quollwriter/ui/charts/ReadabilityIndicesChart.java
2	1	src/com/quollwriter/ui/charts/SessionTimeChart.java
2	1	src/com/quollwriter/ui/charts/SessionWordCountChart.java
5	1	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
55	56	src/com/quollwriter/ui/sidebars/ProblemFinderSideBar.java
8	3	src/com/quollwriter/ui/sidebars/ProjectSideBar.java
5	1	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java
9	4	src/com/quollwriter/ui/userobjects/FieldsAddEdit.java
9	3	src/com/quollwriter/ui/userobjects/UserConfigurableObjectTypeEdit.java

commit f1f7dfd2ff2f6fd0006932249d0d0999a7ecc711
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jan 8 10:17:39 2018 +1000

    Added a number of new features to the language strings editor, including the ability to delete strings and use the currently edited strings for testing.

62	2	data/default-ui-language-strings.json
5	0	data/properties.xml
4	0	src/com/quollwriter/Constants.java
209	39	src/com/quollwriter/Environment.java
158	4	src/com/quollwriter/LanguageStrings.java
106	106	src/com/quollwriter/UserProperties.java
43	2	src/com/quollwriter/Utils.java
6	2	src/com/quollwriter/ui/AbstractViewer.java
9	6	src/com/quollwriter/ui/Landing.java
607	186	src/com/quollwriter/ui/LanguageStringsEditor.java
256	1	src/com/quollwriter/ui/Options.java
8	6	src/com/quollwriter/ui/TextArea.java
1	0	src/com/quollwriter/ui/UIUtils.java
7	0	src/com/quollwriter/ui/sidebars/AccordionItemsSideBar.java

commit e84201f0f90a05c24bd4f728afdea952fb89a15a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Dec 30 10:29:27 2017 +1000

    An unstable update that starts to bind the language strings to the QW website.  The Options panel has been updated to allow for selection of a UI language and addition/editing of existing translations.  It is not recommended that you use this update.

138	6	data/default-ui-language-strings.json
18	3	data/properties.xml
20	1	src/com/quollwriter/Constants.java
480	160	src/com/quollwriter/Environment.java
27	13	src/com/quollwriter/JSONDecoder.java
185	40	src/com/quollwriter/LanguageStrings.java
9	0	src/com/quollwriter/Startup.java
161	1	src/com/quollwriter/Utils.java
198	30	src/com/quollwriter/ui/FirstUseWizard.java
0	86	src/com/quollwriter/ui/Landing.java
624	190	src/com/quollwriter/ui/LanguageStringsEditor.java
152	1	src/com/quollwriter/ui/Options.java
15	1	src/com/quollwriter/ui/TextArea.java
195	12	src/com/quollwriter/ui/UIUtils.java
28	0	src/com/quollwriter/ui/components/QTextEditor.java

commit 59b97e3458342185c2e0b1b8f6bd90c7ee39b172
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Dec 10 21:18:28 2017 +1000

    A large update that improves the strings editor and reworks how the dictionary provider behaves (basically to have a single dictionary per language rather than 1 per QTextEditor.  This update is stable but a mess and should not be used for real purposes.  A lot of debugging statements are present and the load/save of language strings files is not thoroughly tested, use at your own risk.

20	2	data/default-ui-language-strings.json
6	2	src/com/quollwriter/Constants.java
20	7	src/com/quollwriter/DictionaryProvider.java
31	0	src/com/quollwriter/DictionaryProvider2.java
106	15	src/com/quollwriter/Environment.java
391	0	src/com/quollwriter/LanguageDictionaryProvider.java
1248	807	src/com/quollwriter/LanguageStrings.java
311	0	src/com/quollwriter/ProjectDictionaryProvider.java
280	0	src/com/quollwriter/UserDictionaryProvider.java
1	1	src/com/quollwriter/Utils.java
38	40	src/com/quollwriter/ui/AbstractProjectViewer.java
18	1	src/com/quollwriter/ui/AbstractViewer.java
6	2	src/com/quollwriter/ui/DictionaryManager.java
51	0	src/com/quollwriter/ui/Landing.java
966	182	src/com/quollwriter/ui/LanguageStringsEditor.java
4	4	src/com/quollwriter/ui/ProjectViewer.java
1	1	src/com/quollwriter/ui/SpellCheckSupported.java
44	44	src/com/quollwriter/ui/TextArea.java
139	3	src/com/quollwriter/ui/UIUtils.java
7	9	src/com/quollwriter/ui/components/QSpellChecker.java
5	6	src/com/quollwriter/ui/components/QTextEditor.java
78	78	src/com/quollwriter/ui/forms/MultiLineTextFormItem.java
2	2	src/com/quollwriter/ui/panels/AbstractEditorPanel.java

commit e7c37fb8b7aeb7799a9db64302889ac46c75407f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Dec 2 22:44:40 2017 +1000

    Warning: this functionality is a work in progress.  Reworked how strings are represented in the LanguageStrings class, they now use a parent/child Node/Value relationship.  Reworked how reference loop detection works.  Added tab completion reference lookup to the strings editor.  Added a preview and error checking to the strings editor.  The editor makes use of the Node/Value structure.  Also added a RefValueProvider interface that abstracts the retrieval of a string for an id.  This allows for any source to be used to get a strings value, decoupling that responsibility from the LanguageStrings class.

16	14	data/default-ui-language-strings.json
2	4	src/com/quollwriter/Environment.java
1397	233	src/com/quollwriter/LanguageStrings.java
8	0	src/com/quollwriter/RefValueProvider.java
1	1	src/com/quollwriter/ui/AbstractViewer.java
38	0	src/com/quollwriter/ui/Landing.java
1040	182	src/com/quollwriter/ui/LanguageStringsEditor.java
13	0	src/com/quollwriter/ui/TextArea.java
123	123	src/com/quollwriter/ui/Tips.java
67	0	src/com/quollwriter/ui/UIUtils.java

commit 115333c67a64edc039e4e886800389e1aeeef619
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Nov 25 09:14:04 2017 +1000

    Added a new language strings editor which will be used for creating a new file for a UI translation.  Also added some new features to the language strings file to support the editor.

121	23	data/default-ui-language-strings.json
18	1	src/com/quollwriter/Environment.java
167	10	src/com/quollwriter/LanguageStrings.java
1	1	src/com/quollwriter/ui/ImportTransferHandlerOverlay.java
1893	0	src/com/quollwriter/ui/LanguageStringsEditor.java
10	18	src/com/quollwriter/ui/UIUtils.java
2	2	src/com/quollwriter/ui/panels/QuollEditorPanel.java
72	72	src/com/quollwriter/ui/sidebars/AccordionItemsSideBar.java

commit 16743c12b1ec2503fe72e074e544c1ac14c9749c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Nov 19 21:36:42 2017 +1000

    More UI string changes (a surprise I know).  Also replaced the interface layout images with the new LayoutImagePanel class that draws the image instead using the localized strings.

281	55	data/default-ui-language-strings.json
0	5	src/com/quollwriter/Constants.java
47	0	src/com/quollwriter/LanguageStrings.java
0	1	src/com/quollwriter/data/LegacyUserConfigurableObject.java
44	103	src/com/quollwriter/ui/AbstractProjectViewer.java
77	216	src/com/quollwriter/ui/AbstractViewer.java
42	76	src/com/quollwriter/ui/BackupsManager.java
12	10	src/com/quollwriter/ui/ErrorWindow.java
136	160	src/com/quollwriter/ui/FileFinder.java
225	0	src/com/quollwriter/ui/LayoutImagePanel.java
17	17	src/com/quollwriter/ui/MessageWindow.java
210	503	src/com/quollwriter/ui/Options.java
49	46	src/com/quollwriter/ui/PasswordInputWindow.java
48	106	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
256	268	src/com/quollwriter/ui/QColorChooser.java
18	41	src/com/quollwriter/ui/TaggedObjectAccordionItem.java
114	113	src/com/quollwriter/ui/TextInputWindow.java
26	27	src/com/quollwriter/ui/UIUtils.java
183	230	src/com/quollwriter/ui/WarmupPromptSelect.java
18	6	src/com/quollwriter/ui/actionHandlers/FindSynonymsActionHandler.java
6	5	src/com/quollwriter/ui/forms/Form.java
28	89	src/com/quollwriter/ui/userobjects/BasicInfoAddEdit.java

commit aaf9a968754355f0ef86ea50ef8587023cd919d4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Nov 17 21:03:38 2017 +1000

    Yet more UI string changes.  Also the what's new handling has been changed to use the ui strings.

337	11	data/default-ui-language-strings.json
10	56	data/whats-new.xml
29	31	src/com/quollwriter/Constants.java
21	1	src/com/quollwriter/Environment.java
57	0	src/com/quollwriter/LanguageStrings.java
513	531	src/com/quollwriter/Utils.java
133	144	src/com/quollwriter/achievements/ui/Achievements.java
1	0	src/com/quollwriter/data/Note.java
305	300	src/com/quollwriter/data/editors/EditorEditor.java
114	103	src/com/quollwriter/ui/FullScreenPropertiesEditPanel.java
425	215	src/com/quollwriter/ui/Options.java
37	17	src/com/quollwriter/ui/TextPropertiesEditPanel.java
1	1	src/com/quollwriter/ui/UIUtils.java
209	178	src/com/quollwriter/ui/WhatsNew.java
71	55	src/com/quollwriter/ui/actionHandlers/DeleteChapterItemActionHandler.java
2	1	src/com/quollwriter/ui/sidebars/TextPropertiesSideBar.java
0	115	src/com/quollwriter/ui/whatsnewcomps/version_2_5_9.java

commit 8407e20e4ea15bca0601994bef2a20aeefb3a41c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Nov 15 21:59:46 2017 +1000

    Yet MORE UI string changes.

12	2	data/default-ui-language-strings.json
2	0	src/com/quollwriter/LanguageStrings.java
182	174	src/com/quollwriter/ui/actionHandlers/AbstractFormPopup.java
91	87	src/com/quollwriter/ui/sidebars/TextPropertiesSideBar.java

commit ba244079295931d65118348e192a7b3c5931ea2c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Nov 15 20:36:12 2017 +1000

    More changes for the UI strings.

299	32	data/default-ui-language-strings.json
28	3	src/com/quollwriter/LanguageStrings.java
125	113	src/com/quollwriter/exporter/EPUBDocumentExporter.java
2	26	src/com/quollwriter/exporter/HTMLDocumentExporter.java
0	415	src/com/quollwriter/exporter/MSWordDocDocumentExporter.java
128	192	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
47	82	src/com/quollwriter/ui/ExportProject.java
0	472	src/com/quollwriter/ui/GetLatestVersion.java
94	52	src/com/quollwriter/ui/Targets.java
39	32	src/com/quollwriter/ui/UIUtils.java
171	109	src/com/quollwriter/ui/WordCountTimerBox.java
157	133	src/com/quollwriter/ui/actionHandlers/AssetActionHandler.java
92	77	src/com/quollwriter/ui/actionHandlers/ChapterItemActionHandler.java
48	40	src/com/quollwriter/ui/actionHandlers/RenameNoteTypeActionHandler.java
62	52	src/com/quollwriter/ui/actionHandlers/RenameTagActionHandler.java
38	34	src/com/quollwriter/ui/actionHandlers/TextInputActionHandler.java
122	121	src/com/quollwriter/ui/panels/AddAssetPanel.java
29	48	src/com/quollwriter/ui/panels/AssetViewPanel.java
2	2	src/com/quollwriter/ui/sidebars/ProjectSideBar.java

commit 9fe3973cae7a1a2b5d636a2a3a411ead3314a826
Author: Gary Bentley <gary@quollwriter.com>
Date:   Tue Nov 14 09:23:48 2017 +1000

    More changes for the UI strings.  Also started cleaning up the UIUtils which had become a dumping ground for anything vaguely UI related.  A lot of code has been moved to more appropriate places.

504	161	data/default-ui-language-strings.json
2	1	src/com/quollwriter/Environment.java
31	3	src/com/quollwriter/LanguageStrings.java
551	411	src/com/quollwriter/data/Project.java
13	13	src/com/quollwriter/editors/EditorsEnvironment.java
662	664	src/com/quollwriter/editors/EditorsMessageHandler.java
372	370	src/com/quollwriter/editors/ui/EditorProjectViewer.java
209	211	src/com/quollwriter/editors/ui/ProjectSentReceivedViewer.java
84	1	src/com/quollwriter/text/TextUtilities.java
73	0	src/com/quollwriter/ui/AbstractProjectViewer.java
170	159	src/com/quollwriter/ui/BackgroundSelector.java
5	13	src/com/quollwriter/ui/DictionaryManager.java
10	4	src/com/quollwriter/ui/EditNoteTypes.java
7	45	src/com/quollwriter/ui/EditProjectStatuses.java
35	56	src/com/quollwriter/ui/ProjectViewer.java
83	79	src/com/quollwriter/ui/TextPropertiesEditPanel.java
22	30	src/com/quollwriter/ui/TypesEditor.java
245	947	src/com/quollwriter/ui/UIUtils.java
172	181	src/com/quollwriter/ui/WarmupsViewer.java
46	50	src/com/quollwriter/ui/actionHandlers/AddNewNoteTypeActionHandler.java
0	79	src/com/quollwriter/ui/actionHandlers/DeleteOutlineItemActionHandler.java
62	0	src/com/quollwriter/ui/charts/QuollChartUtils.java
289	240	src/com/quollwriter/ui/panels/IdeaBoard.java
3	2	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit 423f7ead708d21d583a7a6a22a6927345fd5cb3d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Nov 9 20:08:09 2017 +1000

    More UI string changes, also started moving things to use static imports for shorter code.

197	3	data/default-ui-language-strings.json
29	1	src/com/quollwriter/LanguageStrings.java
5	5	src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java
115	128	src/com/quollwriter/ui/charts/QuollChartUtils.java
345	307	src/com/quollwriter/ui/charts/ReadabilityIndicesChart.java
239	236	src/com/quollwriter/ui/charts/SessionTimeChart.java
250	233	src/com/quollwriter/ui/charts/SessionWordCountChart.java

commit 26312ac7ac10c6d06c9c42e73171a9f81fe63aca
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Nov 8 23:15:58 2017 +1000

    More ui string changes and changed the chapter field editing to use the legacy object type fields.

204	2	data/default-ui-language-strings.json
30	0	src/com/quollwriter/LanguageStrings.java
34	34	src/com/quollwriter/data/Chapter.java
40	40	src/com/quollwriter/data/LegacyUserConfigurableObject.java
192	183	src/com/quollwriter/db/ProjectInfoObjectManager.java
24	25	src/com/quollwriter/ui/ChapterDescriptionAccordionItem.java
59	18	src/com/quollwriter/ui/ChapterFieldAccordionItem.java
26	26	src/com/quollwriter/ui/ChapterGoalsAccordionItem.java
24	25	src/com/quollwriter/ui/ChapterPlanAccordionItem.java
170	149	src/com/quollwriter/ui/ImageSelector.java
38	34	src/com/quollwriter/ui/charts/AbstractQuollChart.java
135	104	src/com/quollwriter/ui/charts/AllWordCountsChart.java
271	239	src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java
0	3	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java
66	23	src/com/quollwriter/ui/panels/AbstractViewOnlyEditorPanel.java
57	74	src/com/quollwriter/ui/panels/OptionsPanel.java
114	104	src/com/quollwriter/ui/panels/StatisticsPanel.java
84	79	src/com/quollwriter/ui/sidebars/ChapterInformationSideBar.java

commit 72794a8e309f37f23a787277e2509b3444f8dc6f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Nov 4 11:25:40 2017 +1000

    More UI string changes.

71	0	data/default-ui-language-strings.json
5	0	src/com/quollwriter/LanguageStrings.java
169	244	src/com/quollwriter/ui/ChapterFieldAccordionItem.java
153	40	src/com/quollwriter/ui/FirstUseWizard.java

commit b68f70c838f91cf77ea454bc751333b4a80c1065
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Nov 1 22:34:17 2017 +1000

    More UI string changes and consolidation of the synonym lookup code into the FindSynonymsActionHandler.

79	0	data/default-ui-language-strings.json
12	0	src/com/quollwriter/LanguageStrings.java
83	12	src/com/quollwriter/text/ProblemFinder.java
1	1	src/com/quollwriter/ui/Landing.java
153	153	src/com/quollwriter/ui/TaggedObjectAccordionItem.java
38	37	src/com/quollwriter/ui/TextArea.java
0	246	src/com/quollwriter/ui/UIUtils.java
116	182	src/com/quollwriter/ui/actionHandlers/FindSynonymsActionHandler.java
135	93	src/com/quollwriter/ui/actionHandlers/NoteActionHandler.java
12	12	src/com/quollwriter/ui/actionHandlers/OutlineItemFormatDetails.java
5	2	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java

commit 26f20fce7a4988cfabb8f8b9d0a8b96b7d3477e5
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Oct 29 12:44:46 2017 +1000

    More grinding through the ui string changes.

242	17	data/default-ui-language-strings.json
2	2	src/com/quollwriter/Environment.java
27	1	src/com/quollwriter/LanguageStrings.java
0	153	src/com/quollwriter/ui/FirstProject.java
511	553	src/com/quollwriter/ui/Landing.java
1	1	src/com/quollwriter/ui/ProjectViewer.java
53	53	src/com/quollwriter/ui/userobjects/DateUserConfigurableObjectTypeFieldConfigHandler.java

commit dc499c5ac75061cc5b17974a94b9ccc8f9e07424
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 27 23:47:06 2017 +1000

    More changes for the ui strings.

74	8	data/default-ui-language-strings.json
17	0	src/com/quollwriter/LanguageStrings.java
0	8	src/com/quollwriter/text/rules/AbstractDialogueRule.java
24	19	src/com/quollwriter/text/rules/WordFinder.java
0	158	src/com/quollwriter/ui/ConvertWarmupToProject.java
102	93	src/com/quollwriter/ui/DefaultChapterItemViewPopupProvider.java
76	21	src/com/quollwriter/ui/DefaultQuollWriterUpdater.java
12	83	src/com/quollwriter/ui/FullScreenFrame.java
24	23	src/com/quollwriter/ui/ImportTransferHandlerOverlay.java
0	7	src/com/quollwriter/ui/ProjectViewer.java
48	49	src/com/quollwriter/ui/WarmupsAccordionItem.java
0	114	src/com/quollwriter/ui/actionHandlers/AddNewItemTypeActionHandler.java
34	30	src/com/quollwriter/ui/panels/BlankQuollPanel.java
0	236	src/com/quollwriter/ui/renderers/WarmupsProjectTreeCellEditor.java

commit 1b8a3ec6e6a55bbd13cf0b24dc17a987bee63b37
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 27 10:37:23 2017 +1000

    More changes for the ui text strings.  Also some refactoring to have common base classes and removal of commented and unnecessary code.

222	9	data/default-ui-language-strings.json
25	0	src/com/quollwriter/LanguageStrings.java
61	22	src/com/quollwriter/ui/AbstractProjectViewer.java
100	84	src/com/quollwriter/ui/AppearsInChaptersEditPanel.java
93	72	src/com/quollwriter/ui/ChapterProblemResultsBox.java
228	205	src/com/quollwriter/ui/ChaptersAccordionItem.java
130	277	src/com/quollwriter/ui/DictionaryManager.java
14	7	src/com/quollwriter/ui/EditItemTypes.java
18	54	src/com/quollwriter/ui/EditNoteTypes.java
37	32	src/com/quollwriter/ui/EditProjectStatuses.java
0	222	src/com/quollwriter/ui/NewObjectTypeWizard.java
64	64	src/com/quollwriter/ui/NotesAccordionItem.java
300	283	src/com/quollwriter/ui/ObjectDocumentsEditPanel.java
34	33	src/com/quollwriter/ui/ProjectEvent.java
150	95	src/com/quollwriter/ui/TypesEditor.java
28	13	src/com/quollwriter/ui/TypesHandler.java
1	1	src/com/quollwriter/ui/UIUtils.java
4	39	src/com/quollwriter/ui/panels/QuollEditorPanel.java
0	3	src/com/quollwriter/ui/renderers/ChapterSnippetsTreeCellRenderer.java
81	83	src/com/quollwriter/ui/renderers/ProjectTreeCellRenderer.java
456	365	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit e7391f77760b663d12ba102228d9a11faf75a25e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Oct 21 23:19:46 2017 +1000

    More ui string additions/modifications.  Removal of quite a lot of commented old code.  Some refactoring to remove unnecessary code.  Some simplification of some methods to make the delineation between the classes and uses more obvious.

378	142	data/default-ui-language-strings.json
16	15	src/com/quollwriter/LanguageStrings.java
28	27	src/com/quollwriter/data/Note.java
197	198	src/com/quollwriter/editors/ui/panels/EditorChapterPanel.java
170	1759	src/com/quollwriter/ui/AbstractProjectViewer.java
85	213	src/com/quollwriter/ui/AbstractViewer.java
150	165	src/com/quollwriter/ui/AssetAccordionItem.java
110	155	src/com/quollwriter/ui/EditPanel.java
279	279	src/com/quollwriter/ui/IconColumn.java
20	15	src/com/quollwriter/ui/NamedObjectPreviewPopup.java
28	200	src/com/quollwriter/ui/ProjectViewer.java
16	16	src/com/quollwriter/ui/actionHandlers/DeleteIdeaTypeActionHandler.java
51	51	src/com/quollwriter/ui/actionHandlers/EditIdeaTypeActionHandler.java
45	45	src/com/quollwriter/ui/actionHandlers/NewIdeaTypeActionHandler.java
5	87	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java
65	91	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
30	57	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
66	64	src/com/quollwriter/ui/panels/AssetViewPanel.java
511	544	src/com/quollwriter/ui/panels/QuollEditorPanel.java
3	13	src/com/quollwriter/ui/panels/WarmupEditorPanel.java

commit 735f83ee988872717ca6b91dd85eca4802826dd6
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Oct 19 10:56:39 2017 +1000

    Bring version up to 2.6.5.  The 2.6.3 version was removed due to the creation of the bug fix 2.6.4 branch.  Unfortunately, the version checking code assumes a x.y.z format, not an unlimited x.y.z... format.  The 2.6.5 branch is a clone of 2.6.3 with the 2.6.4 changes merged in.

1	1	build.xml
7	0	data/whats-new.xml

commit ae455e7f7e7d684f69eaa32923af48752ffdc029
Merge: 7f30f77 fd23b0c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Oct 19 10:52:09 2017 +1000

    Merge changes from 2.6.4 branch.

commit fd23b0ccc10a27777caf9872a0c4ced3e9130081
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Oct 18 21:28:50 2017 +1000

    Only add the add section menu if there are children menu items.

8	2	src/com/quollwriter/ui/sidebars/ProjectSideBar.java

commit 0df7c0467d90d9fff853337ea623038c5696c2c3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Oct 18 16:10:15 2017 +1000

    Fix for handling legacy asset types that have been deleted by the user.

1	1	build.xml
8	1	data/whats-new.xml
33	26	src/com/quollwriter/Environment.java
67	67	src/com/quollwriter/db/ObjectManager.java
164	144	src/com/quollwriter/db/ProjectDataHandler.java
149	135	src/com/quollwriter/ui/ProjectViewer.java
741	697	src/com/quollwriter/ui/sidebars/ProjectSideBar.java

commit 7f30f77ddb917e1e7ff157b96a2619c438d7168d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Oct 18 11:37:13 2017 +1000

    More changes for the language strings.

78	1	data/default-ui-language-strings.json
8	0	src/com/quollwriter/LanguageStrings.java
138	51	src/com/quollwriter/ui/panels/WarmupEditorPanel.java

commit f0221196b07c6acaf745cca56cf9c11aad728c19
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Oct 4 09:25:03 2017 +1000

    More changes for the configurable language strings.  Also changed the %1s values to %1 to allow for repeated use within a string.

855	207	data/default-ui-language-strings.json
224	176	src/com/quollwriter/LanguageStrings.java
7	38	src/com/quollwriter/data/UserConfigurableObjectTypeField.java
5	1	src/com/quollwriter/ui/AbstractViewer.java
7	0	src/com/quollwriter/ui/AccordionItem.java
106	17	src/com/quollwriter/ui/FullScreenFrame.java
40	8	src/com/quollwriter/ui/LinkedToAccordionItem.java
410	0	src/com/quollwriter/ui/LinkedToEditPanel.java
133	36	src/com/quollwriter/ui/ObjectTypeNameChanger.java
455	455	src/com/quollwriter/ui/UIUtils.java
19	12	src/com/quollwriter/ui/forms/ComboBoxFormItem.java
8	331	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
41	11	src/com/quollwriter/ui/panels/AddAssetPanel.java
11	1	src/com/quollwriter/ui/userobjects/AbstractUserConfigurableObjectFieldViewEditHandler.java
225	138	src/com/quollwriter/ui/userobjects/BasicInfoAddEdit.java
5	1	src/com/quollwriter/ui/userobjects/DateUserConfigurableObjectFieldViewEditHandler.java
64	10	src/com/quollwriter/ui/userobjects/DateUserConfigurableObjectTypeFieldConfigHandler.java
404	288	src/com/quollwriter/ui/userobjects/FieldsAddEdit.java
15	3	src/com/quollwriter/ui/userobjects/ImageUserConfigurableObjectFieldViewEditHandler.java
75	46	src/com/quollwriter/ui/userobjects/LayoutAddEdit.java
12	2	src/com/quollwriter/ui/userobjects/MultiTextUserConfigurableObjectFieldViewEditHandler.java
42	10	src/com/quollwriter/ui/userobjects/MultiTextUserConfigurableObjectTypeFieldConfigHandler.java
22	4	src/com/quollwriter/ui/userobjects/NumberUserConfigurableObjectFieldViewEditHandler.java
54	8	src/com/quollwriter/ui/userobjects/NumberUserConfigurableObjectTypeFieldConfigHandler.java
29	7	src/com/quollwriter/ui/userobjects/ObjectDescriptionUserConfigurableObjectTypeFieldConfigHandler.java
15	3	src/com/quollwriter/ui/userobjects/ObjectImageUserConfigurableObjectFieldViewEditHandler.java
29	1	src/com/quollwriter/ui/userobjects/ObjectImageUserConfigurableObjectTypeFieldConfigHandler.java
16	4	src/com/quollwriter/ui/userobjects/ObjectNameUserConfigurableObjectFieldViewEditHandler.java
8	4	src/com/quollwriter/ui/userobjects/ObjectNameUserConfigurableObjectTypeFieldConfigHandler.java
13	3	src/com/quollwriter/ui/userobjects/SelectUserConfigurableObjectFieldViewEditHandler.java
63	20	src/com/quollwriter/ui/userobjects/SelectUserConfigurableObjectTypeFieldConfigHandler.java
16	2	src/com/quollwriter/ui/userobjects/TextUserConfigurableObjectFieldViewEditHandler.java
31	5	src/com/quollwriter/ui/userobjects/TextUserConfigurableObjectTypeFieldConfigHandler.java
109	76	src/com/quollwriter/ui/userobjects/UserConfigurableObjectTypeEdit.java
5	1	src/com/quollwriter/ui/userobjects/WebpageUserConfigurableObjectFieldViewEditHandler.java
6	1	src/com/quollwriter/ui/userobjects/WebpageUserConfigurableObjectTypeFieldConfigHandler.java

commit 7fa8248d265cb6843c8bab721c5e5e6dfa6a2c07
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Sep 21 13:09:53 2017 +1000

    More changes to the language strings.

229	65	data/default-ui-language-strings.json
3	1	src/com/quollwriter/Constants.java
151	99	src/com/quollwriter/Environment.java
14	3	src/com/quollwriter/LanguageStrings.java
93	40	src/com/quollwriter/ui/DictionaryManager.java
6	3	src/com/quollwriter/ui/ExportProject.java
28	9	src/com/quollwriter/ui/ImportProject.java
7	5	src/com/quollwriter/ui/Landing.java
3	2	src/com/quollwriter/ui/ProjectViewer.java
75	40	src/com/quollwriter/ui/WarmupsViewer.java
0	57	src/com/quollwriter/ui/forms/SelectFormItem.java
19	0	src/com/quollwriter/ui/panels/QuollEditorPanel.java

commit 96b3eeec20a95d44099bc6920622962943abcb12
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Sep 3 20:56:11 2017 +1000

    More implementation of the language strings.  Also a change to the way that prefixes are handled, instead of a Set a List is now used to allow for duplications, i.e. project.actions.project.new.  The whats new has been updated with placeholder text to prevent an error being thrown during startup.

608	35	data/default-ui-language-strings.json
7	0	data/whats-new.xml
14	14	src/com/quollwriter/Environment.java
106	16	src/com/quollwriter/LanguageStrings.java
3	3	src/com/quollwriter/Utils.java
23	4	src/com/quollwriter/text/IgnoreCheckbox.java
15	8	src/com/quollwriter/text/rules/AbstractRule.java
1	1	src/com/quollwriter/text/rules/AdverbRule.java
1	1	src/com/quollwriter/text/rules/DoubleWordRule.java
2	2	src/com/quollwriter/text/rules/ParagraphLengthRule.java
2	2	src/com/quollwriter/text/rules/ParagraphReadabilityRule.java
1	1	src/com/quollwriter/text/rules/PassiveSentenceRule.java
1	1	src/com/quollwriter/text/rules/SentenceComplexityRule.java
1	1	src/com/quollwriter/text/rules/SentenceLengthRule.java
1	1	src/com/quollwriter/text/rules/TooManyClausesRule.java
3	3	src/com/quollwriter/text/rules/WordFinder.java
1	1	src/com/quollwriter/ui/AbstractProjectViewer.java
6	6	src/com/quollwriter/ui/AbstractViewer.java
2	2	src/com/quollwriter/ui/AssetAccordionItem.java
1	1	src/com/quollwriter/ui/AssetDetailsEditPanel.java
3	3	src/com/quollwriter/ui/BackupsManager.java
4	1	src/com/quollwriter/ui/ChapterItemMoveHandler.java
6	1	src/com/quollwriter/ui/DataObjectTransferHandler.java
14	5	src/com/quollwriter/ui/ErrorWindow.java
16	4	src/com/quollwriter/ui/FileFinder.java
4	1	src/com/quollwriter/ui/FullScreenOverlay.java
24	6	src/com/quollwriter/ui/IconColumn.java
6	2	src/com/quollwriter/ui/MessageWindow.java
60	18	src/com/quollwriter/ui/NewProjectPanel.java
35	7	src/com/quollwriter/ui/NotesAccordionItem.java
4	1	src/com/quollwriter/ui/Notification.java
1	1	src/com/quollwriter/ui/Options.java
54	21	src/com/quollwriter/ui/PopupWizard.java
7	8	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
20	4	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
3	3	src/com/quollwriter/ui/ProjectViewer.java
39	9	src/com/quollwriter/ui/QColorChooser.java
60	15	src/com/quollwriter/ui/TaggedObjectAccordionItem.java
104	63	src/com/quollwriter/ui/TagsEditor.java
135	31	src/com/quollwriter/ui/TextArea.java
4	1	src/com/quollwriter/ui/TextInputWindow.java
9	3	src/com/quollwriter/ui/UIUtils.java
1	1	src/com/quollwriter/ui/WarmupPromptSelect.java
31	6	src/com/quollwriter/ui/WarmupsAccordionItem.java
10	2	src/com/quollwriter/ui/WarmupsViewer.java
37	7	src/com/quollwriter/ui/actionHandlers/AddNewTagActionHandler.java
10	2	src/com/quollwriter/ui/actionHandlers/DeleteIdeaTypeActionHandler.java
29	5	src/com/quollwriter/ui/actionHandlers/DeleteProjectActionHandler.java
10	2	src/com/quollwriter/ui/actionHandlers/DeleteWarmupActionHandler.java
27	5	src/com/quollwriter/ui/actionHandlers/EditIdeaTypeActionHandler.java
27	5	src/com/quollwriter/ui/actionHandlers/NewIdeaTypeActionHandler.java
0	174	src/com/quollwriter/ui/actionHandlers/RenameAssetActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/RenameChapterActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/RenameProjectActionHandler.java
32	6	src/com/quollwriter/ui/actionHandlers/RenameWarmupActionHandler.java
4	1	src/com/quollwriter/ui/forms/Form.java
120	27	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java
3	1	src/com/quollwriter/ui/panels/AchievementsPanel.java
3	21	src/com/quollwriter/ui/panels/AssetViewPanel.java
15	1	src/com/quollwriter/ui/panels/QuollEditorPanel.java
9	0	src/com/quollwriter/ui/panels/WarmupEditorPanel.java
5	1	src/com/quollwriter/ui/renderers/ProjectTreeCellRenderer.java
6	3	src/com/quollwriter/ui/sidebars/Finder.java
86	25	src/com/quollwriter/ui/sidebars/ProblemFinderSideBar.java
48	9	src/com/quollwriter/ui/sidebars/ProjectSideBar.java
5	1	src/com/quollwriter/ui/sidebars/TargetsSideBar.java
12	2	src/com/quollwriter/ui/sidebars/WarmupsSideBar.java

commit d1058af78a62fd9fcbb74d4ac5e78f5e29bf5275
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 27 14:25:55 2017 +1000

    A partial commit that starts off the work of allowing the text used in the UI to be customized, specifically for other languages.
    
    A new class "com.quollwriter.LanguageStrings" has been added that manages access to the relevant string with constant identifiers providing indexing into the text.
    
    The default strings themselves are held in "data/default-ui-language-strings.json".  This file will change heavily soon.  It is in a JSON format.
    
    The defacto structuring provides heirarchical access, this was deemed preferable to the simplistic and repetitive format suggested by Java itself (i.e. a preference file).  The JSON file can easily be flattened into a .csv for easy user modification/creation.
    
    Access to the relevant string in the Java code is provided through a number of new "getUIString" methods in "com.quollwriter.Environment".  The access is through a number of constants from LanguageStrings.
    
    Thus a structure in the JSON file such as:
    
    {
        "mytext" :
        {
            "buttons" :
            {
                "help" :
                {
                    "tooltip" : "Hello World!"
                }
            }
        }
    
    }
    
    Would be accessed with a call such as:
    
    Environment.getUIString (LanguageStrings.mytext, LanguageStrings.buttons, LanguageStrings.help, LanguageStrings.tooltip);
    
    This mechanism allows for heavy reuse of string constants.
    
    Values within the JSON file can reference other values through the use of a ${a.b.c...} notation, thus to reference the tooltip above in another structure the following would be used:
    
    {
        "myreference" : "${mytext.buttons.help.tooltip}"
    }
    
    Standard object name values are referenced using the usual notation "{a}", for example "{chapter}".
    
    Sometimes values within the text are replaced with dynamic values in the code.  These are referenced using the standard notation expected by java.lang.String.format, i.e. %1s, %2s, ...
    
    Putting all this together you might have a string:
    
    {
        "mytitle" : "${mytext.buttons.help.tooltip} %1s {chapter} %2s"
    }
    
    The following special values are used to comment the values and aid with validation of the text.
    
    * :comment[.name] - Used to provide a comment about a particular field or section.  These values will be displayed to the person providing the translation or other strings file.  If a string contains %xs values then the comment will describe what each replacement is for.  For example:
    
    {
        "mysection" :
        {
            ":comment" : "This is my section.  It does stuff.",
            "text" : "This is my %1s.",
            ":comment.text" : "%1s is the name of something here."
        }
    }
    
    * :scount.name - Used to indicate how many %xs values are expected in the string.

2	1	build.xml
10	5	data/achievements.xml
2089	0	data/default-ui-language-strings.json
25	0	data/properties.xml
36	36	data/tips.xml
14	1	src/com/quollwriter/Constants.java
269	54	src/com/quollwriter/Environment.java
751	0	src/com/quollwriter/LanguageStrings.java
14	4	src/com/quollwriter/Startup.java
4	1	src/com/quollwriter/Utils.java
29	8	src/com/quollwriter/achievements/rules/AbstractAchievementRule.java
38	8	src/com/quollwriter/achievements/ui/Achievements.java
0	3	src/com/quollwriter/data/LegacyAsset.java
0	2	src/com/quollwriter/data/LegacyUserConfigurableObject.java
44	11	src/com/quollwriter/db/ProjectInfoObjectManager.java
131	27	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
4	2	src/com/quollwriter/synonyms/providers/BuiltInSynonymProvider.java
8	1	src/com/quollwriter/text/rules/AbstractParagraphRule.java
16	3	src/com/quollwriter/text/rules/AbstractRule.java
6	1	src/com/quollwriter/text/rules/AbstractSentenceRule.java
33	10	src/com/quollwriter/text/rules/AdverbRule.java
12	2	src/com/quollwriter/text/rules/DoubleWordRule.java
28	4	src/com/quollwriter/text/rules/ParagraphLengthRule.java
36	6	src/com/quollwriter/text/rules/ParagraphReadabilityRule.java
16	2	src/com/quollwriter/text/rules/PassiveSentenceRule.java
17	3	src/com/quollwriter/text/rules/SentenceComplexityRule.java
18	2	src/com/quollwriter/text/rules/SentenceLengthRule.java
18	2	src/com/quollwriter/text/rules/TooManyClausesRule.java
97	25	src/com/quollwriter/text/rules/WordFinder.java
176	82	src/com/quollwriter/ui/AbstractProjectViewer.java
296	82	src/com/quollwriter/ui/AbstractViewer.java
6	1	src/com/quollwriter/ui/AccordionItem.java
11	3	src/com/quollwriter/ui/AppearsInChaptersEditPanel.java
28	6	src/com/quollwriter/ui/AssetAccordionItem.java
149	13	src/com/quollwriter/ui/AssetDetailsEditPanel.java
92	24	src/com/quollwriter/ui/BackupsManager.java
15	408	src/com/quollwriter/ui/EditPanel.java
67	18	src/com/quollwriter/ui/ExportProject.java
0	1296	src/com/quollwriter/ui/FindOrOpen.java
159	34	src/com/quollwriter/ui/ImportProject.java
70	70	src/com/quollwriter/ui/Notification.java
32	6	src/com/quollwriter/ui/Options.java
113	22	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
212	66	src/com/quollwriter/ui/ProjectViewer.java
3	2	src/com/quollwriter/ui/QuestionWindow.java
21	1	src/com/quollwriter/ui/TextPropertiesEditPanel.java
35	4	src/com/quollwriter/ui/Tips.java
114	9	src/com/quollwriter/ui/UIUtils.java
215	103	src/com/quollwriter/ui/WarmupPromptSelect.java
3	1	src/com/quollwriter/ui/WhatsNew.java
23	6	src/com/quollwriter/ui/Wizard.java
27	26	src/com/quollwriter/ui/actionHandlers/AddChapterActionHandler.java
13	2	src/com/quollwriter/ui/actionHandlers/DeleteChapterActionHandler.java
32	6	src/com/quollwriter/ui/actionHandlers/RenameChapterActionHandler.java
38	7	src/com/quollwriter/ui/actionHandlers/RenameProjectActionHandler.java
43	9	src/com/quollwriter/ui/actionHandlers/SplitChapterActionHandler.java
20	27	src/com/quollwriter/ui/actionHandlers/YesDeleteConfirmTextInputActionHandler.java
4	365	src/com/quollwriter/ui/components/TabHeader.java
117	24	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
68	19	src/com/quollwriter/ui/panels/AssetViewPanel.java
8	2	src/com/quollwriter/ui/sidebars/AbstractSideBar.java
15	3	src/com/quollwriter/ui/sidebars/AppearsInChaptersSideBar.java
10	64	src/com/quollwriter/ui/sidebars/ProjectSideBar.java
3	3	src/com/quollwriter/ui/userobjects/UserConfigurableObjectTypeEdit.java

commit 2cb5feca8c5d380968005677d2d84be502447710
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 27 23:09:16 2017 +1000

    Update the buld number and add the what's new.

1	1	build.xml
1	1	data/version.txt
7	0	data/whats-new.xml

commit 6324eb6564d937c5ac12cf343b5f4d6f5e45bd1e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 27 23:04:10 2017 +1000

    If a tag has been removed elsewhere ensure that the section is not shown.

7	0	src/com/quollwriter/ui/sidebars/ProjectSideBar.java

commit 2f7d0dae885f28c1ba3a0dbab295f50e9814eaf9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 27 23:03:41 2017 +1000

    Allow the Asset section of Options to be displayed in an AbstractViewer rather than just ProjectViewer, also add the Asset section for Landing.  Url encode values that are used in the objectname protocol.  Ensure that Windows doesn't try to handle the link by returning from the method when a popup for the matching objects is shown.

1	0	src/com/quollwriter/ui/Landing.java
3	3	src/com/quollwriter/ui/Options.java
58	5	src/com/quollwriter/ui/UIUtils.java
2	2	src/com/quollwriter/ui/userobjects/BasicInfoAddEdit.java
2	2	src/com/quollwriter/ui/userobjects/FieldsAddEdit.java
2	2	src/com/quollwriter/ui/userobjects/LayoutAddEdit.java
1	11	src/com/quollwriter/ui/userobjects/UserConfigurableObjectTypeEdit.java

commit 8b64508fa07f318e65fe448b5c51e59ab9dfad84
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 27 23:00:15 2017 +1000

    Ensure that removing legacy fields won't cause an NPE.

3	1	src/com/quollwriter/data/LegacyAsset.java
8	0	src/com/quollwriter/data/QObject.java
7	0	src/com/quollwriter/data/ResearchItem.java

commit 8b10396e46b8741f5bacd1ba88b88a1ac478d5df
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 25 23:25:59 2017 +1000

    Version updated.

1	1	data/version.txt

commit b30ca7b966131ef09a0be7ab0a445901ab4d6e02
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 25 23:22:30 2017 +1000

    Update the about icon to remove the white background.

-	-	imgs/about16.png

commit 81a3469500a96d924b38021f3def555fe65842e8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 25 21:31:38 2017 +1000

    Add the new build number and whats new.

1	1	build.xml
7	0	data/whats-new.xml

commit 5809643adc614e7f765f2d031f001081eaa3cb1f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 25 21:23:00 2017 +1000

    A bit of rebranding (change of logo) and some changes to the way that the splash screen displays.

-	-	imgs/about16.png
-	-	imgs/q-app-logo.png
-	-	imgs/window-icon-v3.png
2	2	src/com/quollwriter/Constants.java
14	21	src/com/quollwriter/ui/SplashScreen.java

commit d7bc989fb93438844715514ecf1fe7081877a522
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed May 17 10:46:13 2017 +1000

    Prevent NPE issues when items don't exist.

14	0	src/com/quollwriter/ui/forms/SelectFormItem.java

commit 369aaf6b9955471f751b0159e7f51e466c59223b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed May 17 10:45:45 2017 +1000

    Add the files dir to the fill to string properties.

4	0	src/com/quollwriter/data/Project.java

commit 19acf551a4fa3dfff58be1dcb59cd8d41d731f7d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed May 17 10:45:03 2017 +1000

    Prevent an NPE when the file doesn't exist.

7	0	src/com/quollwriter/Utils.java

commit cd1274b01c17da252300f0f62e90453a2ef1fb01
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 12 08:44:03 2017 +1000

    Add in missing layout image.

-	-	data/asset-layout-0.png

commit 77e8e0d48d1f02851e29b92139ddbc77f84e2d8e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 11 12:18:06 2017 +1000

    A few tweaks and minor fixes getting things ready for the 2.6 release.

2	2	build.xml
1	1	data/version.txt
23	0	data/whats-new.xml
2	110	src/com/quollwriter/data/Project.java
2	0	src/com/quollwriter/ui/AssetViewAddEditLayout.java
4	2	src/com/quollwriter/ui/ProjectViewer.java
5	2	src/com/quollwriter/ui/panels/AddAssetPanel.java
1	1	src/com/quollwriter/ui/sidebars/ProjectSideBar.java
1	1	src/com/quollwriter/ui/userobjects/UserConfigurableObjectTypeEdit.java

commit dab77748fed17e2b9aeedd60876241e0fde31aef
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 7 22:25:03 2017 +1000

    Ensure that the delete project handler will correctly deal with editor projects.

46	3	src/com/quollwriter/ui/actionHandlers/DeleteProjectActionHandler.java

commit f7c42036020d9f7ada300c29114c34872e889623
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 7 22:24:13 2017 +1000

    Add a new method for sending the project edit stop message.

10	1	src/com/quollwriter/editors/EditorsEnvironment.java

commit 9e2ccc7d500aa04dcac04025f06a152fd78486ed
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 7 22:22:58 2017 +1000

    Add the editor removed message to the list of messages that can be deleted.

1	0	src/com/quollwriter/editors/ui/EditorInfoBox.java

commit 411c04d19a4d6827496d6e06402f293bb8608bf9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 7 22:22:12 2017 +1000

    Allow a ProjectInfo to be used to construct the message.

12	0	src/com/quollwriter/editors/messages/ProjectEditStopMessage.java

commit 91223fe684ef600eab72a496143a1145f59c1c72
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 7 10:18:44 2017 +1000

    Tweak to the padding.

1	1	src/com/quollwriter/ui/ChapterFieldAccordionItem.java

commit b27e542410288e89a2047293715037a2de5a4bc2
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 7 10:18:22 2017 +1000

    Changed so that a ProjectInfo object is looked up first, this prevents problems when the Project object changes, say if the project is renamed and thus reopened.  As an aside, Java generics can go suck it since it has no problem with accessing the map with the wrong object type, even when the Map and HashMap both have type information associated with them.  I fully understand that the Map allows for any object access for the key but the point of peppering type information everywhere is to eradicate this type of problem, worse still the compiler doesn't even give you a warning.

1	1	src/com/quollwriter/Environment.java

commit 989e23088a9948e00dfe4bfdde22ea9b12e811d3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 7 10:07:29 2017 +1000

    Prevent an NPE when trying to add a notification about logging into the editors service.  This can happen if the user is opening an encrypted project and there is no viewer.

31	6	src/com/quollwriter/editors/EditorsEnvironment.java

commit 2ca2d8d0ae4cca15df3294bc4d4dbf2a7dacf0a4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 6 22:34:37 2017 +1000

    Added a handler for adding new tags that are applied to the object the handler was called from.  The tags add/editor has been removed from the tags menu since its addition there implied that tags would be applied to the object however that isn't always the case.  A separate quick add removes that potential confusion.

3	3	src/com/quollwriter/ui/ChaptersAccordionItem.java
8	7	src/com/quollwriter/ui/TagsEditor.java
8	6	src/com/quollwriter/ui/UIUtils.java
212	0	src/com/quollwriter/ui/actionHandlers/AddNewTagActionHandler.java

commit 9b89146ddfd087bbf2e757ab8bb23697eb1f8183
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 6 21:26:08 2017 +1000

    A few tweaks to the rename tag handler and ensure that the tags editor respond to changes to the tags.

1	1	src/com/quollwriter/ui/TaggedObjectAccordionItem.java
16	5	src/com/quollwriter/ui/TagsEditor.java
4	1	src/com/quollwriter/ui/actionHandlers/RenameTagActionHandler.java

commit b57bbc1d1cbfbc61f30b4bb33479d63ade438536
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 6 21:18:19 2017 +1000

    Adding a new handler for renaming a tag.

151	0	src/com/quollwriter/ui/actionHandlers/RenameTagActionHandler.java

commit e54e0bc9fbac3fd6799130f79b3d630d8aba71df
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 6 21:16:00 2017 +1000

    Tweak to the padding for the name field.

1	0	src/com/quollwriter/ui/AssetViewAddEditLayout.java

commit 8f0cf22fa639df4bbd74487043f26f3d9f34c89d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 6 21:15:29 2017 +1000

    Fix a number of issues related to how the tags editor was behaving.

159	17	src/com/quollwriter/ui/TagsEditor.java

commit e1655c8e9412563e990e896232b3f0b3386df83e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 6 21:14:54 2017 +1000

    Update the title when the associated tag is modified.

39	1	src/com/quollwriter/ui/TaggedObjectAccordionItem.java

commit c2cb13fcc03a9d70ff704b25c536d8917f074753
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 6 21:14:24 2017 +1000

    Add a new method to allow updating of the title when needed.

18	0	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java

commit 0619d2746b02d742db515aca6d8c38566efe9cd0
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 6 21:13:43 2017 +1000

    Store the tags rather than going back to the db to get new copies.

268	212	src/com/quollwriter/Environment.java

commit e5a5a7ca00edd0a424f1d85ef2cd8ec10671c5b2
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 5 12:30:05 2017 +1000

    Get the correct file.

9	2	src/com/quollwriter/ui/userobjects/FileUserConfigurableObjectFieldViewEditHandler.java

commit 80e2a36e41a5f7a84fe8c4617de02ab55da25e0f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 5 12:28:43 2017 +1000

    Prevent an NPE.

9	3	src/com/quollwriter/db/UserConfigurableObjectFieldDataHandler.java

commit d56a6f8050b6e40f29d3b443504191986549bb7c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 5 12:27:05 2017 +1000

    Mask out the file object type field since it needs more work.

8	0	src/com/quollwriter/ui/userobjects/FieldsAddEdit.java

commit adde5b123cc11788b46bb1aa0a1d2fcc2cdf89ad
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 5 12:24:56 2017 +1000

    Ensure that the file is set for the finder.

7	0	src/com/quollwriter/ui/forms/FileSelectorFormItem.java

commit 92167811c536d257b14b95c6a1067c10afe96166
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 5 12:22:32 2017 +1000

    Ensure that an update project message is sent rather than a new project message.

3	3	src/com/quollwriter/editors/ui/EditorsUIUtils.java

commit f0381a945a939460a34f1037f96fbf8689a6e15a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 5 12:20:58 2017 +1000

    Handle the situation where the value of a StringWithMarkup is a 'null' string value.

7	0	src/com/quollwriter/JSONDecoder.java

commit 9b22ca095264af05f55f548a70ba53a4fd6986fd
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 5 12:19:06 2017 +1000

    Added a couple of debug functions to help with testing and message management.

215	70	src/com/quollwriter/editors/ui/EditorInfoBox.java

commit 5ef0b78d3bbd876248a513273ef23dd07584a717
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 5 12:15:04 2017 +1000

    Ensure that the item isn't inited twice.

11	1	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java

commit 54c681816a6d90a0db1b564b5d4246b319c2c1f1
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 5 12:13:49 2017 +1000

    Change to use a LinkedHashSet for the project editors rather than a TreeSet.

2	2	src/com/quollwriter/data/Project.java

commit 93051c6b7df673937aa17d5547ffccc301419d6f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 5 12:12:02 2017 +1000

    Allow individual messages to be removed from an editor.

14	0	src/com/quollwriter/data/editors/EditorEditor.java

commit c844cc41942e8459c065ab330b97ed7634f66cfe
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 5 12:11:31 2017 +1000

    Stop counting editor projects towards user session statistics.

8	0	src/com/quollwriter/data/UserSession.java

commit a891729529027eb0edbad302c694b7ba684580f6
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon May 1 09:23:47 2017 +1000

    Allow no buttons to be passed to the form and remove scroll panes from having the size wrapping.

319	302	src/com/quollwriter/ui/forms/Form.java

commit 2a49abce68e85dd0ade646b61de129d5ca5c6f35
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon May 1 09:22:37 2017 +1000

    Add new createForm variants.  Also ensure that the file for the file finder is setup after the init so that the file is used.

26	7	src/com/quollwriter/ui/UIUtils.java

commit d7ac609e05c59b02ee5e0d2d28c60a10d5abefc2
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon May 1 09:21:33 2017 +1000

    Ensure that the relevant editor sections are inited and thus display.  Also prevent an NPE when the user has deleted their account.

13	3	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java

commit c906204f1dcec4b980bba450415a05ed3aa70af4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon May 1 09:20:11 2017 +1000

    Removed the use of the chapter variable that will sometimes not be setup correctly.  Instead sub-class panels will use the base obj variable instead.

16	16	src/com/quollwriter/editors/ui/panels/EditorChapterPanel.java
6	8	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java
0	1	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
19	19	src/com/quollwriter/ui/panels/QuollEditorPanel.java

commit b3c9d12b0edee927cc36d63156fcb93ee6ff0317
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon May 1 09:16:31 2017 +1000

    Update the various viewers and forms to use the new forms implementation.

114	304	src/com/quollwriter/editors/ui/EditorsUIUtils.java

commit 6ff9b8e4b9b26e17dd8953ff5e2b635d0685f075
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon May 1 09:15:38 2017 +1000

    Update the registration form to use the new forms.

29	74	src/com/quollwriter/editors/ui/EditorRegister.java

commit 908bf81e87bfc714d71a92552f728f351ecd02da
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon May 1 09:11:12 2017 +1000

    Ensure that the relevant icon is displayed when a comment is added.

49	3	src/com/quollwriter/editors/ui/CommentActionHandler.java

commit 08d1b9dab11b95bf8a1ecbefecdfb3c507204acf
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 28 10:49:58 2017 +1000

    Make sure that the session word count is returned when getWordCount is called from a UserSession.

105	97	src/com/quollwriter/data/UserSession.java

commit 593d0d0dd71f3785f78ecee5680ccdd31f8f492a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 28 10:05:55 2017 +1000

    Ensure that the text for the labels is setup before adding the notification.

106	106	src/com/quollwriter/ui/AbstractProjectViewer.java

commit cacef4a4df11da95adf8d700cf81a58348c8b86e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 28 10:02:45 2017 +1000

    Ensure that the first sentence of the first paragraph of the item is being used for the summary/name.

6	7	src/com/quollwriter/data/OutlineItem.java

commit e153ac7cf9110093fc3a9fa421e749c9a0de71d7
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 28 10:01:12 2017 +1000

    Adding duplicate (same key) ideas to a type won't throw an exception.

7	8	src/com/quollwriter/data/IdeaType.java

commit 12c2906c0183dbc104486fd5abe430e5b3ea2250
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 28 10:00:23 2017 +1000

    Added a check to see whether an item in the tree can be moved.  The chapter tree now only allows chapters to be moved.

8	0	src/com/quollwriter/ui/ChaptersAccordionItem.java
19	1	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java

commit e45cf3aed890dc0bf0c87981e0d8a3c31d6bc08a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 28 09:59:15 2017 +1000

    Prevent the form popups from being removed by using the escape key.

5	0	src/com/quollwriter/ui/actionHandlers/AbstractFormPopup.java

commit 55a295213789dae8a47e85ea17bc86fc23acc255
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 28 09:56:56 2017 +1000

    Ensure that the item has a key before adding to a parent.

5	2	src/com/quollwriter/ui/actionHandlers/ChapterItemActionHandler.java

commit b375f33fdf206be63a6002936c64e5dd30524c3f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 28 09:55:57 2017 +1000

    Show the add/manage tags menu item in the right click menu of the project sidebar.

15	0	src/com/quollwriter/ui/sidebars/ProjectSideBar.java

commit 572a7c460e0338cf03fd763e0d9961e60928e5b6
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Apr 24 09:35:22 2017 +1000

    Few tweaks to sizes and settings.

1	1	src/com/quollwriter/Environment.java
20	33	src/com/quollwriter/text/ProblemFinder.java
1	1	src/com/quollwriter/text/rules/AbstractDialogueRule.java
9	1	src/com/quollwriter/text/rules/SentenceComplexityRule.java
1	1	src/com/quollwriter/ui/Landing.java
76	55	src/com/quollwriter/ui/ProblemFinderRuleConfig.java

commit 623ada6e2741b4ca540dc028425f4ea70de4fa54
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 21 09:41:03 2017 +1000

    Couple of tweaks to borders and titles

8	0	src/com/quollwriter/text/rules/WordFinder.java
3	31	src/com/quollwriter/ui/panels/QuollEditorPanel.java

commit ee31204fde6c1ec27213bc67c9ef2f16b08ab8e4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Apr 17 17:34:25 2017 +1000

    Prevent merging of assets, it's not a little too difficult to do well.  Also update the epub exporter to export assets properly.

8	0	src/com/quollwriter/data/Asset.java
246	24	src/com/quollwriter/exporter/EPUBDocumentExporter.java
4	1	src/com/quollwriter/ui/ImportProject.java

commit e8f6128b353ef4bf5c2fed1fc58135fa45dd60f3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 16 23:40:31 2017 +1000

    Updates to the exporter to support the user configurable types.  Also some incidental fixes and changes to how objects are stored in other objects.

6	3	src/com/quollwriter/Environment.java
56	0	src/com/quollwriter/Utils.java
7	0	src/com/quollwriter/achievements/rules/SentenceAchievementRule.java
39	0	src/com/quollwriter/data/Project.java
19	0	src/com/quollwriter/data/ProjectInfo.java
29	2	src/com/quollwriter/data/UserConfigurableObjectField.java
0	14	src/com/quollwriter/data/comparators/NamedObjectSorter.java
2	2	src/com/quollwriter/db/ObjectManager.java
23	0	src/com/quollwriter/db/UserConfigurableObjectFieldDataHandler.java
7	0	src/com/quollwriter/exporter/AbstractDocumentExporter.java
312	108	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
2	2	src/com/quollwriter/text/Sentence.java
12	2	src/com/quollwriter/text/TextUtilities.java
4	30	src/com/quollwriter/ui/AbstractProjectViewer.java
6	2	src/com/quollwriter/ui/AssetViewAddEditLayout.java
134	10	src/com/quollwriter/ui/ImportProject.java
83	23	src/com/quollwriter/ui/userobjects/FileUserConfigurableObjectFieldViewEditHandler.java
12	0	src/com/quollwriter/ui/userobjects/ImageUserConfigurableObjectFieldViewEditHandler.java
7	0	src/com/quollwriter/ui/userobjects/UserConfigurableObjectFieldViewEditHandler.java

commit 8b48177d3d85f867a5a5e1391c10917caab17d37
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 22:42:27 2017 +1000

    Change of name of cancel button to be finish, clicking finish will also save the format (as well as closing the popup).

10	8	src/com/quollwriter/ui/Options.java

commit e5860d2b05cc8bc68c1fa823030626b2baae605f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 20:58:26 2017 +1000

    Tweak to wording when warmups project is first created.

1	1	src/com/quollwriter/ui/WarmupPromptSelect.java

commit 4ff8c2648c06633b567d7e27b34908c54a43fc14
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 20:31:46 2017 +1000

    Some tweaks to the way achievements are displayed.

25	19	src/com/quollwriter/achievements/ui/Achievements.java
48	3	src/com/quollwriter/ui/UIUtils.java

commit d609377493139f52b0c3a05db37a38288381ad6d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 19:53:06 2017 +1000

    Updated the backup/restore mechanism to support the new files directory in the project.

71	0	src/com/quollwriter/Utils.java
16	0	src/com/quollwriter/data/Project.java
10	0	src/com/quollwriter/db/ObjectManager.java
7	5	src/com/quollwriter/ui/AbstractProjectViewer.java

commit d95943fedd1599840929d354d145aa3cf359c525
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 15:15:24 2017 +1000

    Set the edit button visible/hidden as when the edit is shown/hidden.

5	1	src/com/quollwriter/ui/LinkedToAccordionItem.java

commit e011fb16c9ae793b9ee6725af2113ec1cbc4c234
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 14:26:08 2017 +1000

    Couple of tweaks to borders/spacing.

1	1	src/com/quollwriter/ui/AbstractProjectViewer.java
0	15	src/com/quollwriter/ui/FullScreenFrame.java
1	1	src/com/quollwriter/ui/FullScreenPropertiesEditPanel.java
1	1	src/com/quollwriter/ui/panels/BlankQuollPanel.java

commit e299039b04da70698854437e224e104a18a07c91
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 13:31:17 2017 +1000

    Change the values for where the toolbar should be displayed since there is no guarantee now that chapters will be at the top and notes at the bottom (or even displayed at all).

2	2	src/com/quollwriter/ui/Options.java

commit 32b32abdff38895a8616bb8eaa782da6583b2648
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 12:08:20 2017 +1000

    Add a donation link to the About popup.

9	1	src/com/quollwriter/ui/AbstractViewer.java

commit eda73d529d3093d76b6a189fbe4929103f9d06b3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 11:48:28 2017 +1000

    The link to the backups directory is now dynamic rather than hard coded.

25	2	src/com/quollwriter/ui/BackupsManager.java

commit 1d038491a4274e90392cb1c73f0e0a089ada50d1
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 11:22:22 2017 +1000

    Some improvements to how unsaved changes are handled when the user exits.

3	3	src/com/quollwriter/ui/AbstractProjectViewer.java
6	7	src/com/quollwriter/ui/ProjectViewer.java
0	7	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java

commit c84d2b9b6057149944a8799134af8db61fac56c4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 11:01:39 2017 +1000

    Empty chapters will display some information.

12	11	src/com/quollwriter/ui/UIUtils.java

commit ed6bade8891d8d97e33179618e19ae5cf8014704
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 11:00:52 2017 +1000

    Ensure that the settings are changed when in full screen mode.

135	57	src/com/quollwriter/ui/TextPropertiesEditPanel.java

commit b4774a3c793aa245fc4308d81b92bcbd500feca1
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 11:00:06 2017 +1000

    When removing a custom keyboard sound set the sound back to the default.

3	0	src/com/quollwriter/ui/Options.java

commit e8c223325ba05ef9ad1ec6177325f26289103800
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 10:58:57 2017 +1000

    Ensure that links will be saved when adding a new chapter.

1	330	src/com/quollwriter/ui/actionHandlers/AbstractFormPopup.java
2	0	src/com/quollwriter/ui/actionHandlers/AddChapterActionHandler.java

commit 7b656b2c076a08c750b60d6950c8a7e7b88e11d4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 9 10:57:59 2017 +1000

    Don't remove the chapter if there is a scene for the item, stops issues with splitting chapters and there are chapter items to be moved.

6	1	src/com/quollwriter/data/ChapterItem.java

commit 2f3260ee01bb04df1d859b579ee0fe91497583cf
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Apr 8 09:23:31 2017 +1000

    Fixed some issues with drag-n-drop of outline items and scenes.  Outline items and scenes are now stored in a HashSet in the containing object and then returned as a TreeSet (as opposed to being stored as a TreeSet which was causing issues).  Also, the function to completely remove a tag from the tagged object accordion item has been added.

14	13	src/com/quollwriter/data/Chapter.java
17	23	src/com/quollwriter/data/Scene.java
11	2	src/com/quollwriter/data/comparators/ChapterItemSorter.java
16	1	src/com/quollwriter/data/comparators/NamedObjectSorter.java
31	11	src/com/quollwriter/db/OutlineItemDataHandler.java
2	6	src/com/quollwriter/ui/ChapterItemMoveHandler.java
4	3	src/com/quollwriter/ui/TaggedObjectAccordionItem.java

commit b739c3389fe0184fd4b166a7ea1e8659d6db8539
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Apr 6 21:28:12 2017 +1000

    Removal of com.quollwriter.ui.components.Form* classes which are now replaced by com.quollwriter.ui.forms.*

0	1	src/com/quollwriter/data/SelectUserConfigurableObjectTypeField.java
0	1	src/com/quollwriter/data/UserConfigurableObjectTypeField.java
7	7	src/com/quollwriter/editors/ui/CommentActionHandler.java
6	5	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
8	4	src/com/quollwriter/text/Rule.java
109	108	src/com/quollwriter/text/rules/AbstractRule.java
44	10	src/com/quollwriter/text/rules/AdverbRule.java
4	3	src/com/quollwriter/text/rules/DoubleWordRule.java
8	7	src/com/quollwriter/text/rules/ParagraphLengthRule.java
10	9	src/com/quollwriter/text/rules/ParagraphReadabilityRule.java
7	7	src/com/quollwriter/text/rules/PassiveSentenceRule.java
11	7	src/com/quollwriter/text/rules/SentenceComplexityRule.java
8	5	src/com/quollwriter/text/rules/SentenceLengthRule.java
5	6	src/com/quollwriter/text/rules/TooManyClausesRule.java
37	34	src/com/quollwriter/text/rules/WordFinder.java
99	93	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
4	4	src/com/quollwriter/ui/ProjectViewer.java
2	1	src/com/quollwriter/ui/UIUtils.java
0	1072	src/com/quollwriter/ui/actionHandlers/AbstractActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/AddChapterActionHandler.java
0	5	src/com/quollwriter/ui/actionHandlers/AddNewItemTypeActionHandler.java
3	3	src/com/quollwriter/ui/actionHandlers/AssetActionHandler.java
5	5	src/com/quollwriter/ui/actionHandlers/ChapterItemActionHandler.java
0	5	src/com/quollwriter/ui/actionHandlers/EditIdeaTypeActionHandler.java
0	4	src/com/quollwriter/ui/actionHandlers/NewIdeaTypeActionHandler.java
7	7	src/com/quollwriter/ui/actionHandlers/NoteActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/OutlineItemFormatDetails.java
0	93	src/com/quollwriter/ui/actionHandlers/ProjectViewerActionHandler.java
0	5	src/com/quollwriter/ui/actionHandlers/RenameAssetActionHandler.java
0	5	src/com/quollwriter/ui/actionHandlers/RenameChapterActionHandler.java
0	5	src/com/quollwriter/ui/actionHandlers/RenameNoteTypeActionHandler.java
0	4	src/com/quollwriter/ui/actionHandlers/RenameWarmupActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/SceneFormatDetails.java
1	1	src/com/quollwriter/ui/actionHandlers/SplitChapterActionHandler.java
2	3	src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java
4	6	src/com/quollwriter/ui/charts/QuollChartUtils.java
0	2	src/com/quollwriter/ui/charts/ReadabilityIndicesChart.java
2	3	src/com/quollwriter/ui/charts/SessionTimeChart.java
2	3	src/com/quollwriter/ui/charts/SessionWordCountChart.java
0	859	src/com/quollwriter/ui/components/Form.java
0	21	src/com/quollwriter/ui/components/FormAdapter.java
0	37	src/com/quollwriter/ui/components/FormEvent.java
0	34	src/com/quollwriter/ui/components/FormItem.java
0	11	src/com/quollwriter/ui/components/FormListener.java
7	0	src/com/quollwriter/ui/forms/ComboBoxFormItem.java
0	65	src/com/quollwriter/ui/forms/FormItem.java
4	4	src/com/quollwriter/ui/panels/QuollEditorPanel.java
6	6	src/com/quollwriter/ui/panels/WordCloudPanel.java
4	4	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit 6e4a46b6245807bb4b67fe43a164b87f158c330e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Apr 6 14:09:46 2017 +1000

    A few fixes, also, the abstract editor panel now reacts to user property events and updates itself when it sees changes to the font, font size etc.  The text properties edit panel has been modified to prevent a flurry of spurious events occurring.  The color chooser buttons have been changed to better reflect what is actually happening when you use it.

1	0	build.xml
6	1	data/achievements.xml
1	1	data/properties.xml
7	0	src/com/quollwriter/Constants.java
88	75	src/com/quollwriter/Environment.java
10	8	src/com/quollwriter/achievements/AchievementsManager.java
1	26	src/com/quollwriter/data/UserConfigurableObject.java
33	1	src/com/quollwriter/data/UserConfigurableObjectField.java
17	21	src/com/quollwriter/ui/AbstractProjectViewer.java
60	71	src/com/quollwriter/ui/AbstractViewer.java
4	49	src/com/quollwriter/ui/AssetAccordionItem.java
0	1661	src/com/quollwriter/ui/AssetDetailsEditPanel.java
368	299	src/com/quollwriter/ui/AssetViewAddEditLayout.java
4	11	src/com/quollwriter/ui/EditPanel.java
1	1	src/com/quollwriter/ui/Landing.java
37	23	src/com/quollwriter/ui/ObjectTypeNameChanger.java
1	0	src/com/quollwriter/ui/Options.java
0	23	src/com/quollwriter/ui/ProjectTextProperties.java
23	5	src/com/quollwriter/ui/ProjectViewer.java
136	154	src/com/quollwriter/ui/QColorChooser.java
8	0	src/com/quollwriter/ui/TextArea.java
166	84	src/com/quollwriter/ui/TextPropertiesEditPanel.java
139	1	src/com/quollwriter/ui/UIUtils.java
7	0	src/com/quollwriter/ui/forms/MultiLineTextFormItem.java
88	58	src/com/quollwriter/ui/forms/SelectFormItem.java
85	20	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
2	2	src/com/quollwriter/ui/panels/AddAssetPanel.java
8	0	src/com/quollwriter/ui/userobjects/AbstractUserConfigurableObjectFieldViewEditHandler.java
13	1	src/com/quollwriter/ui/userobjects/DateUserConfigurableObjectFieldViewEditHandler.java
20	9	src/com/quollwriter/ui/userobjects/ImageUserConfigurableObjectFieldViewEditHandler.java
16	2	src/com/quollwriter/ui/userobjects/LayoutAddEdit.java
45	4	src/com/quollwriter/ui/userobjects/MultiTextUserConfigurableObjectFieldViewEditHandler.java
10	1	src/com/quollwriter/ui/userobjects/ObjectDescriptionUserConfigurableObjectFieldViewEditHandler.java
11	7	src/com/quollwriter/ui/userobjects/ObjectImageUserConfigurableObjectFieldViewEditHandler.java
46	1	src/com/quollwriter/ui/userobjects/TextUserConfigurableObjectFieldViewEditHandler.java
21	2	src/com/quollwriter/ui/userobjects/TextUserConfigurableObjectTypeFieldConfigHandler.java
2	0	src/com/quollwriter/ui/userobjects/UserConfigurableObjectFieldViewEditHandler.java
2	0	src/com/quollwriter/ui/userobjects/UserConfigurableObjectTypeEdit.java

commit 17c24b6ce5769e09769427ba087184a94dc4d47b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Mar 22 13:10:33 2017 +1000

    More fixes and tweaks to layouts and the addition of a new property that governs where split pane dividers are visible when moused over or being dragged.

5	0	data/properties.xml
2	0	src/com/quollwriter/Constants.java
35	10	src/com/quollwriter/data/UserConfigurableObjectType.java
8	2	src/com/quollwriter/ui/AbstractProjectViewer.java
303	74	src/com/quollwriter/ui/AssetViewAddEditLayout.java
4	3	src/com/quollwriter/ui/EditPanel.java
12	54	src/com/quollwriter/ui/Options.java
116	0	src/com/quollwriter/ui/UIUtils.java
31	9	src/com/quollwriter/ui/forms/SelectFormItem.java
7	19	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
4	1	src/com/quollwriter/ui/panels/AddAssetPanel.java
4	5	src/com/quollwriter/ui/panels/StatisticsPanel.java
5	6	src/com/quollwriter/ui/userobjects/FieldsAddEdit.java
38	5	src/com/quollwriter/ui/userobjects/MultiTextUserConfigurableObjectFieldViewEditHandler.java
45	4	src/com/quollwriter/ui/userobjects/ObjectDescriptionUserConfigurableObjectFieldViewEditHandler.java

commit 7de74c8f034fa162bf5ba3f85035797082f203b8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Mar 19 08:49:01 2017 +1000

    A number of incidental fixes and changed the layouts to use a GridBagLayout instead of Box due to issues with sizing and scrolling.

1	1	data/prompts/66552758b8cc.txt
1	1	data/prompts/7aa60f318704.txt
-	-	imgs/tag20.png
5	5	src/com/quollwriter/Environment.java
4	1	src/com/quollwriter/data/LegacyAsset.java
4	4	src/com/quollwriter/data/UserConfigurableObjectType.java
6	10	src/com/quollwriter/data/comparators/ProjectInfoSorter.java
443	44	src/com/quollwriter/ui/AssetViewAddEditLayout.java
2	2	src/com/quollwriter/ui/ChapterFieldAccordionItem.java
1	1	src/com/quollwriter/ui/DefaultChapterItemViewPopupProvider.java
2	2	src/com/quollwriter/ui/EditPanel.java
1	1	src/com/quollwriter/ui/FileFinder.java
1	1	src/com/quollwriter/ui/Landing.java
181	10	src/com/quollwriter/ui/UIUtils.java
1	0	src/com/quollwriter/ui/components/ScrollablePanel.java
2	2	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
30	1	src/com/quollwriter/ui/panels/AssetViewPanel.java
2	2	src/com/quollwriter/ui/panels/IdeaBoard.java
1	1	src/com/quollwriter/ui/userobjects/DateUserConfigurableObjectFieldViewEditHandler.java
43	48	src/com/quollwriter/ui/userobjects/FieldsAddEdit.java
1	1	src/com/quollwriter/ui/userobjects/FileUserConfigurableObjectFieldViewEditHandler.java
1	1	src/com/quollwriter/ui/userobjects/ImageUserConfigurableObjectTypeFieldConfigHandler.java
1	1	src/com/quollwriter/ui/userobjects/MultiTextUserConfigurableObjectFieldViewEditHandler.java
5	7	src/com/quollwriter/ui/userobjects/ObjectDescriptionUserConfigurableObjectFieldViewEditHandler.java

commit 5a75938d9137b4ae7008b894dc9d79e9e59ea663
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Mar 13 22:29:13 2017 +1000

    Fixed an issue with sending a bug report and moved the send bug report to the new form type.

6	1	src/com/quollwriter/Environment.java
45	53	src/com/quollwriter/ui/AbstractViewer.java

commit 8b49531e8823dcea91d870d3f2921308c12b7f76
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Mar 13 22:14:21 2017 +1000

    Remove references to ActionAdapter (in preparation for its removal).  Also update the way that the new form is generated.

1	0	src/com/quollwriter/Constants.java
2	0	src/com/quollwriter/Environment.java
6	7	src/com/quollwriter/editors/ui/EditorLogin.java
9	10	src/com/quollwriter/editors/ui/EditorProjectViewer.java
38	52	src/com/quollwriter/editors/ui/EditorsUIUtils.java
20	19	src/com/quollwriter/editors/ui/InviteMessageBox.java
26	26	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
1	2	src/com/quollwriter/editors/ui/UpdateProjectMessageBox.java
2	5	src/com/quollwriter/ui/AbstractProjectViewer.java
261	228	src/com/quollwriter/ui/AbstractViewer.java
1	2	src/com/quollwriter/ui/AssetViewAddEditLayout.java
4	6	src/com/quollwriter/ui/BackupsManager.java
4	4	src/com/quollwriter/ui/ComponentShowHide.java
1	2	src/com/quollwriter/ui/DebugConsole.java
1	2	src/com/quollwriter/ui/EditPanel.java
5	8	src/com/quollwriter/ui/FindOrOpen.java
13	20	src/com/quollwriter/ui/Landing.java
2	3	src/com/quollwriter/ui/MessageWindow.java
20	26	src/com/quollwriter/ui/Options.java
29	30	src/com/quollwriter/ui/PasswordInputWindow.java
2	6	src/com/quollwriter/ui/QColorChooser.java
24	25	src/com/quollwriter/ui/QuestionWindow.java
2	4	src/com/quollwriter/ui/Targets.java
18	19	src/com/quollwriter/ui/TextInputWindow.java
56	44	src/com/quollwriter/ui/UIUtils.java
4	6	src/com/quollwriter/ui/WarmupPromptSelect.java
411	10	src/com/quollwriter/ui/forms/Form.java
4	4	src/com/quollwriter/ui/forms/MultiLineTextFormItem.java
1	3	src/com/quollwriter/ui/panels/QuollEditorPanel.java
1	2	src/com/quollwriter/ui/userobjects/BasicInfoAddEdit.java

commit dfc59aa3abea108ed52caaa9be5f5963d60b8ea9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Mar 10 11:11:42 2017 +1000

    A fex fixes for the layout and ensuring that items clicked in the object descriptions will open the correct object.

60	9	src/com/quollwriter/data/Project.java
1	0	src/com/quollwriter/data/UserConfigurableObject.java
14	10	src/com/quollwriter/ui/AssetViewAddEditLayout.java
7	0	src/com/quollwriter/ui/ProjectViewer.java
72	71	src/com/quollwriter/ui/UIUtils.java
4	0	src/com/quollwriter/ui/userobjects/TextUserConfigurableObjectFieldViewEditHandler.java

commit e17af407b8603b44da98b03f5697dbd3a6f15fcd
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Mar 9 14:04:08 2017 +1000

    Another monster update but one that I now consider to be stable.  Note however that not all of the changes
    have been fully tested.
    
    Changes:
    
    1. Field and type definitions have been moved to the project info database so that they are available to all
       projects.
    
    2. The class Asset models general purpose assets.
    
    3. Objects can be tagged, the tags are stored in the project info database.
    
    4. Assets can be dragged and dropped inside their section.
    
    5. Objects can be tagged by dragging them into a tag section.
    
    6. Each tag can be shown as its own section in the project sidebar.
    
    7. Sections can be hidden in the sidebar.
    
    8. Sections can be dragged and dropped within the project sidebar.

72	0	data/project-info-schema/update-scripts/0-1.xml
75	2	data/project-info-schema/update-scripts/2-3.xml
45	0	data/project-info-schema/update-scripts/create-views.xml
17	0	data/project-info-schema/views/tag.v
4	1	data/{schema => project-info-schema}/views/userobjecttype.v
0	0	data/{schema => project-info-schema}/views/userobjecttypefield.v
5	0	data/properties.xml
14	78	data/schema/update-scripts/0-1.xml
6	69	data/schema/update-scripts/10-11.xml
2	12	data/schema/update-scripts/create-views.xml
2	2	data/schema/views/{userobject.v => asset.v}
-	-	imgs/tag16.png
-	-	imgs/tag24.png
11	4	src/com/quollwriter/Constants.java
544	178	src/com/quollwriter/Environment.java
29	1	src/com/quollwriter/JSONDecoder.java
93	0	src/com/quollwriter/Utils.java
26	10	src/com/quollwriter/achievements/ui/Achievements.java
15	64	src/com/quollwriter/data/Asset.java
1	8	src/com/quollwriter/data/Book.java
3	4	src/com/quollwriter/data/Chapter.java
12	1	src/com/quollwriter/data/DataObject.java
103	0	src/com/quollwriter/data/DateUserConfigurableObjectTypeField.java
0	183	src/com/quollwriter/data/DateUserObjectTypeField.java
43	0	src/com/quollwriter/data/FileUserConfigurableObjectTypeField.java
0	72	src/com/quollwriter/data/FileUserObjectTypeField.java
50	0	src/com/quollwriter/data/ImageUserConfigurableObjectTypeField.java
173	0	src/com/quollwriter/data/LegacyAsset.java
17	109	src/com/quollwriter/data/LegacyUserConfigurableObject.java
2	2	src/com/quollwriter/data/Location.java
28	62	src/com/quollwriter/data/MultiTextUserConfigurableObjectTypeField.java
127	2	src/com/quollwriter/data/NamedObject.java
7	2	src/com/quollwriter/data/NamedObjectNameWrapper.java
91	0	src/com/quollwriter/data/NumberUserConfigurableObjectTypeField.java
0	187	src/com/quollwriter/data/NumberUserObjectTypeField.java
72	0	src/com/quollwriter/data/ObjectDescriptionUserConfigurableObjectTypeField.java
50	0	src/com/quollwriter/data/ObjectImageUserConfigurableObjectTypeField.java
80	0	src/com/quollwriter/data/ObjectNameUserConfigurableObjectTypeField.java
22	1	src/com/quollwriter/data/ObjectReference.java
232	540	src/com/quollwriter/data/Project.java
2	2	src/com/quollwriter/data/QCharacter.java
10	7	src/com/quollwriter/data/QObject.java
4	5	src/com/quollwriter/data/ResearchItem.java
29	104	src/com/quollwriter/data/SelectUserConfigurableObjectTypeField.java
34	0	src/com/quollwriter/data/Tag.java
24	39	src/com/quollwriter/data/TextUserConfigurableObjectTypeField.java
167	58	src/com/quollwriter/data/UserConfigurableObject.java
56	8	src/com/quollwriter/data/UserConfigurableObjectField.java
284	25	src/com/quollwriter/data/UserConfigurableObjectType.java
148	45	src/com/quollwriter/data/UserConfigurableObjectTypeField.java
20	38	src/com/quollwriter/data/WebpageUserConfigurableObjectTypeField.java
94	41	src/com/quollwriter/data/comparators/NamedObjectSorter.java
244	0	src/com/quollwriter/db/AssetDataHandler.java
2	9	src/com/quollwriter/db/ChapterDataHandler.java
18	16	src/com/quollwriter/db/CharacterDataHandler.java
6	16	src/com/quollwriter/db/LocationDataHandler.java
24	21	src/com/quollwriter/db/ObjectDataHandler.java
43	7	src/com/quollwriter/db/ObjectManager.java
34	13	src/com/quollwriter/db/ProjectDataHandler.java
276	1	src/com/quollwriter/db/ProjectInfoObjectManager.java
19	16	src/com/quollwriter/db/ResearchItemDataHandler.java
183	0	src/com/quollwriter/db/TagDataHandler.java
36	18	src/com/quollwriter/db/UserConfigurableObjectFieldDataHandler.java
27	22	src/com/quollwriter/db/UserConfigurableObjectTypeDataHandler.java
5	3	src/com/quollwriter/db/UserConfigurableObjectTypeFieldDataHandler.java
227	119	src/com/quollwriter/editors/ui/CommentActionHandler.java
13	15	src/com/quollwriter/editors/ui/EditorProjectViewer.java
1	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java
1	2	src/com/quollwriter/editors/ui/MessageAccordionItem.java
8	1	src/com/quollwriter/editors/ui/ProjectCommentsChaptersAccordionItem.java
8	8	src/com/quollwriter/editors/ui/ProjectSentReceivedViewer.java
14	13	src/com/quollwriter/editors/ui/panels/AdvertiseProjectPanel.java
5	4	src/com/quollwriter/editors/ui/panels/ChapterCommentsPanel.java
8	9	src/com/quollwriter/editors/ui/panels/EditorChapterPanel.java
19	18	src/com/quollwriter/editors/ui/panels/RegisterAsAnEditorPanel.java
3	3	src/com/quollwriter/editors/ui/sidebars/EditorFindPanel.java
12	2	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
40	12	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
13	2	src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java
1	1	src/com/quollwriter/events/MouseEventHandler.java
32	9	src/com/quollwriter/exporter/AbstractDocumentExporter.java
32	11	src/com/quollwriter/exporter/EPUBDocumentExporter.java
2	2	src/com/quollwriter/exporter/MSWordDocDocumentExporter.java
26	24	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
4	4	src/com/quollwriter/importer/HTMLDocumentImporter.java
4	4	src/com/quollwriter/importer/MSWordDocumentImporter.java
179	69	src/com/quollwriter/ui/AbstractProjectViewer.java
52	1	src/com/quollwriter/ui/AbstractViewer.java
94	155	src/com/quollwriter/ui/AccordionItem.java
37	74	src/com/quollwriter/ui/AppearsInChaptersEditPanel.java
493	60	src/com/quollwriter/ui/AssetAccordionItem.java
2008	18	src/com/quollwriter/ui/AssetDetailsEditPanel.java
58	0	src/com/quollwriter/ui/AssetFindResultsBox.java
1537	0	src/com/quollwriter/ui/AssetViewAddEditLayout.java
4	7	src/com/quollwriter/ui/ChapterFieldAccordionItem.java
11	0	src/com/quollwriter/ui/ChapterFindResultsBox.java
40	26	src/com/quollwriter/ui/ChapterItemMoveHandler.java
1	16	src/com/quollwriter/ui/ChapterItemTransferHandler.java
3	4	src/com/quollwriter/ui/ChapterItemViewPopupProvider.java
6	4	src/com/quollwriter/ui/ChapterItemViewer.java
44	10	src/com/quollwriter/ui/ChaptersAccordionItem.java
0	219	src/com/quollwriter/ui/CharacterDetailsEditPanel.java
1	3	src/com/quollwriter/ui/DebugConsole.java
11	21	src/com/quollwriter/ui/DefaultChapterItemViewPopupProvider.java
0	0	src/com/quollwriter/ui/DefaultTransferHandler.java
0	506	src/com/quollwriter/ui/DetailsEditPanel.java
7	0	src/com/quollwriter/ui/DragActionHandler.java
522	193	src/com/quollwriter/ui/EditPanel.java
11	6	src/com/quollwriter/ui/FileFinder.java
3	9	src/com/quollwriter/ui/FindOrOpen.java
26	1	src/com/quollwriter/ui/FindResultsBox.java
1	3	src/com/quollwriter/ui/FirstProject.java
45	36	src/com/quollwriter/ui/FirstUseWizard.java
3	6	src/com/quollwriter/ui/FullScreenFrame.java
63	37	src/com/quollwriter/ui/IconColumn.java
108	32	src/com/quollwriter/ui/ImageSelector.java
60	46	src/com/quollwriter/ui/ImportProject.java
45	23	src/com/quollwriter/ui/Landing.java
0	78	src/com/quollwriter/ui/LocationDetailsEditPanel.java
8	1	src/com/quollwriter/ui/NotesAccordionItem.java
0	284	src/com/quollwriter/ui/ObjectDetailsEditPanel.java
54	25	src/com/quollwriter/ui/ObjectDocumentsEditPanel.java
274	2	src/com/quollwriter/ui/Options.java
1	3	src/com/quollwriter/ui/PopupWindow.java
1	3	src/com/quollwriter/ui/PopupWizard.java
1	1	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
4	0	src/com/quollwriter/ui/ProjectEvent.java
517	150	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
310	175	src/com/quollwriter/ui/ProjectViewer.java
15	54	src/com/quollwriter/ui/QuollPanel.java
10	0	src/com/quollwriter/ui/RefreshablePanel.java
0	158	src/com/quollwriter/ui/ResearchItemDetailsEditPanel.java
540	0	src/com/quollwriter/ui/TaggedObjectAccordionItem.java
467	0	src/com/quollwriter/ui/TagsEditor.java
108	45	src/com/quollwriter/ui/TextArea.java
0	4	src/com/quollwriter/ui/TextPropertiesEditPanel.java
6	3	src/com/quollwriter/ui/TypesEditor.java
989	276	src/com/quollwriter/ui/UIUtils.java
0	839	src/com/quollwriter/ui/UserConfigurableObjectTypeEdit.java
8	1	src/com/quollwriter/ui/WarmupsAccordionItem.java
26	28	src/com/quollwriter/ui/Wizard.java
15	12	src/com/quollwriter/ui/actionHandlers/AbstractActionHandler.java
1259	0	src/com/quollwriter/ui/actionHandlers/AbstractFormPopup.java
72	68	src/com/quollwriter/ui/actionHandlers/AddChapterActionHandler.java
272	235	src/com/quollwriter/ui/actionHandlers/AssetActionHandler.java
290	125	src/com/quollwriter/ui/actionHandlers/ChapterItemActionHandler.java
8	8	src/com/quollwriter/ui/actionHandlers/ChapterItemFormatDetails.java
139	181	src/com/quollwriter/ui/actionHandlers/NoteActionHandler.java
10	9	src/com/quollwriter/ui/actionHandlers/NoteFormatDetails.java
0	355	src/com/quollwriter/ui/actionHandlers/OutlineItemChapterActionHandler.java
9	9	src/com/quollwriter/ui/actionHandlers/OutlineItemFormatDetails.java
17	17	src/com/quollwriter/ui/actionHandlers/ProjectViewerActionHandler.java
2	2	src/com/quollwriter/ui/actionHandlers/RenameAssetActionHandler.java
8	8	src/com/quollwriter/ui/actionHandlers/SceneFormatDetails.java
0	506	src/com/quollwriter/ui/actionHandlers/ShowChapterItemActionHandler.java
60	71	src/com/quollwriter/ui/actionHandlers/SplitChapterActionHandler.java
2	0	src/com/quollwriter/ui/actionHandlers/YesDeleteConfirmTextInputActionHandler.java
18	8	src/com/quollwriter/ui/components/Form.java
8	0	src/com/quollwriter/ui/components/Header.java
56	0	src/com/quollwriter/ui/forms/AnyFormItem.java
61	76	src/com/quollwriter/ui/forms/CheckboxFormItem.java
41	6	src/com/quollwriter/ui/forms/ComboBoxFormItem.java
104	0	src/com/quollwriter/ui/forms/DateFormItem.java
66	0	src/com/quollwriter/ui/forms/FileSelectorFormItem.java
718	0	src/com/quollwriter/ui/forms/Form.java
17	20	src/com/quollwriter/ui/forms/FormItem.java
84	12	src/com/quollwriter/ui/forms/ImageSelectorFormItem.java
260	0	src/com/quollwriter/ui/forms/MultiLineTextFormItem.java
33	4	src/com/quollwriter/ui/forms/SelectFormItem.java
57	205	src/com/quollwriter/ui/forms/TextFormItem.java
13	10	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
62	67	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
5	2	src/com/quollwriter/ui/panels/AchievementsPanel.java
408	0	src/com/quollwriter/ui/panels/AddAssetPanel.java
123	203	src/com/quollwriter/ui/panels/AssetViewPanel.java
3	2	src/com/quollwriter/ui/panels/BasicQuollPanel.java
9	3	src/com/quollwriter/ui/panels/BlankQuollPanel.java
10	5	src/com/quollwriter/ui/panels/FullScreenQuollPanel.java
5	3	src/com/quollwriter/ui/panels/HelpTextPanel.java
14	16	src/com/quollwriter/ui/panels/IdeaBoard.java
10	115	src/com/quollwriter/ui/panels/OptionsPanel.java
10	14	src/com/quollwriter/ui/panels/ProjectObjectQuollPanel.java
22	25	src/com/quollwriter/ui/panels/QuollEditorPanel.java
7	12	src/com/quollwriter/ui/panels/StatisticsPanel.java
5	3	src/com/quollwriter/ui/panels/Timeline.java
2	4	src/com/quollwriter/ui/panels/WordCloudPanel.java
4	3	src/com/quollwriter/ui/renderers/ProjectTreeCellEditor.java
64	133	src/com/quollwriter/ui/renderers/ProjectTreeCellRenderer.java
89	69	src/com/quollwriter/ui/renderers/SelectableProjectTreeCellRenderer.java
28	1	src/com/quollwriter/ui/sidebars/AbstractSideBar.java
11	2	src/com/quollwriter/ui/sidebars/AccordionItemsSideBar.java
9	1	src/com/quollwriter/ui/sidebars/AppearsInChaptersSideBar.java
6	4	src/com/quollwriter/ui/sidebars/ChapterInformationSideBar.java
12	2	src/com/quollwriter/ui/sidebars/Finder.java
11	2	src/com/quollwriter/ui/sidebars/ProblemFinderSideBar.java
897	183	src/com/quollwriter/ui/sidebars/ProjectSideBar.java
10	0	src/com/quollwriter/ui/sidebars/TargetsSideBar.java
12	3	src/com/quollwriter/ui/sidebars/TextPropertiesSideBar.java
12	2	src/com/quollwriter/ui/sidebars/WarmupsSideBar.java
27	5	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java
96	0	src/com/quollwriter/ui/userobjects/AbstractUserConfigurableObjectFieldViewEditHandler.java
573	0	src/com/quollwriter/ui/userobjects/BasicInfoAddEdit.java
140	0	src/com/quollwriter/ui/userobjects/DateUserConfigurableObjectFieldViewEditHandler.java
153	0	src/com/quollwriter/ui/userobjects/DateUserConfigurableObjectTypeFieldConfigHandler.java
1459	0	src/com/quollwriter/ui/userobjects/FieldsAddEdit.java
163	0	src/com/quollwriter/ui/userobjects/FileUserConfigurableObjectFieldViewEditHandler.java
65	0	src/com/quollwriter/ui/userobjects/FileUserConfigurableObjectTypeFieldConfigHandler.java
270	0	src/com/quollwriter/ui/userobjects/ImageUserConfigurableObjectFieldViewEditHandler.java
59	0	src/com/quollwriter/ui/userobjects/ImageUserConfigurableObjectTypeFieldConfigHandler.java
294	0	src/com/quollwriter/ui/userobjects/LayoutAddEdit.java
172	0	src/com/quollwriter/ui/userobjects/MultiTextUserConfigurableObjectFieldViewEditHandler.java
123	0	src/com/quollwriter/ui/userobjects/MultiTextUserConfigurableObjectTypeFieldConfigHandler.java
295	0	src/com/quollwriter/ui/userobjects/NumberUserConfigurableObjectFieldViewEditHandler.java
251	0	src/com/quollwriter/ui/userobjects/NumberUserConfigurableObjectTypeFieldConfigHandler.java
193	0	src/com/quollwriter/ui/userobjects/ObjectDescriptionUserConfigurableObjectFieldViewEditHandler.java
106	0	src/com/quollwriter/ui/userobjects/ObjectDescriptionUserConfigurableObjectTypeFieldConfigHandler.java
127	0	src/com/quollwriter/ui/userobjects/ObjectImageUserConfigurableObjectFieldViewEditHandler.java
59	0	src/com/quollwriter/ui/userobjects/ObjectImageUserConfigurableObjectTypeFieldConfigHandler.java
153	0	src/com/quollwriter/ui/userobjects/ObjectNameUserConfigurableObjectFieldViewEditHandler.java
85	0	src/com/quollwriter/ui/userobjects/ObjectNameUserConfigurableObjectTypeFieldConfigHandler.java
174	0	src/com/quollwriter/ui/userobjects/SelectUserConfigurableObjectFieldViewEditHandler.java
200	0	src/com/quollwriter/ui/userobjects/SelectUserConfigurableObjectTypeFieldConfigHandler.java
159	0	src/com/quollwriter/ui/userobjects/TextUserConfigurableObjectFieldViewEditHandler.java
85	0	src/com/quollwriter/ui/userobjects/TextUserConfigurableObjectTypeFieldConfigHandler.java
69	0	src/com/quollwriter/ui/userobjects/UserConfigurableObjectFieldViewEditHandler.java
326	0	src/com/quollwriter/ui/userobjects/UserConfigurableObjectTypeEdit.java
23	0	src/com/quollwriter/ui/userobjects/UserConfigurableObjectTypeFieldConfigHandler.java
135	0	src/com/quollwriter/ui/userobjects/WebpageUserConfigurableObjectFieldViewEditHandler.java
67	0	src/com/quollwriter/ui/userobjects/WebpageUserConfigurableObjectTypeFieldConfigHandler.java

commit ee2915d48182e38e64ce44c0bfd58839ec5991a8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jan 1 16:33:51 2017 +1000

    This is very large update that should be considered unstable and shouldn't be used
    in a real project environment.  It is part of a larger feature set that will be submitted soon.
    
    Changes:
    
    1. Support for user configurable objects has been added, it is implemented using the UserConfigurableObject
       and UserConfigurableObjectField.  These define objects that are user configurable and the fields the
       object(s) can have.  They are backed by definition objects, UserConfigurableObjectType and
       UserConfigurableObjectTypeField.
    
    2. Assets have been made user configurable as have chapters.  A LegacyUserConfigurableObject provides the
       glue between the existing "legacy" fields such as name and description and the asset.
    
    3. Assets (Location, ResearchItem etc) have had their constructors made protected and the asset types should
       be created via a parent Project object.  The Project object contains the user configurable object type
       and type fields that the object needs for it's fields.  A single set of types and fields are used so that
       management of the fields is easier.
    
    4. A number of sub-types of fields have been added to provide such for different data types such as Web pages,
       Selects, Dates, Multi-line text.  Some of the implementing classes will have their name changes before the
       full release so beware of what you use.
    
    5. Basic, non-complete, support for adding fields to object types has been added however back-end support for
       saving those fields is not currently present.
    
    6. The namedobject table has been modified to add support for a user object type so that all named objects
       could, in theory, support user configurable fields.  The object views (see data/schema/views/*.v) have been
       extended to expose the new field added to namedobject.  A side-effect of how the object manager works has
       required that the editor and project info schemas have also been updated to support the user object type key
       (this is a side-effect of how the tables are setup and re-use of the ObjectManager class for handling of
       NamedObjects).

8	0	build.xml
-	-	data/asset-layout-1.png
-	-	data/asset-layout-2.png
-	-	data/asset-layout-3.png
-	-	data/asset-layout-4.png
-	-	data/asset-layout-5.png
-	-	data/asset-layout-6.png
-	-	data/asset-layout-7.png
-	-	data/asset-layout-8.png
1	0	data/editor-schema/update-scripts/0-1.xml
2	0	data/editor-schema/update-scripts/2-3.xml
8	0	data/editor-schema/update-scripts/3-4.xml
1	1	data/editors-schema-version.txt
1	1	data/project-info-schema-version.txt
1	0	data/project-info-schema/update-scripts/0-1.xml
8	0	data/project-info-schema/update-scripts/2-3.xml
1	1	data/schema-version.txt
116	0	data/schema/update-scripts/0-1.xml
124	0	data/schema/update-scripts/10-11.xml
20	0	data/schema/update-scripts/create-views.xml
2	1	data/schema/views/book.v
2	1	data/schema/views/chapter.v
2	1	data/schema/views/character.v
2	1	data/schema/views/editorproject.v
2	1	data/schema/views/idea.v
2	1	data/schema/views/ideatype.v
1	0	data/schema/views/location.v
2	1	data/schema/views/namedobject.v
2	1	data/schema/views/note.v
2	1	data/schema/views/outlineitem.v
2	1	data/schema/views/project.v
2	1	data/schema/views/qobject.v
2	1	data/schema/views/researchitem.v
2	1	data/schema/views/scene.v
18	0	data/schema/views/userobject.v
20	0	data/schema/views/userobjectfield.v
22	0	data/schema/views/userobjecttype.v
21	0	data/schema/views/userobjecttypefield.v
2	1	data/schema/views/warmup.v
9	0	src/com/quollwriter/Constants.java
5	22	src/com/quollwriter/data/Asset.java
8	2	src/com/quollwriter/data/Book.java
82	2	src/com/quollwriter/data/Chapter.java
183	0	src/com/quollwriter/data/DateUserObjectTypeField.java
72	0	src/com/quollwriter/data/FileUserObjectTypeField.java
210	0	src/com/quollwriter/data/LegacyUserConfigurableObject.java
3	4	src/com/quollwriter/data/Location.java
106	0	src/com/quollwriter/data/MultiTextUserConfigurableObjectTypeField.java
187	0	src/com/quollwriter/data/NumberUserObjectTypeField.java
378	14	src/com/quollwriter/data/Project.java
1	1	src/com/quollwriter/data/QCharacter.java
20	1	src/com/quollwriter/data/QObject.java
20	1	src/com/quollwriter/data/ResearchItem.java
174	0	src/com/quollwriter/data/SelectUserConfigurableObjectTypeField.java
71	0	src/com/quollwriter/data/TextUserConfigurableObjectTypeField.java
201	0	src/com/quollwriter/data/UserConfigurableObject.java
99	0	src/com/quollwriter/data/UserConfigurableObjectField.java
206	0	src/com/quollwriter/data/UserConfigurableObjectType.java
352	0	src/com/quollwriter/data/UserConfigurableObjectTypeField.java
71	0	src/com/quollwriter/data/WebpageUserConfigurableObjectTypeField.java
1	1	src/com/quollwriter/db/BookDataHandler.java
19	4	src/com/quollwriter/db/ChapterDataHandler.java
20	6	src/com/quollwriter/db/CharacterDataHandler.java
1	1	src/com/quollwriter/db/DataHandler.java
1	1	src/com/quollwriter/db/EditorEditorDataHandler.java
1	1	src/com/quollwriter/db/EditorMessageDataHandler.java
3	3	src/com/quollwriter/db/EditorProjectDataHandler.java
1	1	src/com/quollwriter/db/IdeaDataHandler.java
1	1	src/com/quollwriter/db/IdeaTypeDataHandler.java
3	3	src/com/quollwriter/db/LinkDataHandler.java
22	6	src/com/quollwriter/db/LocationDataHandler.java
1	1	src/com/quollwriter/db/NoteDataHandler.java
19	5	src/com/quollwriter/db/ObjectDataHandler.java
220	16	src/com/quollwriter/db/ObjectManager.java
1	1	src/com/quollwriter/db/OutlineItemDataHandler.java
93	1	src/com/quollwriter/db/ProjectDataHandler.java
1	1	src/com/quollwriter/db/ProjectEditorDataHandler.java
1	1	src/com/quollwriter/db/ProjectInfoDataHandler.java
1	1	src/com/quollwriter/db/ProjectVersionDataHandler.java
19	5	src/com/quollwriter/db/ResearchItemDataHandler.java
1	1	src/com/quollwriter/db/SceneDataHandler.java
245	0	src/com/quollwriter/db/UserConfigurableObjectFieldDataHandler.java
261	0	src/com/quollwriter/db/UserConfigurableObjectTypeDataHandler.java
266	0	src/com/quollwriter/db/UserConfigurableObjectTypeFieldDataHandler.java
1	1	src/com/quollwriter/db/WarmupDataHandler.java
5	4	src/com/quollwriter/importer/HTMLDocumentImporter.java
6	8	src/com/quollwriter/importer/MSWordDocumentImporter.java
3	1	src/com/quollwriter/ui/AbstractProjectViewer.java
1	1	src/com/quollwriter/ui/AssetAccordionItem.java
222	0	src/com/quollwriter/ui/NewObjectTypeWizard.java
2	9	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
1	1	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
36	8	src/com/quollwriter/ui/ProjectViewer.java
21	3	src/com/quollwriter/ui/UIUtils.java
839	0	src/com/quollwriter/ui/UserConfigurableObjectTypeEdit.java
38	10	src/com/quollwriter/ui/actionHandlers/AssetActionHandler.java
0	122	src/com/quollwriter/ui/actionHandlers/NewIdeaTypeActionHandler.java
66	37	src/com/quollwriter/ui/components/Form.java
84	0	src/com/quollwriter/ui/panels/AssetViewPanel.java
12	48	src/com/quollwriter/ui/sidebars/ProjectSideBar.java

commit 047c23ab2597f474fec76a2f3c5820851dacf9cf
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Dec 5 10:02:58 2016 +1000

    Changes:
    
    1. Sections in the project sidebar can now be hidden or added back in as required.  Right click menu items control this.
    
    2. Sections in the project sidebar can be drag-n-dropped to move them around.
    
    3. The chapter drag handler has been reworked and simplified.

10	0	data/properties.xml
3	1	src/com/quollwriter/Constants.java
12	0	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java
10	2	src/com/quollwriter/ui/AccordionItem.java
39	17	src/com/quollwriter/ui/ChaptersAccordionItem.java
6	1	src/com/quollwriter/ui/DragActionHandler.java
466	5	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
1	12	src/com/quollwriter/ui/ProjectViewer.java
18	2	src/com/quollwriter/ui/UIUtils.java
38	0	src/com/quollwriter/ui/components/ColorPainter.java
979	109	src/com/quollwriter/ui/sidebars/ProjectSideBar.java

commit 43ce416a6b1c3531a6a285111dc86db94eac774f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Nov 24 13:03:05 2016 +1000

    Fixed an issue with the selected item in the tree being lost when the tree is updated.  Fixed an issue preventing QObjects from being edited due to an infinite loop.

0	27	src/com/quollwriter/ui/AssetDetailsEditPanel.java
0	9	src/com/quollwriter/ui/ObjectDetailsEditPanel.java
16	1	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
1	1	src/com/quollwriter/ui/actionHandlers/AssetActionHandler.java
15	1	src/com/quollwriter/ui/panels/AssetViewPanel.java

commit de4c0d0cad780f7675769d8ac8f89a0f6d7605cb
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Nov 24 11:52:07 2016 +1000

    Changes:
    
    1. A new option has been added to allow assets to be edited in either a popup or in their own tab.
    
    2. When editing an asset in its own tab the "Appears in Chapters" section will disappear.
    
    3. A save button has been added to editing the asset in a tab (this also applies to all EditPanels) to provide consistency with other areas.
    
    4. A problem relating to calculating the A4 page count has been resolved.  Chapter counts (sans A4 count) are calculated early then once the viewer
    is visible the A4 page count is triggered.  The A4 page count will also only be triggered once startup is complete.
    
    5. Some classes have been made generic.
    
    6. The new options have been added to the Options panel.
    
    7. Fixed an issue the preview popup for assets where nothing was being displayed.
    
    8. The initial sizes for the assets split panes has been adjusted to give more space to the asset information and equal space to the linked to and documents.
    
    9. Fixed an issue where the asset panel wasn't being marked as ready for use when a new asset is added.

1	1	build.xml
5	0	data/properties.xml
1	1	data/version.txt
8	0	data/whats-new.xml
3	1	src/com/quollwriter/Constants.java
76	68	src/com/quollwriter/ui/AbstractProjectViewer.java
101	0	src/com/quollwriter/ui/AssetDetailsEditPanel.java
6	6	src/com/quollwriter/ui/CharacterDetailsEditPanel.java
20	35	src/com/quollwriter/ui/DetailsEditPanel.java
49	19	src/com/quollwriter/ui/EditPanel.java
4	11	src/com/quollwriter/ui/LocationDetailsEditPanel.java
1	1	src/com/quollwriter/ui/NamedObjectPreviewPopup.java
15	6	src/com/quollwriter/ui/ObjectDetailsEditPanel.java
69	0	src/com/quollwriter/ui/Options.java
2	2	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
18	0	src/com/quollwriter/ui/ProjectViewer.java
8	8	src/com/quollwriter/ui/ResearchItemDetailsEditPanel.java
62	13	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
42	7	src/com/quollwriter/ui/panels/AssetViewPanel.java
115	0	src/com/quollwriter/ui/whatsnewcomps/version_2_5_9.java

commit 6d24f24b6a6c526810ba888a3c777e55b04ebaad
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Nov 23 11:35:59 2016 +1000

    Ignore any exceptions thrown from calculating the A4 page count.  This is not desirable but there are errors occurring that are happening due to layout that I can't solve.

2	1	src/com/quollwriter/ui/AbstractProjectViewer.java

commit a0c3998076ac09a41a6190a7daae9db56162e1be
Author: Gary Bentley <gary@quollwriter.com>
Date:   Tue Nov 15 08:10:33 2016 +1000

    Fixed a problem with exporting from the .exe.  Note this is not a code fix, this is a fix for a configuration problem in the .exe generator.

1	1	build.xml
7	0	data/whats-new.xml

commit edc1b4005d2da1a8587be6e8ae1addff8ae03d45
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Nov 14 22:59:21 2016 +1000

    Update the version and what's new.

1	1	build.xml
7	0	data/whats-new.xml

commit 6c89fe5abb670dcd43cc5f6f03c465d92cb11c77
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Nov 14 22:50:24 2016 +1000

    Move the calculation of the A4 page count off of the event thread.  This will cause an occasional NPE related to the text flow however.  This is acceptable compared to having the UI lock up for seconds when the amount of text is reasonably large.

37	2	src/com/quollwriter/ui/AbstractProjectViewer.java

commit cf18393808f8e0434565c04e377e5624edd257cd
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Nov 13 21:10:55 2016 +1000

    Fix for a bug preventing upgrades to future versions.

1	1	build.xml
1	1	data/version.txt
9	5	data/whats-new.xml
4	3	src/com/quollwriter/Environment.java
7	3	src/com/quollwriter/ui/DefaultQuollWriterUpdater.java

commit bab31b0b41275ad8094d7323e9c029fad4b19f42
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Nov 11 21:00:04 2016 +1000

    Update the whats new and version.

1	1	data/version.txt
7	4	data/whats-new.xml

commit 8439d614dace20aaf20b76a87f5393c88b3a4a98
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Nov 11 20:50:58 2016 +1000

    Changes:
    
    The use of java.util.Timer has been changed to now use a java.util.concurrent.ScheduledThreadPoolExecutor with a custom (but vanilla) thread factory.
    Timer kept being the source of some strange illegal state exceptions that were next to impossible to track down.  This change also removes the use of TimerTasks as the units of work, replaced by Runnables.  The old methods are still present but deprecated and will be removed in a future release (probably the next release).
    
    All threads are created with lowest priority and are NOT run on the event thread so ensure that any UI updating is performed via a call to UIUtils.doLater.  The runnables also are not try/catch wrapped so you MUST do this yourself.  This decision is to allow you to unschedule the runnables if needed.
    
    The general look of the runnable should be:
    
    new Runnable ()
    {
    
        @Override
        public void run ()
        {
    
            try
            {
    
                // Do some background work.
                UIUtils.doLater (new ActionListener ()
                {
    
                    @Override
                    public void actionPerformed (ActionEvent ev)
                    {
    
                        // Update the UI.
    
                    }
    
                });
    
            } catch (Exception e) {
    
                Environment.logError ("Error", e);
    
            }
    
        }
    
    }

1	1	build.xml
169	81	src/com/quollwriter/Environment.java
5	7	src/com/quollwriter/achievements/AchievementsManager.java
71	51	src/com/quollwriter/ui/AbstractProjectViewer.java
108	23	src/com/quollwriter/ui/AbstractViewer.java
114	106	src/com/quollwriter/ui/ProjectViewer.java
1	1	src/com/quollwriter/ui/Targets.java
2	5	src/com/quollwriter/ui/panels/AbstractEditorPanel.java

commit 5b0f69f20915a0b9d84dd5e9b56b0a22c86f2533
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Nov 11 10:56:21 2016 +1000

    Changes:
    
    1. Actually save the dealt with date, which is handled by adding a property changed listener on the dealt with property.
    
    2. If a project has been deleted for a message then show a warning instead of offering to show the message.

7	0	src/com/quollwriter/data/Note.java
4	0	src/com/quollwriter/editors/messages/AbstractProjectMessage.java
5	0	src/com/quollwriter/editors/messages/NewProjectMessage.java
30	1	src/com/quollwriter/editors/messages/ProjectCommentsMessage.java
70	0	src/com/quollwriter/editors/messages/UpdateProjectMessage.java
610	329	src/com/quollwriter/editors/ui/EditorsUIUtils.java
103	18	src/com/quollwriter/editors/ui/ProjectCommentsChaptersAccordionItem.java
11	1	src/com/quollwriter/editors/ui/ProjectSentReceivedViewer.java
83	0	src/com/quollwriter/editors/ui/panels/ChapterCommentsPanel.java
4	2	src/com/quollwriter/editors/ui/sidebars/ProjectCommentsSideBar.java
9	1	src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java
8	0	src/com/quollwriter/ui/NamedObjectPreviewPopup.java
2	0	src/com/quollwriter/ui/UIUtils.java

commit 13f585de004baf48ce013e130191248bfa0a9c70
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Nov 9 13:19:14 2016 +1000

    Changes:
    
    1. Added the ability to set a comment received from an editor as "Dealt with", a visual indicator in the chapter list shows it is dealt with.
    
    2. Added the ability to have "tools" for each chapter item, which are a set of controls added to the button bar for each chapter item when displayed.
    
    3. Information about comments dealt with is stored in the project comments properties field as a map of comment id to date/time dealt with.
    
    4. Only a single item can now be displayed (the popup) in the editor chapter panel.
    
    5. Edit complete markers are no longer shown in the chapter list or icon column for an editor project.
    
    6. The editors schema version has been updated, the only change is a change to the message view (message.v) which now extracts the properties for the message.

12	12	build.xml
1	0	data/editor-schema/views/message.v
1	1	data/editors-schema-version.txt
1	1	data/version.txt
2	0	src/com/quollwriter/Constants.java
21	21	src/com/quollwriter/Startup.java
7	0	src/com/quollwriter/data/Project.java
2	1	src/com/quollwriter/db/EditorMessageDataHandler.java
0	1	src/com/quollwriter/db/EditorProjectDataHandler.java
53	0	src/com/quollwriter/editors/messages/ProjectCommentsMessage.java
3	0	src/com/quollwriter/editors/ui/EditorsUIUtils.java
18	0	src/com/quollwriter/editors/ui/ProjectCommentsChaptersAccordionItem.java
55	0	src/com/quollwriter/editors/ui/ProjectSentReceivedViewer.java
1	0	src/com/quollwriter/editors/ui/panels/ChapterCommentsPanel.java
1	1	src/com/quollwriter/editors/ui/panels/EditorChapterPanel.java
18	7	src/com/quollwriter/ui/ChapterFindResultsBox.java
16	3	src/com/quollwriter/ui/DefaultChapterItemViewPopupProvider.java
712	712	src/com/quollwriter/ui/FullScreenFrame.java
30	0	src/com/quollwriter/ui/IconColumn.java
1	1	src/com/quollwriter/ui/UIUtils.java
5	0	src/com/quollwriter/ui/actionHandlers/ChapterItemFormatDetails.java
12	0	src/com/quollwriter/ui/actionHandlers/NoteFormatDetails.java
13	0	src/com/quollwriter/ui/actionHandlers/OutlineItemFormatDetails.java
11	0	src/com/quollwriter/ui/actionHandlers/SceneFormatDetails.java
84	35	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
3	3	src/com/quollwriter/ui/renderers/ChapterSnippetsTreeCellRenderer.java
43	3	src/com/quollwriter/ui/renderers/ProjectTreeCellRenderer.java

commit db97ddff0d8bcce71ac3b3ed8a8f4f5cc6475213
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 28 17:32:16 2016 +1000

    Ensure that the correct properties are used when exporting.

5	5	src/com/quollwriter/exporter/EPUBDocumentExporter.java
14	3	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
3	1	src/com/quollwriter/exporter/PDFDocumentExporter.java
2	2	src/com/quollwriter/ui/ExportProject.java

commit 218d883a52a3cd97af01b905e6f8542367269327
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 28 16:32:50 2016 +1000

    Updated to ensure that the correct set of text properties are used when exporting.

5	5	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java

commit ab58adecff3a215008fa4df4ffc01f38100a824b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 28 15:05:31 2016 +1000

    Prevent class cast exception in importer.

3	3	src/com/quollwriter/importer/MSWordDocumentImporter.java

commit 24eb68033853b8e6b6c393c78d0a0e92b89957de
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 28 12:02:23 2016 +1000

    Fix an export to .docx space issue and update the docx4j to version 3.3.1.

-	-	3rd-party-jars/docx4j-3.3.1.jar
-	-	3rd-party-jars/docx4j-jars/avalon-framework-api-4.3.1.jar
-	-	3rd-party-jars/docx4j-jars/commons-codec-1.3.jar
-	-	3rd-party-jars/docx4j-jars/commons-io-1.3.1.jar
-	-	3rd-party-jars/docx4j-jars/commons-lang-2.4.jar
-	-	3rd-party-jars/docx4j-jars/commons-logging-1.1.1.jar
-	-	3rd-party-jars/docx4j-jars/commons-vfs-patched-1.9.1.jar
-	-	3rd-party-jars/docx4j-jars/core-renderer-R8pre2.jar
-	-	3rd-party-jars/docx4j-jars/docx4j-2.3.0.jar
-	-	3rd-party-jars/docx4j-jars/fop-patched-0.95.756437.jar
-	-	3rd-party-jars/docx4j-jars/hwpf-3.4.0.jar
-	-	3rd-party-jars/docx4j-jars/itext-unsigned-2.0.8.jar
-	-	3rd-party-jars/docx4j-jars/jcr-1.0.jar
-	-	3rd-party-jars/docx4j-jars/junit-4.4.jar
-	-	3rd-party-jars/docx4j-jars/log4j-1.2.15.jar
-	-	3rd-party-jars/docx4j-jars/minium-0.1.jar
-	-	3rd-party-jars/docx4j-jars/parent-pointer-plugin-1.0.jar
-	-	3rd-party-jars/docx4j-jars/pdf-renderer-0.2009.0324.jar
-	-	3rd-party-jars/docx4j-jars/xalan-patched-2.7.0.jar
-	-	3rd-party-jars/docx4j-jars/xmlgraphics-commons-1.3.757686.jar
-	-	3rd-party-jars/docx4j/antlr-2.7.7.jar
-	-	3rd-party-jars/docx4j/antlr-runtime-3.5.2.jar
-	-	3rd-party-jars/docx4j/avalon-framework-api-4.3.1.jar
-	-	3rd-party-jars/{docx4j-jars => docx4j}/avalon-framework-impl-4.3.1.jar
-	-	3rd-party-jars/docx4j/commons-codec-1.10.jar
-	-	3rd-party-jars/docx4j/commons-io-2.4.jar
-	-	3rd-party-jars/docx4j/commons-lang3-3.4.jar
-	-	3rd-party-jars/docx4j/commons-logging-1.1.3.jar
-	-	3rd-party-jars/docx4j/guava-19.0.jar
-	-	3rd-party-jars/docx4j/httpclient-4.5.2.jar
-	-	3rd-party-jars/docx4j/httpcore-4.4.4.jar
-	-	3rd-party-jars/docx4j/jackson-annotations-2.7.0.jar
-	-	3rd-party-jars/docx4j/jackson-core-2.7.3.jar
-	-	3rd-party-jars/docx4j/jackson-databind-2.7.3.jar
-	-	3rd-party-jars/docx4j/jaxb-svg11-1.0.2.jar
-	-	3rd-party-jars/docx4j/lorem-2.0.jar
-	-	3rd-party-jars/docx4j/mbassador-1.2.4.2.jar
-	-	3rd-party-jars/docx4j/serializer-2.7.2.jar
-	-	3rd-party-jars/docx4j/slf4j-api-1.7.21.jar
-	-	3rd-party-jars/docx4j/stringtemplate-3.2.1.jar
-	-	3rd-party-jars/docx4j/wmf2svg-0.9.8.jar
-	-	3rd-party-jars/docx4j/xalan-2.7.2.jar
-	-	3rd-party-jars/docx4j/xmlgraphics-commons-2.1.jar
-	-	3rd-party-jars/slf4j-api-1.5.8.jar
-	-	3rd-party-jars/slf4j-jdk14-1.5.8.jar
-	-	3rd-party-jars/slf4j-jre-1.5.8.jar
5	10	src/com/quollwriter/exporter/HTMLDocumentExporter.java
178	152	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
4	11	src/com/quollwriter/exporter/PDFDocumentExporter.java
2	2	src/com/quollwriter/importer/MSWordDocumentImporter.java

commit f2a8e9095a235ec7c9afb71267395e63c51d34c1
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Oct 27 22:39:34 2016 +1000

    Addition of a new right click menu for the asset view panel and the way that mouse events are handled on the quoll panel has been changed.  A mouse event handler can now be registered to handle events (via a JLayer).  The default behavior is to just call fillPopupMenu.

0	1	src/com/quollwriter/editors/ui/panels/ChapterCommentsPanel.java
5	11	src/com/quollwriter/editors/ui/panels/EditorChapterPanel.java
160	105	src/com/quollwriter/ui/QuollPanel.java
1	1	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
37	0	src/com/quollwriter/ui/panels/AssetViewPanel.java
1	0	src/com/quollwriter/ui/panels/ProjectObjectQuollPanel.java
51	56	src/com/quollwriter/ui/panels/QuollEditorPanel.java

commit 701a8c51d8a9503f3ff9f62a54d4064a18f815f5
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Oct 27 11:16:50 2016 +1000

    Added a Find your Projects menu item to the right click menu of the Landing.

35	1	src/com/quollwriter/ui/Landing.java

commit 4ce71990c8a3c5a131bdd3e2865860c3e1443e6f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 21 11:25:27 2016 +1000

    Ensure that the chapter edit position cannot be beyond the current length of the chapter.  Added the ability to edit text properties to the chapter right click menu.

15	0	src/com/quollwriter/db/ChapterDataHandler.java
11	1	src/com/quollwriter/ui/panels/QuollEditorPanel.java

commit 79dc00c73e9cde7694e96d76f3d426fd8b3f80fe
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Oct 6 10:51:05 2016 +1000

    Small tweaks to the borders on the project comments sidebar.

1	1	src/com/quollwriter/editors/ui/sidebars/ProjectCommentsSideBar.java
2	2	src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java

commit 41a420506e0954e00dc2362de63f6cba364aece0
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Sep 30 11:20:23 2016 +1000

    Updated the whats new and added a couple of new html panel actions.

15	0	data/whats-new.xml
1	1	src/com/quollwriter/ui/AbstractProjectViewer.java
9	0	src/com/quollwriter/ui/ProjectViewer.java

commit f0d6d67941f1113fff81fcdce425417c6867e50e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Sep 30 10:01:52 2016 +1000

    Some improvements to how the problem finder sidebar works.  Addition of a new base clase HideablePopup that allows for hiding a popup after a certain amount of time.  Some changes to references to prevent duplication and improve the class hierarchy.

3	3	src/com/quollwriter/editors/ui/EditorChaptersAccordionItem.java
14	6	src/com/quollwriter/editors/ui/ProjectCommentsChaptersAccordionItem.java
20	10	src/com/quollwriter/ui/AssetAccordionItem.java
38	6	src/com/quollwriter/ui/ChapterFindResultsBox.java
209	17	src/com/quollwriter/ui/ChapterProblemResultsBox.java
51	43	src/com/quollwriter/ui/ChaptersAccordionItem.java
9	1	src/com/quollwriter/ui/FindResultsBox.java
2	2	src/com/quollwriter/ui/FullScreenPropertiesEditPanel.java
243	0	src/com/quollwriter/ui/HideablePopup.java
1	1	src/com/quollwriter/ui/NamedObjectFindResultsBox.java
40	207	src/com/quollwriter/ui/NamedObjectPreviewPopup.java
22	12	src/com/quollwriter/ui/NotesAccordionItem.java
1	0	src/com/quollwriter/ui/ProjectEvent.java
30	37	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
16	6	src/com/quollwriter/ui/WarmupsAccordionItem.java
1	1	src/com/quollwriter/ui/panels/QuollEditorPanel.java
34	49	src/com/quollwriter/ui/sidebars/ProblemFinderSideBar.java
1	2	src/com/quollwriter/ui/sidebars/TextPropertiesSideBar.java

commit 0dd5e8bc6cd26cd34ef8169c7b6422a4e36edff2
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Sep 21 16:27:59 2016 +1000

    Changes:
    
    1. Added a document listener to ProjectViewer for chapter editors.  Document listeners can be added to ProjectViewer and informed of
    document changes without having to explicitly add themselves to the editors.  A soft reference map is used (like elsewhere).
    
    2. A new way to interact with problems found via the problem finder has been added.  A sidebar has been added (ProblemFidnerSideBar)
    to show all problems of a particular type across all chapters.  Access to the sidebar is provided either via the problem finder config,
    where you click on the "find" icon for a rule, or via a new right click item on a particular problem found via the standard finder.
    
    3. The problem finder rule definitions have been modified to use class names for defining the class that should be used to create the rule.
    If you had custom rules you should modify RuleFactory.createLegacyRule to add support for your rules then update future config to use
    fully-qualified class names for the "createType" attribute.
    
    4. A new double word rule has been added to find double (repeated) word and punctuation occurrences such as "that that" or "..".
    
    5. New utility methods have been added to find all the problems for all chapters.  (In addition to the removal of some commented code).
    
    6. Some class references have been changed to ProjectViewer rather than AbstractProjectViewer (not an issue since the problem finder
    is only supported in the sub-class).

1	2	build.xml
50	50	data/problem-finder-rules.xml
2	0	src/com/quollwriter/Environment.java
50	0	src/com/quollwriter/data/Chapter.java
65	15	src/com/quollwriter/db/ChapterDataHandler.java
60	29	src/com/quollwriter/text/IgnoreCheckbox.java
66	19	src/com/quollwriter/text/Issue.java
352	308	src/com/quollwriter/text/ProblemFinder.java
5	5	src/com/quollwriter/text/Rule.java
6	6	src/com/quollwriter/text/rules/AbstractDialogueRule.java
6	8	src/com/quollwriter/text/rules/AbstractParagraphRule.java
68	59	src/com/quollwriter/text/rules/AbstractRule.java
4	6	src/com/quollwriter/text/rules/AbstractSentenceRule.java
27	34	src/com/quollwriter/text/rules/AdverbRule.java
243	0	src/com/quollwriter/text/rules/DoubleWordRule.java
35	80	src/com/quollwriter/text/rules/ParagraphLengthRule.java
36	108	src/com/quollwriter/text/rules/ParagraphReadabilityRule.java
64	133	src/com/quollwriter/text/rules/PassiveSentenceRule.java
195	64	src/com/quollwriter/text/rules/RuleFactory.java
19	68	src/com/quollwriter/text/rules/SentenceComplexityRule.java
14	49	src/com/quollwriter/text/rules/SentenceLengthRule.java
17	73	src/com/quollwriter/text/rules/TooManyClausesRule.java
63	105	src/com/quollwriter/text/rules/WordFinder.java
107	501	src/com/quollwriter/ui/AbstractProjectViewer.java
422	0	src/com/quollwriter/ui/ChapterProblemResultsBox.java
5	5	src/com/quollwriter/ui/FindResultsBox.java
1	1	src/com/quollwriter/ui/Options.java
293	277	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
68	68	src/com/quollwriter/ui/ProjectTextProperties.java
250	10	src/com/quollwriter/ui/ProjectViewer.java
174	134	src/com/quollwriter/ui/TextPropertiesEditPanel.java
5	3	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
31	4	src/com/quollwriter/ui/panels/QuollEditorPanel.java
143	104	src/com/quollwriter/ui/sidebars/AbstractSideBar.java
8	11	src/com/quollwriter/ui/sidebars/Finder.java
615	0	src/com/quollwriter/ui/sidebars/ProblemFinderSideBar.java

commit 9e0dce2ee91df4412f4817fe3a53863f9a33764a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Sep 12 21:44:31 2016 +1000

    Editing of assets is now performed, just like adding assets, via a popup.  This solves a number of issues related to editing
    assets and makes it more consistent with the rest of the interface.
    
    The "Rename" item when right-clicking on an asset in the asset tree has been changed to "Edit".

41	35	src/com/quollwriter/ui/AssetAccordionItem.java
73	55	src/com/quollwriter/ui/CharacterDetailsEditPanel.java
120	4	src/com/quollwriter/ui/DetailsEditPanel.java
85	40	src/com/quollwriter/ui/EditPanel.java
14	6	src/com/quollwriter/ui/LocationDetailsEditPanel.java
39	19	src/com/quollwriter/ui/ObjectDetailsEditPanel.java
43	24	src/com/quollwriter/ui/ResearchItemDetailsEditPanel.java
62	62	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
66	44	src/com/quollwriter/ui/panels/AssetViewPanel.java

commit b4193cd79fd92865a3585fc379ddf3caa3603a17
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Sep 11 14:28:54 2016 +1000

    Add Ctrl+S as a shortcut for saving changes to an asset.

57	33	src/com/quollwriter/ui/DetailsEditPanel.java

commit 27074d9560afb408baf3d81604ca96f1a027eadf
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Aug 18 12:56:43 2016 +1000

    Fixed an issue that was preventing the synonum lookup menu item from being displayed.

2	2	src/com/quollwriter/DictionaryProvider.java

commit 7a9fc2736c1c869ecf43c5ff9f909ef9970c8ce5
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Aug 15 23:02:45 2016 +1000

    A new way of doing updates has been introduced, this is to support the new way of performing the updates.  From version 2.5.4 onwards
    an executable file will be run once QW has exited to perform the update.  This is instead of using a zip file and updating particular
    jar files.
    
    A new interface QuollWriterUpdater has been added to allow for custom install methods.  DefaultQuollWriterUpdater has been added
    to handle the new update method.  GetLatestVersion is now deprecated and no longer used, it will be removed in a future release.
    
    A new property "quollWriterUpdaterClassName" has been added to allow configuration of the class to use for updating.  Implementations
    must have a zero arg public constructor since new instances are created via Class.newInstance.
    
    If you need to provide a custom installation method then implement QuollWriterUpdater and set the class name in the property.
    
    You can now add Runnables to the environment that are run just before QW is shutdown, the DefaultQuollWriterUpdater makes use of
    this to execute the new install file on exit.

1	1	build.xml
6	1	data/properties.xml
11	0	data/whats-new.xml
4	0	src/com/quollwriter/Constants.java
95	135	src/com/quollwriter/Environment.java
10	0	src/com/quollwriter/QuollWriterUpdater.java
692	0	src/com/quollwriter/ui/DefaultQuollWriterUpdater.java
55	51	src/com/quollwriter/ui/GetLatestVersion.java

commit 7622e1143935fefbb854ec5a60685b76328d2ab9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 14 11:02:36 2016 +1000

    Add the import file filter to the first use wizard file selector.

1	0	src/com/quollwriter/ui/FirstUseWizard.java

commit 4b011987df9192d179ddfdfdea4cdc3d0dcedd79
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 14 10:45:18 2016 +1000

    Update the Landing for the import wizard and make the case of the menu items consistent.

345	345	src/com/quollwriter/ui/FirstUseWizard.java
2	2	src/com/quollwriter/ui/Landing.java

commit 40cb1adab2e32ddaba26e932195cb153b5696837
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 14 10:44:19 2016 +1000

    Better handling when a stage is null.

13	0	src/com/quollwriter/ui/Wizard.java

commit 74eaead0c49700c2349aaf31ff654e8ba0b01a31
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 14 10:42:58 2016 +1000

    Some improvements to the import function and also ensure it works properly with the Landing viewer.

67	1	src/com/quollwriter/ui/ImportProject.java

commit d6eb35f8c8f255283132dad3977c7d7b207e0757
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 14 08:57:55 2016 +1000

    Don't initially set the project when creating the import.

3	3	src/com/quollwriter/ui/ImportProject.java

commit c2db2db3b959e3786ae13d33fd5025bafe66a7de
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 14 08:51:20 2016 +1000

    Fix an issue that was preventing the next button from being enabled.

4	1	src/com/quollwriter/ui/ImportProject.java

commit fbcd8242792ba0ec1b1a89099e28ce47cfa10023
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Aug 4 21:58:37 2016 +1000

    Tweak to whats new to add in help link.

1	1	data/whats-new.xml

commit b9630f3a1c874f7374d90fee4422c3488833687f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Aug 4 15:19:59 2016 +1000

    A couple of fixes to prevent a single pixel line showing up in distraction free mode when using a dark theme.

356	358	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
385	383	src/com/quollwriter/ui/panels/QuollEditorPanel.java

commit 346c05638ff5659fb513545c10094b08d7645f1e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Aug 3 23:00:03 2016 +1000

    Some small changes to ensure that the named object preview popup will display at the right dimensions.

12	3	src/com/quollwriter/ui/NamedObjectPreviewPopup.java
1	0	src/com/quollwriter/ui/Options.java
4	3	src/com/quollwriter/ui/UIUtils.java

commit eb3857fdbfe9febcdc24e07c2b04805052d19a07
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Aug 3 15:55:26 2016 +1000

    Ensure that the text and markup is nulled before reuse, so ensuring that the chapter goals and plan aren't given the same text as the chapter.

263	251	src/com/quollwriter/db/ChapterDataHandler.java

commit f65e1b7288be75c2fe7ea71a6437472bdf5c59a8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jul 29 12:55:23 2016 +1000

    Update the what's new for version 2.5.2.

11	0	data/whats-new.xml

commit cb1727e881d8916c334d64db04981b9cef48043d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jul 29 10:59:31 2016 +1000

    Add a couple of new text sanitizing replacements to handle those stupid smart quotes MS Word insists on adding.

152	144	src/com/quollwriter/text/TextUtilities.java

commit 4c689d85c9de13c1a03f77e1705c635c71a743e8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 28 10:22:33 2016 +1000

    Disable the next button until the project has loaded in.

11	0	src/com/quollwriter/ui/ImportProject.java

commit 2ab3ab2351b49dc514cf17a883cd73b15b052bf7
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jul 25 12:26:21 2016 +1000

    Check for no object manager being present.

7	0	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 1bd3e3c92f60daa52fb0668b3a8ccff9b338a169
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jul 25 12:25:11 2016 +1000

    Update the editor project sidebar with some minor visual changes.

91	65	src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java

commit 188be1a296d2ff5e78c3870eddc03f302d131e3b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jul 25 12:24:21 2016 +1000

    Update the chapter preview to handle null chapter counts and readability.

45	3	src/com/quollwriter/ui/UIUtils.java

commit 1f0a0e821fc3067137689f0e0a59d80df82edaf2
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jul 24 10:08:51 2016 +1000

    An option has been added to expand search results when a find is performed.  The default behavior is to not expand results.

5	0	data/properties.xml
2	0	src/com/quollwriter/Constants.java
40	33	src/com/quollwriter/ui/FindResultsBox.java
55	0	src/com/quollwriter/ui/Options.java
123	114	src/com/quollwriter/ui/sidebars/Finder.java

commit bf5383d9e83b6f3f9ff781625fcbfdfe045f6a8d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 23 21:07:12 2016 +1000

    If the finder sidebar is already visible then showing it again will grab the focus on the search box.

2	0	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 20c29a63b62f00e90742f2378d530909b5d4ddf4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 23 14:10:39 2016 +1000

    Move the generation of the initial a4 page count into a low priority thread.  It was taking up way too much time on the event thread and is only used in the word count sidebar.

24	6	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 7b2595cb8cf19a661eee6ade7c614ebfe04e52c7
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 23 13:21:34 2016 +1000

    Update to use new/changed methods.

276	278	src/com/quollwriter/editors/ui/EditorRegister.java
2225	2222	src/com/quollwriter/editors/ui/EditorsUIUtils.java
151	150	src/com/quollwriter/ui/BackupsManager.java

commit 71aa4c88c9b714bd9f94161120bacafb54e03496
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 23 13:20:31 2016 +1000

    Remove some commented code and update the import label.

534	569	src/com/quollwriter/ui/ProjectViewer.java

commit fd35134ccfac24f6165fd13591524c9c9d699698
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 23 13:19:43 2016 +1000

    1. Add some new convenience methods to create radio buttons.
    
    2. Add a new password input popup method.
    
    3. Removed openProjectAndDoAction, it wasn't doing what it was supposed to, instead askForPasswordForProject has
       been enhanced and used instead.

174	34	src/com/quollwriter/ui/UIUtils.java

commit 94ce023de8dfafea41b82d734f4e428ea4b87bf1
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 23 13:17:02 2016 +1000

    Allow for importing items from a current project.

529	160	src/com/quollwriter/ui/ImportProject.java

commit d072c876f392d6ebc876c26041da756cc7f88c49
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 23 13:16:19 2016 +1000

    Change the definition of enableButtons to take the current stage, this makes it easier when overriding to see what stage the wizard is at.

82	82	src/com/quollwriter/ui/Wizard.java

commit 8f66735978c0a673f852813dcbb2f32120d8324b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 23 13:14:15 2016 +1000

    Allow the id for a DataObject to be updated to null.

57	54	src/com/quollwriter/data/DataObject.java

commit 70820c2c91421fc42d27ff957544d0d509976ee2
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 21 15:41:39 2016 +1000

    Ensure that the last modified value for chapters is updated at the relevant times.

147	141	src/com/quollwriter/data/Chapter.java
435	434	src/com/quollwriter/db/ObjectManager.java

commit 69a25321d4ae692952416ac685997d86d7e4ee4b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 21 14:43:38 2016 +1000

    1. The chapter preview, when you mouse over a chapter in the chapter list, has been enhanced to allow the display
       of a number of pieces of information about the chapter.  A new option has been added to allow configuration
       of the information.  The information is selected via a number of predetermined "tags" which are then replaced
       with the relevant data to form the final value displayed.  See new method: UIUtils.getChapterInfoPreview for details.
       It has similarities to the project information that is displayed in the Projects window (Landing class).  A new
       user property: defaultChapterInfoPreviewFormat has been added to give the initial value for the format used.
    
    2. The spell checking has been tweaked to work on the Word class rather than Strings and an update of where certain
       words are checked has been made.  In short some of the code has been moved to a better place.
    
    3. A few minor visual changes have been made, these are so minor they aren't worth iterating, please see the code itself
       for details.
    
    4. Two new methods have been added to AbstractProjectViewer, "getProblems" and "getSpellingErrors" which allow the
       caller to get the issues and location of spelling errors for the current text for a chapter.  The introduction of
       getSpellingErrors prompted the changes to the spell checker so the words actually at fault and their location within the
       text can be found.
    
    Note: I'm currently having a lot of trouble getting git to behave correctly with whitespace and newlines in my local
    repository.  The upshot of this is that this commit and future ones may contain seemingly spurious null changes such as a
    blank line looking like it has changed when it has not.  I'm still working on how to solve this.

1	1	build.xml
72	65	data/properties.xml
1	1	data/version.txt
130	118	src/com/quollwriter/Constants.java
161	112	src/com/quollwriter/DictionaryProvider.java
87	0	src/com/quollwriter/ui/AbstractProjectViewer.java
0	3	src/com/quollwriter/ui/AbstractViewer.java
1437	1437	src/com/quollwriter/ui/Landing.java
140	131	src/com/quollwriter/ui/NamedObjectPreviewPopup.java
1539	1293	src/com/quollwriter/ui/Options.java
80	60	src/com/quollwriter/ui/OptionsBox.java
344	344	src/com/quollwriter/ui/TextArea.java
187	0	src/com/quollwriter/ui/UIUtils.java
243	242	src/com/quollwriter/ui/components/QTextEditor.java
10	8	src/com/quollwriter/ui/components/SpellChecker.java
171	171	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java

commit 5488995d2a31528d96427b79da2ae90bc5babc12
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 20 10:47:16 2016 +1000

    Remove the unnecessary timer that was used for scheduling a spell check of a changed document element.

120	135	src/com/quollwriter/ui/components/QSpellChecker.java

commit 675df5ede3b10e7ce2dbf52bf86c8f154b6b8522
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 7 12:21:03 2016 +1000

    Change version number to correct value.  My apologies for these idiotic minor changes, it's been a very difficult few weeks!

1	1	data/whats-new.xml

commit 201d0c2cdd5838beb011a6a20516e3ed8c9fe39c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 7 12:15:32 2016 +1000

    Fix a spelling mistake, can't believe I missed this for so long.

691	695	src/com/quollwriter/editors/ui/EditorInfoBox.java
88	88	src/com/quollwriter/editors/ui/EditorInfoMessageBox.java
72	72	src/com/quollwriter/editors/ui/EditorRemovedMessageBox.java
90	90	src/com/quollwriter/editors/ui/InviteResponseMessageBox.java
230	230	src/com/quollwriter/editors/ui/NewProjectResponseMessageBox.java
95	95	src/com/quollwriter/editors/ui/ProjectEditStopMessageBox.java
2276	2276	src/com/quollwriter/ui/AbstractProjectViewer.java
956	956	src/com/quollwriter/ui/AbstractViewer.java
1872	1872	src/com/quollwriter/ui/UIUtils.java

commit 584061c8e3d45962699b6ceea67853df267b529b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 7 11:59:05 2016 +1000

    Updated the whats new for version 2.5.1.

34	27	data/whats-new.xml

commit 2c2d2b8e5bffa696ceae3ff7be779825f147b32d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 7 10:45:08 2016 +1000

    Update the version to 2.5.1.

62	62	build.xml

commit b9ed410a56fe9827287363905bb995de0ca3784b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 7 10:42:56 2016 +1000

    Ensure that some properties must be passed to the editors environment.

1091	1084	src/com/quollwriter/editors/EditorsEnvironment.java

commit bcfea42b136e5627dc41e0d36c4cda2b462e68df
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 7 10:42:12 2016 +1000

    Force the exit when the landing is closed and ensure that there are some editor properties at init.

1658	1659	src/com/quollwriter/Environment.java

commit 62d9374ed75ac4dc9857af39c81262e8539499f0
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 7 10:34:23 2016 +1000

    Remove commented code.

360	373	src/com/quollwriter/ui/Targets.java

commit ae90a985b198a1ba51aff1d85afde33bab7bb87d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 22 11:50:38 2016 +1000

    Remove the beta tag for the editors service.  Yay, said no one...

1	1	src/com/quollwriter/editors/ui/EditorRegister.java
1	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java

commit 7625e9d73388bd9896cbe4976aff5c3cd8269209
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 22 11:50:11 2016 +1000

    Don't null the timer so that the close can be called multiple times.

0	2	src/com/quollwriter/ui/AbstractViewer.java

commit ed67d97b0e0639c7cbc177a8b12a122a6ace4b6b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 22 11:45:14 2016 +1000

    If the user has no account don't try and auto-login.  Also ensure that the editor is added prior to when an invite is created.

18	2	src/com/quollwriter/editors/EditorsEnvironment.java

commit 8c496468ac7593795b3815db95d8c852d678d0c8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 22 11:44:19 2016 +1000

    Don't null the timer so that the closedown method can be called multiple times.

2	4	src/com/quollwriter/Environment.java

commit 4314dd1bc2a7db415acdc390f00cdc805bb4e4c7
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 22 11:43:35 2016 +1000

    Update the base editor schema.

2	0	data/editor-schema/update-scripts/0-1.xml

commit 4ae1d6be14cdcf4d29b2f3ca18fee2c799ecc512
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 22 09:50:57 2016 +1000

    When a project update can't be applied, set the update message as dealt with.  Also, check for the project response message being received and if not then send a new project message instead of update.

20	2	src/com/quollwriter/editors/ui/EditorsUIUtils.java

commit c0791787216cd2dc229b1464120fe7e70cdce3ae
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 22 09:41:00 2016 +1000

    Allow the new project message to be sent multiple times, this has been changed since there are cases where the message may go missing in transit.  The default message processor however will disallow duplicates so the receiver will never notice.

2	1	src/com/quollwriter/editors/ui/EditorInfoBox.java

commit 95136a2c78ba007490cbb00032d3356d8fc28f6d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 22 09:37:19 2016 +1000

    Ensure that the tool tip text has the appropriate replacements.

12	1	src/com/quollwriter/ui/UIUtils.java

commit 73b28678ad6472136ef56952208d8cd5b9d4030e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 22 09:36:53 2016 +1000

    Update the json encoder to handle StringWithMarkup objects.

29	3	src/com/quollwriter/JSONEncoder.java

commit 0b93d4491a52ae4f37d4f7974daa3f8e2ae26eae
Author: Gary Bentley <gary@quollwriter.com>
Date:   Tue Jun 21 21:56:35 2016 +1000

    Ensure that the default new project directory is derived from a normal project.

1	1	src/com/quollwriter/Environment.java

commit 62cfd287a57c417b7fb0946e6f465f59a364b977
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jun 20 23:00:33 2016 +1000

    Don't change the bg color of the icon column when the bg color of the writing area changes.

3	3	src/com/quollwriter/editors/ui/panels/ChapterCommentsPanel.java

commit b77ce943e045bad08f77038b1f7fb967d52882a9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jun 20 16:28:47 2016 +1000

    Dont update the icon column bg color when the writing area bg color is changed.

3	3	src/com/quollwriter/editors/ui/panels/EditorChapterPanel.java

commit e011b25511c99e5e8551278f3eb7686ae80a7e12
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jun 20 11:22:43 2016 +1000

    Only show a single viewer for the comments sent.  Add a childViewer to the messagebox to allow sub-classes to ensure only a single instance of the viewer is used.  Move the get project details method to a more appropriate place.

583	0	src/com/quollwriter/editors/ui/EditorsUIUtils.java
15	0	src/com/quollwriter/editors/ui/MessageBox.java
4	580	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
3	2	src/com/quollwriter/editors/ui/UpdateProjectMessageBox.java

commit ef261fa14422fc46fe2dea3af8fd5a73c5f85821
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jun 20 10:37:18 2016 +1000

    Put the number of comments about a chapter next to the chapter name.

45	0	src/com/quollwriter/editors/ui/EditorChaptersAccordionItem.java

commit d420f3e9905d6f9771d4f4f5885991e14325118c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jun 20 10:17:21 2016 +1000

    Update the editor chapters accordion to use the correct methods for initing/reloading the tree.

39	14	src/com/quollwriter/editors/ui/EditorChaptersAccordionItem.java

commit 41c8a909bd5ff397c56db23b77f7e704fcbf814c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jun 20 09:47:57 2016 +1000

    Change icon for all messages from editor.

1	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java

commit fa9c1a819cd39bcb4bfefb7438ae13c1a7f8a75f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 19 15:19:55 2016 +1000

    Change the version selector to show the number of comments a version has and list how many haven't been sent.  Also add a new db method support retrieval of the notes for a version.

77	0	src/com/quollwriter/db/NoteDataHandler.java
29	17	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
11	0	src/com/quollwriter/ui/AbstractProjectViewer.java

commit f171ecd5fee0ea36f5b1e975151b70d1c771d189
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 19 14:48:42 2016 +1000

    Set the caret color to the normal text color when there is placeholder text.

3	0	src/com/quollwriter/ui/TextArea.java

commit 78c9d7866fbbff84118b248fc69e9a2adf4239f8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 19 14:41:04 2016 +1000

    Ensure that the project comments can be opened when you are the one sending the comments.

1	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java

commit 1fb7f09af314d4244a5b788d03121f3b31b0e302
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 19 11:12:06 2016 +1000

    Allow a null string to be passed to the iterator, treat it the same as an empty string.

7	0	src/com/quollwriter/text/TextIterator.java

commit 2cd2dd9747ed861539f2fcf82d1f320beb101350
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 17 11:42:05 2016 +1000

    Change build number to 2.5.

6	2	build.xml

commit 505cfba48649eca74903e9bba2cd7e0b4a3ab1a0
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 17 11:28:05 2016 +1000

    Add sent/received to the comment box title to make it clearer which direction the message was sent.

3	3	src/com/quollwriter/editors/ui/ProjectCommentsMessageBox.java

commit 9b0c0e92914ec2c012c293465e1d04bd12313306
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 16 22:54:27 2016 +1000

    Correct the oopsie and add the project editors back in\!

1	1	src/com/quollwriter/db/ProjectDataHandler.java

commit c1a22feb5e0c3bfffed465d16a3e8e087524b753
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 16 19:45:05 2016 +1000

    Only init the word count sidebar timer when it is shown.  Also move the a4 page calculation and storage back into ChapterCounts and trigger it on a chapter change.

2	2	src/com/quollwriter/data/ChapterCounts.java
11	8	src/com/quollwriter/ui/AbstractProjectViewer.java
9	3	src/com/quollwriter/ui/UIUtils.java
28	27	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit b4f3a1d1cb1118c92003af3233285202d12f93e8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 16 11:19:12 2016 +1000

    Ensure that logging in popup is removed if there is a problem with the login.

7	0	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java

commit f058d254f014ef7a5b1b7ecba051c93e3134b5e0
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 15 20:48:13 2016 +1000

    Use new TextIterator.getFirstSentence method rather than the getNextClosestSentenceTo method and make retreival of for editor live data that is gained from the editors environment rather than stored when the project is loaded from the db.  This allows the editors db to be specified after the project has been created, say if the user moves to a different machine.

3	1	src/com/quollwriter/Environment.java
43	26	src/com/quollwriter/data/Project.java
3	3	src/com/quollwriter/db/ProjectDataHandler.java
1	1	src/com/quollwriter/editors/messages/NewProjectMessage.java
1	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java
1	1	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
1	1	src/com/quollwriter/editors/ui/ProjectCommentsMessageBox.java
2	2	src/com/quollwriter/editors/ui/sidebars/ProjectCommentsSideBar.java
21	0	src/com/quollwriter/text/TextIterator.java

commit e523c80bc264db3d26c1abc171ec4304fc0cac71
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 15 11:09:36 2016 +1000

    Change the way that files are opened from the object documents edit panel.

2	2	src/com/quollwriter/ui/ObjectDocumentsEditPanel.java

commit f0810de8145e47895265500e467a959f573747a5
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jun 13 10:50:26 2016 +1000

    Small tweak to display the correct section of the options.

1	1	src/com/quollwriter/ui/AbstractViewer.java

commit c68ecdb94dad7d34db9bb17d02d694f900b68878
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jun 13 10:46:28 2016 +1000

    Bring some of the tips up to date and tweak a couple of them to display at the correct time or use the correct action.

3	3	data/tips.xml

commit 7979f3c2b8221ef2e11f55a7b0db088db3b8858a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jun 13 10:45:48 2016 +1000

    Ensure that scrolling to an opened section of the options works.

18	5	src/com/quollwriter/ui/Options.java

commit 202029c4a19cc17b26542db83ffe9c759efcd920
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 12 13:32:47 2016 +1000

    Ensure that short and full desc have correct text component.

18	15	src/com/quollwriter/ui/panels/IdeaBoard.java

commit 6d2e454b5e30a27a7ffc2782e7f107a2f6ab527d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 12 13:00:38 2016 +1000

    Add the idea text as the chapter description when creating a new chapter from an idea.  Also allow the add chapter action handler to take a chapter that should be added and allow for an action to be called after the add has occurred.

45	3	src/com/quollwriter/ui/actionHandlers/AddChapterActionHandler.java
11	3	src/com/quollwriter/ui/panels/IdeaBoard.java

commit 93f7b4b348932c3ab4063c9b1cea2196e69ce41f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 12 12:11:03 2016 +1000

    Unselect items in the finder when an item is selected.  Make the finder result trees single selection only.

3	1	src/com/quollwriter/ui/FindResultsBox.java
64	4	src/com/quollwriter/ui/sidebars/Finder.java

commit eb18d9fc0b41e7c16ea33e562540d258d0658806
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 12 11:14:52 2016 +1000

    Prevent an NPE is achievement fires before there is a viewer to display the popup.

8	1	src/com/quollwriter/Environment.java

commit 0719e2ab1f1a34512583f1374903c6648ad19a5e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 12 10:38:27 2016 +1000

    Fire an event when the chart changes in the statistics panel.  The wordcounthistory achievement has been changed to trigger on this new event.

1	1	data/achievements.xml
2	1	src/com/quollwriter/ui/ProjectEvent.java
4	0	src/com/quollwriter/ui/panels/StatisticsPanel.java

commit 62c153e55889d6dc428a6a4881e35514f28c408c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 12 10:34:57 2016 +1000

    Fire an object edit event in the details edit panel.

4	0	src/com/quollwriter/ui/DetailsEditPanel.java

commit 89d03507fa61f106dee9748e47051f081e0221f2
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jun 11 15:29:01 2016 +1000

    Ensure that addeditneedednote* achievements fire and that addnote* achievements only fire for non-edit needed notes.

4	0	data/achievements.xml
5	0	src/com/quollwriter/ui/actionHandlers/NoteActionHandler.java

commit e31033289a0c9423affc59448fe1fddebb359be3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jun 11 14:10:48 2016 +1000

    Ensure that fullscreen.changebgimage event fires correctly.

5	3	src/com/quollwriter/ui/FullScreenFrame.java

commit acc529bba14ef1e2b7edea88196bc13be8e9616b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 10 11:30:15 2016 +1000

    Make the action handles generic and open the relevant asset section when an asset of that type has been added.

16	9	src/com/quollwriter/ui/actionHandlers/AbstractActionHandler.java
3	1	src/com/quollwriter/ui/actionHandlers/AssetActionHandler.java
22	19	src/com/quollwriter/ui/actionHandlers/ProjectViewerActionHandler.java
8	0	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
8	0	src/com/quollwriter/ui/panels/ProjectObjectQuollPanel.java

commit 258981ae1c96c0107e334dc7527a51d93a120263
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 9 23:52:20 2016 +1000

    Allow items in the selectable tree to be enabled/disabled and allow tool tips.

189	9	src/com/quollwriter/ui/charts/ReadabilityIndicesChart.java
45	1	src/com/quollwriter/ui/renderers/SelectableProjectTreeCellRenderer.java

commit 1690ec2e2dd86c77cd8e9e27b6686c7705884263
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 9 23:43:12 2016 +1000

    Ensure that the average word count is an integer not a decimal.

1	1	src/com/quollwriter/ui/charts/SessionWordCountChart.java

commit 5ff4a5e40dfdda9cd546b2b0829ff75dcafb01dd
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 9 23:42:17 2016 +1000

    Ensure that bars can't get bigger than 10% of the plot size.

4	2	src/com/quollwriter/ui/charts/QuollChartUtils.java

commit afa38133b12a26dc70423d8e8cc89272e4ce0883
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 9 21:49:31 2016 +1000

    Set a minimum size for the config panel in the statistics panel.

5	3	src/com/quollwriter/ui/panels/StatisticsPanel.java

commit e509b1400a1ba0984f7017f71b957f8b233f9e08
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 9 21:40:51 2016 +1000

    Remove out.println statements.

2	2	src/com/quollwriter/data/UserSession.java

commit 99cd663c74c6a8569a11b2e612d12ad75be0b1c5
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 9 14:19:15 2016 +1000

    Only include chapters with a word count over the readability minimum in the list of chapters that exceed the readability target(s).

9	0	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 8ba9e357eb9fd954b80f06a49182bc4bfdec5a4c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 9 14:18:17 2016 +1000

    Use the project viewer readability target method rather than repeat the code.

3	53	src/com/quollwriter/ui/Targets.java

commit 63a6a723d6f0637ec9cd9f6ab128d9ef3da8710f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 9 14:17:12 2016 +1000

    Only include chapters with a non-zero word count in the average total.

15	2	src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java

commit d76b10915798565bef1aa761d07f0839d9d6b23e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 9 14:16:22 2016 +1000

    Ensure that user session information is inited correctly and that the target notifications popups trigger at the right times.

4	3	src/com/quollwriter/Environment.java
3	3	src/com/quollwriter/data/UserSession.java

commit 218d6b60d43c57b09c4d94919073b79f4f04aca3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 8 14:37:42 2016 +1000

    When marking up text ensure that the word index is used rather than the word offset.

3	1	src/com/quollwriter/text/TextIterator.java
2	2	src/com/quollwriter/ui/UIUtils.java

commit 4269477f7ae6e830efc857749eb06bd12af1976c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 8 10:39:02 2016 +1000

    Update the word counts sidebar whenever the main panel changes.

4	2	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit fd59d56b25867bf672b5568981e2cb5e2fdf9356
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 8 10:13:32 2016 +1000

    Prevent NPE when the chapter doesn't yet have it's word counts available.

125	120	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit e3aa8f81f87d4c28882556a58f3eb4e2ece93c07
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 8 10:13:05 2016 +1000

    Unselect items in the project sidebar as necessary.

10	5	src/com/quollwriter/ui/sidebars/ProjectSideBar.java

commit 5d56ce43b10bffbd1c8fa4c80751367c5c88952b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 5 22:46:44 2016 +1000

    Add in missing required file.  Apologies for any compile errors.

694	0	src/com/quollwriter/ui/FullScreenPropertiesEditPanel.java

commit ec6d161b1ac4dc6fd01b62973ca3390260ea6dd9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 5 22:01:54 2016 +1000

    Change project events to be user level events and add a new one for removing the rule.  The config now listens for the events and updates itself as needed.

282	204	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
1	2	src/com/quollwriter/ui/ProjectEvent.java

commit 7d80a0049f109ba1dcaba554cd0fc41dac401786
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jun 4 20:36:59 2016 +1000

    Some tweaks to how words are found in a sentence.  This is a slower method than before but more accurate and covers all required cases.

15	5	src/com/quollwriter/text/Paragraph.java
1	1	src/com/quollwriter/text/ProblemFinder.java
132	6	src/com/quollwriter/text/Sentence.java
15	3	src/com/quollwriter/text/TextIterator.java
68	0	src/com/quollwriter/text/TextUtilities.java
2	2	src/com/quollwriter/text/rules/WordFinder.java

commit bb247e47030d49fd191bc51f8073e8e43b0284c1
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 3 13:46:32 2016 +1000

    The editors environment is now inited (again) by passing properties to it rather than the init method getting the propreties itself.  This changes is made to facilitate easier testing via junit.

23	1	src/com/quollwriter/Environment.java
5	25	src/com/quollwriter/editors/EditorsEnvironment.java

commit 713e07f01d497c651f235aff96d620deeb596ba8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 2 21:09:19 2016 +1000

    Add extra styles used when marking up the text.

25	0	data/export/epub/css-template.xml

commit f5bf9c3eb99b0999e14c90beca406f3121b6d68a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 2 21:08:18 2016 +1000

    Prevent NPEs when the goals or plan for a chapter is null.

2	2	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java

commit b9d20a7f2c01250ff700fb36fefe1aad3137cef9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 2 20:57:53 2016 +1000

    Allow for merging of assets when importing a file.

23	3	src/com/quollwriter/ui/ImportProject.java

commit 22b507c116694d4bc07e6784454272b6ba3776f0
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 2 20:54:25 2016 +1000

    Better handling of paragraphs and markup of those paragraphs.

10	9	src/com/quollwriter/exporter/EPUBDocumentExporter.java

commit 63276d83d01eba2ad8c977c7b684c363b6f1b49f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 2 20:52:54 2016 +1000

    Add a merge method to NamedObject that will merge the description and aliases.

74	0	src/com/quollwriter/data/NamedObject.java

commit 16ff81c8e389cf4c117eff9c48e050357a889731
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 1 22:24:17 2016 +1000

    A major overhaul of how the text properties and associated sidebar is handled.
    
    The full screen text properties sidebar has been removed, instead the standard text properties side now handles both normal and full
    screen mode functionality.  This is to ensure that you don't wind up with both sidebars being present and potentially trying to update
    the editors thus causing a loop.

23	3	data/properties.xml
10	0	src/com/quollwriter/Environment.java
68	0	src/com/quollwriter/UserProperties.java
29	0	src/com/quollwriter/events/FullScreenEvent.java
12	0	src/com/quollwriter/events/FullScreenListener.java
10	0	src/com/quollwriter/events/UserPropertySetter.java
92	38	src/com/quollwriter/ui/AbstractProjectViewer.java
49	126	src/com/quollwriter/ui/FullScreenFrame.java
24	55	src/com/quollwriter/ui/FullScreenTextProperties.java
61	73	src/com/quollwriter/ui/TextPropertiesEditPanel.java
4	104	src/com/quollwriter/ui/UIUtils.java
1	1	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java
1	2	src/com/quollwriter/ui/panels/WordCloudPanel.java
0	840	src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java
133	9	src/com/quollwriter/ui/sidebars/TextPropertiesSideBar.java

commit 235d0c07e45b5bc6da655dca87b65aa0654208ad
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 21 21:22:32 2016 +1000

    Prevent an NPE when the chapter returns a null string with markup.

4	1	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java

commit dc9b88442d80a6b1315ad58a517523b1e2fec107
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 21 21:22:10 2016 +1000

    Remove old init method, was just causing confusion.

0	435	src/com/quollwriter/ui/TextPropertiesEditPanel.java

commit 1370fe1fa8f7c55e20c7b01ade27e05753fb6d9c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 21 21:02:17 2016 +1000

    Restore the text settings correctly when exiting full screen mode.

2	2	src/com/quollwriter/ui/FullScreenFrame.java

commit 86ece5eca1ccf9cd04a79e143090209b9226a976
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 20 22:49:08 2016 +1000

    Ensure that the split chapter option is only shown when the caret is less than the length of the text, i.e. when the caret is at a position where the text can be split.

9	6	src/com/quollwriter/ui/panels/QuollEditorPanel.java

commit 701f212292f2ea6e472e15a1cdddc30919e61435
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 20 11:51:35 2016 +1000

    Do not trim the sentence/paragraph text when creating the object.

2	2	src/com/quollwriter/text/Paragraph.java
1	1	src/com/quollwriter/text/Sentence.java

commit 694b05ec07ddc64a8dec58c670262d1a0f266728
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 20 11:13:34 2016 +1000

    Make the chapter information sidebar set it's own sidebar name and use that name when showing the sidebar in the viewer.

2	2	src/com/quollwriter/ui/ProjectViewer.java
13	2	src/com/quollwriter/ui/sidebars/ChapterInformationSideBar.java

commit d5fecca60200499ba8b6f865d88e2eaff74133d5
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 20 10:33:08 2016 +1000

    Added a new shortcut, Ctrl+Shift+H, to add a new chapter at any time, also added a new chapter option to the chapter toolbar and right click menu for a chapter.

54	3	src/com/quollwriter/ui/ProjectViewer.java
47	0	src/com/quollwriter/ui/panels/QuollEditorPanel.java

commit 5ef70b49cd8945b17d3c029ed69abaa2d474b88e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 20 09:52:51 2016 +1000

    Couple of minor changes to how documents are handled for assets.

38	13	src/com/quollwriter/ui/ObjectDocumentsEditPanel.java

commit d1be3e6605b86af6858f20574843e119de9ad324
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 19 13:59:25 2016 +1000

    Regularly update the appears in chapters sidebar(s).  A new action has been added to allow for this.

65	0	src/com/quollwriter/ui/AbstractProjectViewer.java
52	2	src/com/quollwriter/ui/ProjectViewer.java
14	1	src/com/quollwriter/ui/sidebars/AppearsInChaptersSideBar.java
8	0	src/com/quollwriter/ui/sidebars/QuollSideBarAction.java

commit a9c41b69a292c4be9d3869fc17ef81e820accdb8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 19 13:22:43 2016 +1000

    Improve how sidebars are handled when removed and shutdown occurs.

0	8	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
27	3	src/com/quollwriter/ui/AbstractProjectViewer.java
54	0	src/com/quollwriter/ui/Landing.java
1	1	src/com/quollwriter/ui/sidebars/AbstractSideBar.java
1	0	src/com/quollwriter/ui/sidebars/AppearsInChaptersSideBar.java
0	8	src/com/quollwriter/ui/sidebars/TextPropertiesSideBar.java

commit ae25abf7b298ed964182766aa67575daa5fbaa40
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 19 12:50:25 2016 +1000

    Ensure that the chapter information sidebar for a chapter is removed when the chapter is deleted.

8	0	src/com/quollwriter/ui/sidebars/ChapterInformationSideBar.java

commit 81a123800ce7898b76920675de451cd1daeedb6e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 19 12:48:15 2016 +1000

    Ensure that the sidebars for an object are removed when the object is deleted.

17	0	src/com/quollwriter/ui/AbstractProjectViewer.java
4	0	src/com/quollwriter/ui/ProjectViewer.java
13	0	src/com/quollwriter/ui/sidebars/AbstractSideBar.java
9	2	src/com/quollwriter/ui/sidebars/AppearsInChaptersSideBar.java

commit 8ac56470714cdc1bab26829ad0019e98b30db6f3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 19 11:06:09 2016 +1000

    Ensure that the project viewer can be found in full screen mode when adding an asset via a popup.

22	7	src/com/quollwriter/ui/ProjectViewer.java

commit 8ebc4fd620af01ce744f177c1d894047b187fb88
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 19 09:57:39 2016 +1000

    The drag import has been removed from ProjectViewer, a Java8 bug is preventing it from working, it worked fine in Java7.  Also the Java version is now displayed in the About popup.

13	1	src/com/quollwriter/ui/AbstractViewer.java
12	1	src/com/quollwriter/ui/ProjectViewer.java

commit 271126b94e1266c4fab304075e0e00fac5b9e91c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed May 18 14:13:47 2016 +1000

    Prevent an NPE when renaming a project by removing the project property changed listener when the project is closed.

5	4	src/com/quollwriter/db/ObjectManager.java
2	0	src/com/quollwriter/ui/AbstractProjectViewer.java

commit e2a7f2067651dca50f3fdfdc8bd7fc5435462390
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed May 18 13:32:47 2016 +1000

    Add in the ability to change the text/background color in normal mode.

71	1	data/properties.xml
24	0	src/com/quollwriter/Constants.java
61	20	src/com/quollwriter/Environment.java
3	3	src/com/quollwriter/ui/AbstractProjectViewer.java
7	0	src/com/quollwriter/ui/AbstractViewer.java
8	6	src/com/quollwriter/ui/FullScreenFrame.java
57	21	src/com/quollwriter/ui/FullScreenTextProperties.java
73	47	src/com/quollwriter/ui/ProjectTextProperties.java
1	1	src/com/quollwriter/ui/ProjectViewerAction.java
7	31	src/com/quollwriter/ui/QColorChooser.java
78	142	src/com/quollwriter/ui/TextPropertiesEditPanel.java
1	1	src/com/quollwriter/ui/components/TextProperties.java
5	3	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
1	1	src/com/quollwriter/ui/sidebars/TextPropertiesSideBar.java

commit 4e36a03ce2534c6ca5d09d5ffdab669c2569dbd3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 6 14:43:15 2016 +1000

    Add in project menu options for creating a backup and viewing the statistics panel.  Also reorder the items to match a standard project.

15	4	src/com/quollwriter/ui/WarmupsViewer.java

commit 0314c90306daa6146dd360e41e1fcc7d890cb0d2
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri May 6 11:28:29 2016 +1000

    The check for unsaved changes in a panel has been moved up to closePanel from removePanel.  Also, removed some commented code.

155	265	src/com/quollwriter/ui/AbstractProjectViewer.java
3	3	src/com/quollwriter/ui/Landing.java
0	1	src/com/quollwriter/ui/ProjectViewer.java
0	35	src/com/quollwriter/ui/UIUtils.java

commit 2493eb89354c8ff14ecd1bfcaf17b5b684842151
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 5 11:34:28 2016 +1000

    Centralize the place where a project backup occurs, fire the user event from there.  The backups manager will now take note of the context object and only update itself if the project event relates to the project it is showing backups for.

9	2	src/com/quollwriter/Environment.java
2	47	src/com/quollwriter/ui/AbstractProjectViewer.java
24	2	src/com/quollwriter/ui/BackupsManager.java
0	4	src/com/quollwriter/ui/UIUtils.java

commit 1bab00d518a3b88df68d2d1e245c1c106c0bc419
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu May 5 10:49:25 2016 +1000

    Fire a user event when a backup is auto-created, also changed the indents of some items in the backup options so they aren't tied to the switch that turns off auto-backups.

4	0	src/com/quollwriter/ui/AbstractProjectViewer.java
1	1	src/com/quollwriter/ui/Options.java

commit 02a3be3040effb9b32e2982739ef6031b7e5f69a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed May 4 22:02:35 2016 +1000

    When that the switch to enable/disable auto backups doesn't also switch off other settings related to backups.

6	14	src/com/quollwriter/ui/Options.java

commit fa516fdd1ac3b2935289dcf38f066db2b88fa49f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed May 4 21:26:36 2016 +1000

    Ensure that the manage backups popup will appear again after closing and the manager now reacts to the correct type of project event for updating itself when a backup is performed.

47	34	src/com/quollwriter/ui/AbstractViewer.java
23	7	src/com/quollwriter/ui/BackupsManager.java
1	0	src/com/quollwriter/ui/UIUtils.java

commit 27f3d76472eaa031509b62aa8ec97752a0135159
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 1 15:07:51 2016 +1000

    Modify schema creation so that the schema version is set to the current rather than 1.

1	3	src/com/quollwriter/Environment.java
20	1	src/com/quollwriter/db/ObjectManager.java
57	6	src/com/quollwriter/db/ProjectInfoObjectManager.java
4	2	src/com/quollwriter/editors/EditorsEnvironment.java
14	0	src/com/quollwriter/editors/EditorsObjectManager.java

commit 2603808c476ce3613bed260114ea8d46295de544
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 1 15:06:22 2016 +1000

    Change the 'what is displayed' popup to be named and only allow a single instance.

203	173	src/com/quollwriter/ui/Landing.java

commit 945091487c7f3fbe7a3a87faf5d966ef77f55bb2
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 1 11:47:27 2016 +1000

    Fixes for various divde by zero problems when there are no sessions and improvements to what is displayed when there are no sessions but 'All Time' is selected for display.

7	0	src/com/quollwriter/Utils.java
26	0	src/com/quollwriter/ui/charts/SessionTimeChart.java
29	3	src/com/quollwriter/ui/charts/SessionWordCountChart.java

commit b7b3c026f5006d7a76e2cdcef2ba0c3e6f548348
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 29 14:13:38 2016 +1000

    Changes:
    
    1. Achievements for backups have been changed to be user rather than project due to issues
       with trying to trigger project level achievements from a non project context.
       For example, if the user performs a backup of an encrypted project that is not already
       open then the system can't open the project without user input to update the list
       of achieved achievements.
    
    2. Updates the achievement manager and Landing to allow for listening to events fired from
       the landing.
    
    3. Updated the firing of the backup events to be user level rather than project.

4	4	data/achievements.xml
7	14	src/com/quollwriter/Environment.java
44	30	src/com/quollwriter/achievements/AchievementsManager.java
3	1	src/com/quollwriter/ui/AbstractViewer.java
6	4	src/com/quollwriter/ui/UIUtils.java

commit 3915eafc2b5d5fc8eaa1aff95dbfa51a4df486e7
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 29 10:27:19 2016 +1000

    Changes:
    
    1. Fire events when a backup is created by the user or they view the backups for the project.
    
    2. Added 2 new achievements related to creating a backup and viewing the project backups.
    
    3. The backups manager popup is now a named popup and only one is shown (can be done now
       that the backups list reacts to events).
    
    4. The backups.new event is only triggered from the user creation of a backup, the event
       firing has been removed from Environment.createBackupForProject where the actual backup
       takes place.
    
    5. New methods have been added to "bring a popup to the front".

10	0	data/achievements.xml
1	9	src/com/quollwriter/Environment.java
8	0	src/com/quollwriter/ui/AbstractViewer.java
112	44	src/com/quollwriter/ui/UIUtils.java
16	9	src/com/quollwriter/ui/components/QPopup.java

commit 5929005c502fb91119876d1559597ce6076e07c1
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 29 09:23:16 2016 +1000

    Ensure that Landing has the correct keyboard shortcuts.  The F3 shortcut has been moved into AbstractViewer to it can be used by all sub-classes.

1	18	src/com/quollwriter/ui/AbstractProjectViewer.java
17	0	src/com/quollwriter/ui/AbstractViewer.java
2	0	src/com/quollwriter/ui/Landing.java

commit be0c5255bba5a594b3e028dc74c70f1e84d6cba7
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 29 09:09:14 2016 +1000

    Update the types table to have a tool tip and right click menu to allow editing.

41	0	src/com/quollwriter/ui/TypesEditor.java

commit c824983e82ddd77ffd89c2976d2e9fd4d656857a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Apr 29 08:40:14 2016 +1000

    Fix issues with the popup for setting what is displayed in the projects window.

15	1	src/com/quollwriter/ui/Landing.java
24	2	src/com/quollwriter/ui/OptionsBox.java
1	1	src/com/quollwriter/ui/TextArea.java

commit 9f66da5e71094c714beecf77202c78c9146da247
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Apr 28 09:29:10 2016 +1000

    Remove some commented code and show the landing when can't close the project.

2	13	src/com/quollwriter/ui/AbstractProjectViewer.java
0	21	src/com/quollwriter/ui/actionHandlers/RenameProjectActionHandler.java

commit 0c66be0a60a873911e3eb670b5a6902a37bb41df
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Apr 27 23:45:37 2016 +1000

    A change to how a project is closed down and deregistered from the environment.  When a project
    is renamed it must be closed before it's storage directory is modified, if it is the only
    project open and the setting to show the landing when there are no projects open is false then
    the call to Environment.projectClosed could have caused a shutdown or worse an NPE due to the
    projects db connection pool being closed.
    
    This change ensures that AbstractViewer.close is called prior to the deregistration and
    passing an action to Environment.projectClosed will prevent the shutdown/projects window
    check from occurring.

59	32	src/com/quollwriter/Environment.java
13	3	src/com/quollwriter/ui/AbstractProjectViewer.java
8	5	src/com/quollwriter/ui/Options.java

commit 339403b488de4bf323e1d5b0ef933a28d7aee7df
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Apr 27 21:01:35 2016 +1000

    Add some new keyboard shortcuts for opening the projects window and add a new project.

16	0	src/com/quollwriter/ui/AbstractProjectViewer.java
54	0	src/com/quollwriter/ui/Landing.java

commit e6e35306494245b79eb2928e8d427734d22b1aff
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Apr 27 15:07:47 2016 +1000

    When a project cannot be deleted from the projects window because it is already open, bring the project to the front (and raise if needed) when the popup is closed.

17	3	src/com/quollwriter/ui/Landing.java

commit 8297a69b0ffb0360692059481ce942dd35ea2a8d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Apr 27 13:11:45 2016 +1000

    Changes:
    
    1. Add some new constants and project event types/actions.
    
    2. Cleanup the BackupsManager code and have it fire and respond to the relevant project events.
    
    3. Add a new button to the BackupsManager to create a backup.
    
    4. Only show the click to view the backups directory link when the directory exists.
    
    5. Show a message when there are no backups for the project.

3	0	src/com/quollwriter/Constants.java
11	0	src/com/quollwriter/Environment.java
16	122	src/com/quollwriter/ui/AbstractProjectViewer.java
123	47	src/com/quollwriter/ui/BackupsManager.java
2	1	src/com/quollwriter/ui/Options.java
2	0	src/com/quollwriter/ui/ProjectEvent.java

commit b57aa03bc4d930b9a5b8efbd9d8f5cd258cb792e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Apr 27 10:59:34 2016 +1000

    Remove inherited unnessary code.

0	78	src/com/quollwriter/ui/BackupsManager.java

commit 971e46089b50c57add6368506449eac31d70fd9e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Tue Apr 26 00:27:53 2016 +1000

    Changes:
    
    1. Ensure that the editors environment is closed down properly when the user exits.  It would
       do anyway but it will now close cleanly rather than because the JVM is shutting down.
    
    2. The FindOrOpen class in SHOW_NEW mode can cause the JVM to NOT shutdown but I've not been
       able to determine why, dispose is called on the window but it still seems to have a reference
       somewhere.  In a classic case of redefining the problem however FindOrOpen is no longer used
       from AbstractProjectViewer to create a new project, instead the popup is created via new
       method UIUtils.showAddNewProject.  Both Landing and AbstractProjectViewer use this method
       ensuring consistency and a single code location.  It has the side effect of making the
       new project an internal popup rather than a separate window but this is acceptable since
       I've been trying to remove windows for a while.
    
    3. A couple of timers have been given relevant names for debugging purposes.
    
    4. AbstractProjectViewer.newProject has been updated to init the chapter counts and
       targets, this also prevents an NPE in the word counts sidebar (since the chapter counts
       won't be present).
    
    5. FindOrOpen has been deprecated and should no longer be used, it's functionality is provided
       by Landing and UIUtils.showAddNewProject.

57	47	src/com/quollwriter/Environment.java
9	0	src/com/quollwriter/editors/EditorsEnvironment.java
18	7	src/com/quollwriter/ui/AbstractProjectViewer.java
7	15	src/com/quollwriter/ui/AbstractViewer.java
12	2	src/com/quollwriter/ui/FindOrOpen.java
27	21	src/com/quollwriter/ui/Landing.java
43	0	src/com/quollwriter/ui/UIUtils.java

commit 420608ad4c1120d761a317e2519388c3959710e4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 24 23:15:41 2016 +1000

    A seemingly large update that actually does two simple things.  1. Make the delete project action handler usable from the Landing (projects window).  2. As a side-effect of item 1 some of the panels and action handlers have been made generic and the changes flow on from there, mostly just setting up the correct configuration class and then changing the use of 'getProjectViewer' to instead use 'getViewer'.

1	1	src/com/quollwriter/editors/ui/EditorProjectViewer.java
11	11	src/com/quollwriter/text/IgnoreCheckbox.java
20	28	src/com/quollwriter/text/ProblemFinder.java
3	1	src/com/quollwriter/ui/AbstractProjectViewer.java
4	4	src/com/quollwriter/ui/ChapterItemMoveHandler.java
1	1	src/com/quollwriter/ui/DefaultChapterItemViewPopupProvider.java
4	4	src/com/quollwriter/ui/IconColumn.java
8	2	src/com/quollwriter/ui/Landing.java
2	3	src/com/quollwriter/ui/ProjectViewer.java
0	1	src/com/quollwriter/ui/QColorChooser.java
5	5	src/com/quollwriter/ui/UIUtils.java
5	5	src/com/quollwriter/ui/actionHandlers/AssetActionHandler.java
2	2	src/com/quollwriter/ui/actionHandlers/DeleteChapterActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/DeleteIdeaTypeActionHandler.java
25	19	src/com/quollwriter/ui/actionHandlers/DeleteProjectActionHandler.java
4	4	src/com/quollwriter/ui/actionHandlers/DeleteWarmupActionHandler.java
3	109	src/com/quollwriter/ui/actionHandlers/EditIdeaTypeActionHandler.java
2	2	src/com/quollwriter/ui/actionHandlers/FindSynonymsActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/NewIdeaTypeActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/NoteFormatDetails.java
1	1	src/com/quollwriter/ui/actionHandlers/OutlineItemFormatDetails.java
4	4	src/com/quollwriter/ui/actionHandlers/ProjectViewerActionHandler.java
13	13	src/com/quollwriter/ui/actionHandlers/RenameAssetActionHandler.java
10	10	src/com/quollwriter/ui/actionHandlers/RenameChapterActionHandler.java
2	2	src/com/quollwriter/ui/actionHandlers/RenameNoteTypeActionHandler.java
13	13	src/com/quollwriter/ui/actionHandlers/RenameProjectActionHandler.java
11	11	src/com/quollwriter/ui/actionHandlers/RenameWarmupActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/SceneFormatDetails.java
1	1	src/com/quollwriter/ui/actionHandlers/ShowChapterItemActionHandler.java
7	7	src/com/quollwriter/ui/actionHandlers/TextInputActionHandler.java
4	4	src/com/quollwriter/ui/actionHandlers/YesDeleteConfirmTextInputActionHandler.java
16	16	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java
17	17	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
32	31	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
1	1	src/com/quollwriter/ui/panels/AbstractViewOnlyEditorPanel.java
51	16	src/com/quollwriter/ui/panels/AssetViewPanel.java
16	16	src/com/quollwriter/ui/panels/IdeaBoard.java
3	17	src/com/quollwriter/ui/panels/ProjectObjectQuollPanel.java

commit 0e36e0b8822eaa8e4487ae4ba66435675de37197
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 24 15:30:23 2016 +1000

    Ensure password input window is the right size when opening an encrypted project.

1	1	src/com/quollwriter/Environment.java

commit f3cd0f2ea3bc305d87d20fe3346aadea0b5c7345
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Apr 21 15:54:52 2016 +1000

    Prevent class cast exception.

4	1	src/com/quollwriter/ui/Tips.java

commit f8adbb42c8953d0893b5692c588006d9d12cfbe3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Apr 21 15:54:23 2016 +1000

    Fix to ensure a project can be deleted and the projects window shown if there are no other open projects and the projects window is not open.

68	52	src/com/quollwriter/Environment.java

commit dc4a58b091b4199c1aa421ef69b780e7bcb03128
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Apr 20 10:10:25 2016 +1000

    If there is no legacy properties.xml file then create some blank properties for the user.

7	0	src/com/quollwriter/Environment.java

commit bc3031a99b3f36254d26f6038d4ed067c49ced77
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Apr 20 09:28:05 2016 +1000

    Update the whats new information for version 2.5.  Also added 3 new html panel actions for opening the targets sidebar and statistics panel.

11	0	data/whats-new.xml
27	0	src/com/quollwriter/ui/AbstractViewer.java

commit acea17e6fa2990f5b01b9ce28c4b3c82775d7b1e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Apr 17 14:33:12 2016 +1000

    Changes:
    
    1. Fixed a bug that prevented the chapter information sidebar from being displayed when there is no chapter tab.
    
    2. Fixed a bug where, if an asset had part of its name the same as another asset, then the text pane linking
       would mess up.
    
    3. Text pane linking will now work on the name of the asset rather than using an object reference. (Note:
       this is how it was originally conceived to work but never made it in for reasons forgotten to time).
       If multiple assets are found to have the name or alias then a popup is displayed that allows the user
       to select the object they wish to view.  If only a single asset is found then it is displayed as normal.

6	0	src/com/quollwriter/Constants.java
20	0	src/com/quollwriter/ObjectRefURLStreamHandlerFactory.java
50	13	src/com/quollwriter/data/Project.java
355	84	src/com/quollwriter/ui/UIUtils.java
24	15	src/com/quollwriter/ui/sidebars/ChapterInformationSideBar.java

commit aacab926f65578e00805d2a56fa554a89d993fea
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Apr 14 11:49:50 2016 +1000

    Cleanup some minor compile issues.

-	-	3rd-party-jars/GWordCram-0.1.jar
1	1	data/version.txt
0	1	src/com/quollwriter/ui/ProjectViewer.java
2	2	src/com/quollwriter/ui/UIUtils.java

commit 3a68151a0da1e8182e33c3d8fffafc2fcfd8844c
Merge: 451efe6 b725d98
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Apr 14 10:30:57 2016 +1000

    Update build settings.  Also fixed up merge issues from master.

commit 451efe655933c2fbfc470f8fe1d8de20ba600268
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Apr 14 10:15:54 2016 +1000

    A large update containing a number changes:
    
    1. Fixes for some of the charts.
    
    2. Introduction of "UserProperties" which manages the user properties.  User properties are now
       saved to the projects db instead of "properties.xml" in the user QW directory, this is to prevent
       the file from becoming corrupted (no idea why it happens).  It also has the side benefit of allowing
       the properties to be transfered easily to another machine.  Access of user properties has been removed
       from Environment, UserProperties is a static singleton, this is to mainly allow for events to be triggered
       whenever a property is changed without bloating Environment further.  Note: setUserProperty methods have been
       removed from Environment, while it might be nice to deprecate them this leads to convoluted code in the
       meantime and cleanup work later, that sometimes may never happen.  I prefer to change things for the better
       and deal with the pain, so if you are affected then I'm a little sorry but it's better this way long term.
    
    3. The QColorChooser has been heavily reworked to allow for direction RGB selection and to enter a HEX code.
       Swatches are now in a scrollpane and newly added colors are remembered.
    
    4. Some work has been done on the word cloud but this isn't ready for prime time yet so it's been added but
       not officially released.  See ui/panels/WordCloudPanel.java for details.

191	360	src/com/quollwriter/Environment.java
2	2	src/com/quollwriter/Startup.java
263	0	src/com/quollwriter/UserProperties.java
16	49	src/com/quollwriter/achievements/AchievementsManager.java
23	45	src/com/quollwriter/data/UserSession.java
133	0	src/com/quollwriter/db/ProjectInfoObjectManager.java
1	1	src/com/quollwriter/editors/EditorsEnvironment.java
1	1	src/com/quollwriter/editors/ui/panels/ChapterCommentsPanel.java
2	2	src/com/quollwriter/editors/ui/panels/EditorChapterPanel.java
67	0	src/com/quollwriter/events/UserPropertyEvent.java
10	0	src/com/quollwriter/events/UserPropertyListener.java
10	30	src/com/quollwriter/text/rules/RuleFactory.java
6	18	src/com/quollwriter/ui/AbstractProjectViewer.java
6	28	src/com/quollwriter/ui/AbstractViewer.java
7	5	src/com/quollwriter/ui/BackgroundSelector.java
4	15	src/com/quollwriter/ui/FirstUseWizard.java
22	88	src/com/quollwriter/ui/FullScreenFrame.java
20	36	src/com/quollwriter/ui/FullScreenTextProperties.java
2	2	src/com/quollwriter/ui/IconColumn.java
27	100	src/com/quollwriter/ui/Landing.java
2	25	src/com/quollwriter/ui/ObjectDetailsEditPanel.java
42	122	src/com/quollwriter/ui/Options.java
10	28	src/com/quollwriter/ui/ProjectTextProperties.java
22	0	src/com/quollwriter/ui/ProjectViewer.java
731	173	src/com/quollwriter/ui/QColorChooser.java
2	1	src/com/quollwriter/ui/Targets.java
2	2	src/com/quollwriter/ui/TextArea.java
17	23	src/com/quollwriter/ui/TextPropertiesEditPanel.java
106	30	src/com/quollwriter/ui/UIUtils.java
3	25	src/com/quollwriter/ui/UserPropertyHandler.java
14	82	src/com/quollwriter/ui/WarmupPromptSelect.java
4	15	src/com/quollwriter/ui/WhatsNew.java
2	2	src/com/quollwriter/ui/charts/ReadabilityIndicesChart.java
15	5	src/com/quollwriter/ui/charts/SessionTimeChart.java
7	7	src/com/quollwriter/ui/components/FormItem.java
1	1	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java
9	11	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
1	1	src/com/quollwriter/ui/panels/AbstractViewOnlyEditorPanel.java
346	67	src/com/quollwriter/ui/panels/WordCloudPanel.java
2	2	src/com/quollwriter/ui/renderers/ProjectTreeCellRenderer.java
4	16	src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java
2	13	src/com/quollwriter/ui/whatsnewcomps/version_1_4_4.java
3	15	src/com/quollwriter/ui/whatsnewcomps/version_2_2.java

commit f5fe72ae2ae61c4b355176e7e9d35890f8e99992
Author: Gary Bentley <gary@quollwriter.com>
Date:   Tue Apr 5 22:07:16 2016 +1000

    Fix to allow selected chapters and assets to be exported to epub format.

5	5	src/com/quollwriter/exporter/EPUBDocumentExporter.java

commit 4110bde05400f840351d8fbcd6db7f16087facfc
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Mar 23 10:44:39 2016 +1000

    Better handling of the popups when a target is reached and movement of some code into the right place.

1	0	src/com/quollwriter/Constants.java
36	31	src/com/quollwriter/Environment.java
1	1	src/com/quollwriter/text/Paragraph.java
195	60	src/com/quollwriter/ui/AbstractProjectViewer.java
74	68	src/com/quollwriter/ui/FullScreenFrame.java
12	120	src/com/quollwriter/ui/Targets.java
2	2	src/com/quollwriter/ui/UIUtils.java

commit 093890f733b440e11b02d3395fcbd73e55dac427
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Mar 19 20:25:22 2016 +1000

    Remove comments.

1	15	src/com/quollwriter/data/Session.java

commit 6be71391748ddae0fa6f216de1e3ef4e4acf9d63
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Mar 19 20:22:00 2016 +1000

    diff --git a/data/properties.xml b/data/properties.xml
    index 1f3b04c..e2f3f41 100644
    --- a/data/properties.xml
    +++ b/data/properties.xml
    @@ -69,6 +69,11 @@
         <value>14</value>
       </property>
    
    +  <property id="editorTextBorder" type="integer">
    +    <description>The default text border for the editor.</description>
    +    <value>0</value>
    +  </property>
    +
       <property id="editorWritingLineColor" type="string">
         <description>The default color for the writing line for the editor.</description>
         <value>#D3D3D3</value>
    @@ -119,6 +124,11 @@
         <value><![CDATA[14.0]]></value>
       </property>
    
    +  <property id="fullScreenEditorTextBorder" type="integer">
    +    <description><![CDATA[The default text border in full screen mode.]]></description>
    +    <value><![CDATA[0]]></value>
    +  </property>
    +
       <property id="fullScreenEditorLineSpacing" type="float">
         <description><![CDATA[The default line spacing in full screen mode.]]></description>
         <value><![CDATA[1.0]]></value>
    @@ -438,4 +448,49 @@ This message will only be shown once during your current session using Quoll Wri
         <value>true</value>
       </property>
    
    +  <property id="targetSessionWriting" type="integer">
    +    <description>The default session writing target.</description>
    +    <value>500</value>
    +  </property>
    +
    +  <property id="targetDailyWriting" type="integer">
    +    <description>The default daily writing target.</description>
    +    <value>500</value>
    +  </property>
    +
    +  <property id="targetWeeklyWriting" type="integer">
    +    <description>The default weekly writing target.</description>
    +    <value>3500</value>
    +  </property>
    +
    +  <property id="targetMonthlyWriting" type="integer">
    +    <description>The default monthly writing target.</description>
    +    <value>15000</value>
    +  </property>
    +
    +  <property id="targetReadabilityFK" type="integer">
    +    <description>The default flesch-kincaid readability target, the zero switches the target off.</description>
    +    <value>0</value>
    +  </property>
    +
    +  <property id="targetReadabilityGF" type="integer">
    +    <description>The default gunning fog readability target, the zero switches the target off.</description>
    +    <value>0</value>
    +  </property>
    +
    +  <property id="targetMaxChapterCount" type="integer">
    +    <description>The default max chapter count target, the zero switches the target off.</description>
    +    <value>0</value>
    +  </property>
    +
    +  <property id="targetShowMessageWhenMaxChapterCountExceeded" type="boolean">
    +    <description>Whether a message should be shown when the max chapter word count target is exceeded.</description>
    +    <value>false</value>
    +  </property>
    +
    +  <property id="targetShowMessageWhenSessionTargetReached" type="boolean">
    +    <description>Whether a message should be shown when a session target is reached.</description>
    +    <value>false</value>
    +  </property>
    +
     </properties>
    diff --git a/src/com/quollwriter/Constants.java b/src/com/quollwriter/Constants.java
    index ad69a82..77efff2 100644
    --- a/src/com/quollwriter/Constants.java
    +++ b/src/com/quollwriter/Constants.java
    @@ -3,6 +3,14 @@ package com.quollwriter;
     public class Constants
     {
    
    +    public static final int SEC_IN_MILLIS = 1000;
    +
    +    public static final int MIN_IN_MILLIS = 60 * SEC_IN_MILLIS;
    +
    +    public static final int HOUR_IN_MILLIS = 60 * MIN_IN_MILLIS;
    +
    +    public static final long DAY_IN_MILLIS = 24 * HOUR_IN_MILLIS;
    +
         public static final int ICON_MENU = 1;
    
         public static final int ICON_TOOLBAR = 2;
    @@ -185,6 +193,8 @@ public class Constants
    
         public static final String EDITOR_ALIGNMENT_PROPERTY_NAME = "editorAlignment";
    
    +    public static final String EDITOR_TEXT_BORDER_PROPERTY_NAME = "editorTextBorder";
    +
         public static final String OPEN_LAST_EDITED_PROJECT_PROPERTY_NAME = "openLastEditedProject";
    
         public static final String SHOW_LANDING_ON_START_PROPERY_NAME = "showLandingOnStart";
    @@ -277,6 +287,10 @@ public class Constants
    
         public static final String FULL_SCREEN_EDITOR_ALIGNMENT_PROPERTY_NAME = "fullScreenEditorAlignment";
    
    +    public static final String FULL_SCREEN_EDITOR_TEXT_BORDER_PROPERTY_NAME = "fullScreenEditorTextBorder";
    +
    +    public static final String FULL_SCREEN_SHOW_TIME_WORD_COUNT_PROPERTY_NAME = "fullScreenShowTimeWordCount";
    +
         public static final String PLAY_SOUND_ON_KEY_STROKE_PROPERTY_NAME = "playSoundOnKeyStroke";
    
         public static final String KEY_STROKE_SOUND_FILE_PROPERTY_NAME = "keyStrokeSoundFile";
    @@ -380,6 +394,19 @@ public class Constants
    
         public static final String BACKUPS_TO_KEEP_COUNT_PROPERTY_NAME = "backupsToKeepCount";
    
    +    public static final String TARGET_SESSION_WRITING_PROPERTY_NAME = "targetSessionWriting";
    +    public static final String TARGET_DAILY_WRITING_PROPERTY_NAME = "targetDailyWriting";
    +    public static final String TARGET_WEEKLY_WRITING_PROPERTY_NAME = "targetWeeklyWriting";
    +    public static final String TARGET_MONTHLY_WRITING_PROPERTY_NAME = "targetMonthlyWriting";
    +    public static final String TARGET_READABILITY_GF_PROPERTY_NAME = "targetReadabilityGF";
    +    public static final String TARGET_READABILITY_FK_PROPERTY_NAME = "targetReadabilityFK";
    +    public static final String TARGET_MAX_CHAPTER_COUNT_PROPERTY_NAME = "targetMaxChapterCount";
    +    public static final String TARGET_SHOW_MESSAGE_WHEN_MAX_CHAPTER_COUNT_EXCEEDED_PROPERTY_NAME = "targetShowMessageWhenMaxChapterCountExceeded";
    +    public static final String TARGET_SHOW_MESSAGE_WHEN_SESSION_TARGET_REACHED_PROPERTY_NAME = "targetShowMessageWhenSessionTargetReached";
    +    public static final String TARGET_DAILY_TARGET_REACHED_POPUP_SHOWN_DATE = "targetDailyTargetReachedPopupShownDate";
    +    public static final String TARGET_WEEKLY_TARGET_REACHED_POPUP_SHOWN_DATE = "targetWeeklyTargetReachedPopupShownDate";
    +    public static final String TARGET_MONTHLY_TARGET_REACHED_POPUP_SHOWN_DATE = "targetMonthlyTargetReachedPopupShownDate";
    +
         public static final String PROMPTS_EXCLUDE_FILE = "prompts-exclude.txt";
         public static final String USER_PROMPTS_FILE = "own-prompts.xml";
    
    @@ -596,6 +623,7 @@ public class Constants
         public static final String DATE_ICON_NAME = "date";
         public static final String STAR_ICON_NAME = "star";
         public static final String SORT_ICON_NAME = "sort";
    +    public static final String TARGET_ICON_NAME = "goals";
    
         public static final String SHOW_FIND_ACTION = "find-show";
    
    diff --git a/src/com/quollwriter/Environment.java b/src/com/quollwriter/Environment.java
    index 51badfc..0862488 100644
    --- a/src/com/quollwriter/Environment.java
    +++ b/src/com/quollwriter/Environment.java
    @@ -119,7 +119,7 @@ public class Environment
         private static boolean upgradeRequired = false;
    
         private static DecimalFormat numFormat = new DecimalFormat ("###,###");
    -    private static DecimalFormat floatNumFormat = new DecimalFormat ("###,###.0");
    +    private static DecimalFormat floatNumFormat = new DecimalFormat ("###,##0.0");
    
         private static Map<String, Image> backgroundImages = new HashMap ();
    
    @@ -150,7 +150,10 @@ public class Environment
         private static boolean playSoundOnKeyStroke = false;
         private static Clip keyStrokeSound = null;
    
    -    private static Session userSession = null;
    +    private static UserSession userSession = null;
    +    private static TargetsData targets = null;
    +
    +    private static java.util.Timer generalTimer = null;
    
         static
         {
    @@ -1161,6 +1164,18 @@ public class Environment
         private static void closeDown ()
         {
    
    +        Environment.generalTimer.cancel ();
    +        Environment.generalTimer.purge ();
    +
    +        Environment.generalTimer = null;
    +
    +        if (Environment.landingViewer != null)
    +        {
    +
    +            Environment.removeProjectInfoChangedListener (Environment.landingViewer);
    +
    +        }
    +
             if (Environment.openProjects.size () == 0)
             {
    
    @@ -1175,7 +1190,7 @@ public class Environment
                     Environment.projectInfoManager.addSession (Environment.userSession);
    
                 } catch (Exception e) {
    -                e.printStackTrace ();
    +
                     Environment.logError ("Unable to add session",
                                           e);
    
    @@ -1247,7 +1262,7 @@ public class Environment
    
             }
    
    -        Environment.userSession.updateSessionWordCount (pv.getSessionWordCount ());
    +        Environment.userSession.updateCurrentSessionWordCount (pv.getSessionWordCount ());
    
             if (Environment.userProperties.getPropertyAsBoolean (Constants.SHOW_PROJECTS_WINDOW_WHEN_NO_OPEN_PROJECTS_PROPERTY_NAME))
             {
    @@ -3546,6 +3561,10 @@ public class Environment
             Environment.defaultObjectProperties.put (Project.OBJECT_TYPE,
                                                      sysDefProjProps);
    
    +        // Start the timer, it is done here so that any other code that needs it can start running things
    +        // straightaway.
    +        Environment.generalTimer = new java.util.Timer (true);
    +
             // Load the default object type names.
             try
             {
    @@ -3753,26 +3772,22 @@ public class Environment
    
             }
    
    -        // Set up the importers in the background.
    -        Thread t = new Thread (new Runner ()
    +        Environment.schedule (new TimerTask ()
             {
    -
    +
    +            @Override
                 public void run ()
                 {
    +
    +                Thread.currentThread ().setPriority (Thread.MIN_PRIORITY);
    
                     Importer.init ();
    -/*
    -                UIUtils.getFontsComboBox (null,
    -                                          null);
    -*/
    -            }
    
    -        });
    -
    -        t.setDaemon (true);
    -        t.setPriority (Thread.MIN_PRIORITY);
    +            }
    
    -        t.start ();
    +        },
    +        1 * Constants.SEC_IN_MILLIS,
    +        -1);
    
             Environment.incrStartupProgress ();
    
    @@ -3842,6 +3857,8 @@ public class Environment
             {
    
                 EditorsEnvironment.init ();
    +
    +            Environment.logMessage (Environment.projectInfoManager.getSessions (0) + "");
    
             } catch (Exception e) {
    
    @@ -3871,6 +3888,8 @@ public class Environment
    
             }
    
    +        Environment.targets = new TargetsData (Environment.userProperties);
    +
             Environment.addStartupProgressListener (new PropertyChangedListener ()
             {
    
    @@ -3880,7 +3899,7 @@ public class Environment
                     if (Environment.isStartupComplete ())
                     {
    
    -                    Environment.userSession = new Session ();
    +                    Environment.userSession = new UserSession ();
    
                         Environment.userSession.start (new Date ());
    
    @@ -3912,6 +3931,190 @@ public class Environment
    
                         }
    
    +                    Date d = new Date (System.currentTimeMillis () + (Constants.DAY_IN_MILLIS));
    +
    +                    d = Utils.zeroTimeFields (d);
    +
    +                    Environment.generalTimer.schedule (new TimerTask ()
    +                    {
    +
    +                        @Override
    +                        public void run ()
    +                        {
    +
    +                            try
    +                            {
    +
    +                                Environment.projectInfoManager.addSession (Environment.userSession.createSnapshot ());
    +
    +                            } catch (Exception e) {
    +
    +                                Environment.logError ("Unable to take session snapshot",
    +                                                      e);
    +
    +                            }
    +
    +                        }
    +
    +                    },
    +                    d,
    +                    // Run every 24 hours.  It will drift over the days but not by much.
    +                    Constants.DAY_IN_MILLIS);
    +
    +                    Environment.schedule (new TimerTask ()
    +                    {
    +
    +                        @Override
    +                        public void run ()
    +                        {
    +
    +                            Thread.currentThread ().setPriority (Thread.MIN_PRIORITY);
    +
    +                            if (!Environment.targets.isShowMessageWhenSessionTargetReached ())
    +                            {
    +
    +                                return;
    +
    +                            }
    +
    +                            int sessWC = Environment.userSession.getCurrentSessionWordCount ();
    +
    +                            // See if the user session has exceeded the session count.
    +                            if ((sessWC > Environment.targets.getMySessionWriting ())
    +                                &&
    +                                (Environment.userSession.shouldShowSessionTargetReachedPopup ())
    +                               )
    +                            {
    +
    +                                AbstractViewer viewer = Environment.getFocusedViewer ();
    +
    +                                UIUtils.showMessage ((PopupsSupported) viewer,
    +                                                     "Session writing target reached",
    +                                                     String.format ("You have reached your target of writing <b>%s</b> words in the current session.<br /><br />Well done!",
    +                                                                    Environment.formatNumber (sessWC)),
    +                                                     UIUtils.defaultLeftCornerShowPopupAt);
    +
    +                                Environment.userSession.shownSessionTargetReachedPopup ();
    +
    +                            }
    +
    +                            // Check for the daily count.
    +                            // Get all sessions for today.
    +                            try
    +                            {
    +
    +                                if ((Environment.getPastSessionsWordCount (1) > Environment.targets.getMyDailyWriting ())
    +                                    &&
    +                                    (Environment.userSession.shouldShowDailyTargetReachedPopup ())
    +                                   )
    +                                {
    +
    +                                    AbstractViewer viewer = Environment.getFocusedViewer ();
    +
    +                                    UIUtils.showMessage ((PopupsSupported) viewer,
    +                                                         "Daily writing target reached",
    +                                                         String.format ("You have reached your daily target by writing <b>%s</b> words.<br /><br />Well done!",
    +                                                                        Environment.formatNumber (sessWC)),
    +                                                         UIUtils.defaultLeftCornerShowPopupAt);
    +
    +                                    Environment.userSession.shownDailyTargetReachedPopup ();
    +
    +                                }
    +
    +                            } catch (Exception e) {
    +
    +                                Environment.logError ("Unable to get past session word counts",
    +                                                      e);
    +
    +                            }
    +
    +                            // Get all sessions for this week.
    +                            try
    +                            {
    +
    +                                GregorianCalendar gc = new GregorianCalendar ();
    +
    +                                int fd = gc.getFirstDayOfWeek ();
    +
    +                                int cd = gc.get (Calendar.DAY_OF_WEEK);
    +
    +                                int diff = cd - fd;
    +
    +                                if (diff < 0)
    +                                {
    +
    +                                    diff += 7;
    +
    +                                }
    +
    +                                if ((Environment.getPastSessionsWordCount (diff) > Environment.targets.getMyWeeklyWriting ())
    +                                    &&
    +                                    (Environment.userSession.shouldShowWeeklyTargetReachedPopup ())
    +                                   )
    +                                {
    +
    +                                    AbstractViewer viewer = Environment.getFocusedViewer ();
    +
    +                                    UIUtils.showMessage ((PopupsSupported) viewer,
    +                                                         "Weekly writing target reached",
    +                                                         String.format ("You have reached your weekly target by writing <b>%s</b> words.<br /><br />Well done!",
    +                                                                        Environment.formatNumber (sessWC)),
    +                                                         UIUtils.defaultLeftCornerShowPopupAt);
    +
    +                                    Environment.userSession.shownWeeklyTargetReachedPopup ();
    +
    +                                }
    +
    +                            } catch (Exception e) {
    +
    +                                Environment.logError ("Unable to get past session word counts",
    +                                                      e);
    +
    +                            }
    +
    +                            // Get all sessions for this month.
    +                            try
    +                            {
    +
    +                                GregorianCalendar gc = new GregorianCalendar ();
    +
    +                                int fd = gc.getFirstDayOfWeek ();
    +
    +                                int cd = gc.get (Calendar.DAY_OF_MONTH);
    +
    +                                int diff = cd - fd;
    +
    +                                if ((Environment.getPastSessionsWordCount (diff) > Environment.targets.getMyMonthlyWriting ())
    +                                    &&
    +                                    (Environment.userSession.shouldShowMonthlyTargetReachedPopup ())
    +                                   )
    +                                {
    +
    +                                    AbstractViewer viewer = Environment.getFocusedViewer ();
    +
    +                                    UIUtils.showMessage ((PopupsSupported) viewer,
    +                                                         "Monthly writing target reached",
    +                                                         String.format ("You have reached your monthly target by writing <b>%s</b> words.<br /><br />Well done!",
    +                                                                        Environment.formatNumber (sessWC)),
    +                                                         UIUtils.defaultLeftCornerShowPopupAt);
    +
    +                                    Environment.userSession.shownMonthlyTargetReachedPopup ();
    +
    +                                }
    +
    +                            } catch (Exception e) {
    +
    +                                Environment.logError ("Unable to get past session word counts",
    +                                                      e);
    +
    +                            }
    +
    +                        }
    +
    +                    },
    +                    5 * Constants.SEC_IN_MILLIS,
    +                    Constants.MIN_IN_MILLIS);
    +
                     }
    
                 }
    @@ -3920,6 +4123,31 @@ public class Environment
    
         }
    
    +    private static int getPastSessionsWordCount (int daysPast)
    +                                          throws GeneralException
    +    {
    +
    +        List<Session> sess = Environment.projectInfoManager.getSessions (daysPast);
    +
    +        int c = 0;
    +
    +        Session last = null;
    +
    +        for (Session s : sess)
    +        {
    +
    +            c += s.getWordCount ();
    +
    +            last = s;
    +
    +        }
    +
    +        c += Environment.userSession.getCurrentSessionWordCount ();
    +
    +        return c;
    +
    +    }
    +
         public static UserPropertyHandler getUserPropertyHandler (String userProp)
         {
    
    @@ -6236,16 +6464,84 @@ public class Environment
         public static int getSessionWordCount ()
         {
    
    -        return Environment.userSession.getSessionWordCount ();
    +        return Environment.userSession.getCurrentSessionWordCount ();
    
         }
    
    -    public List<Session> getSessions (int daysPast)
    -                                          throws GeneralException
    +    public static List<Session> getSessions (int daysPast)
    +                                      throws GeneralException
         {
    
             return Environment.projectInfoManager.getSessions (daysPast);
    
         }
    +
    +    public static TargetsData getUserTargets ()
    +    {
    +
    +        return Environment.targets;
    +
    +    }
    +
    +    public static void saveUserTargets ()
    +    {
    +
    +        try
    +        {
    +
    +            Environment.saveUserProperties (Environment.userProperties);
    +
    +        } catch (Exception e) {
    +
    +            Environment.logError ("Unable to update user properties",
    +                                  e);
    +
    +        }
    +
    +    }
    +
    +    public static TargetsData getDefaultUserTargets ()
    +    {
    +
    +        TargetsData td = new TargetsData (Environment.userProperties.getParentProperties ());
    +
    +        return td;
    +
    +    }
    +
    +    /**
    +     * Schedule the task to run after delay and repeat (use -1 or 0 for no repeat).
    +     *
    +     * @param t The task to run.
    +     * @param delay The delay, in millis.
    +     * @param repeat The repeat time, in millis.
    +     */
    +    public static void schedule (TimerTask t,
    +                                 long      delay,
    +                                 long      repeat)
    +    {
    +
    +        if (Environment.generalTimer == null)
    +        {
    +
    +            Environment.generalTimer = new java.util.Timer (true);
    +
    +        }
    +
    +        if (repeat < 1)
    +        {
    +
    +            Environment.generalTimer.schedule (t,
    +                                               delay);
    +
    +        } else {
    +
    +            Environment.generalTimer.schedule (t,
    +                                               delay,
    +                                               repeat);
    +
    +        }
    +
    +    }
    
     }
    diff --git a/src/com/quollwriter/Utils.java b/src/com/quollwriter/Utils.java
    index dd077c0..e3e4c72 100644
    --- a/src/com/quollwriter/Utils.java
    +++ b/src/com/quollwriter/Utils.java
    @@ -1364,5 +1364,72 @@ public class Utils
             return gc.getTime ();
    
         }
    +
    +    public static String formatAsDuration (double duration)
    +    {
    +
    +        long millis = (long) duration;
    +
    +        long days = 0;
    +        long hours = 0;
    +        long mins = 0;
    +
    +        long min = 60 * 1000;
    +        long hour = 60 * min;
    +        long day = 24 * hour;
    +
    +        days = millis / day;
    +
    +        millis = millis - (day * days);
    +
    +        hours = millis / hour;
    +
    +        millis = millis - (hour * hours);
    +
    +        mins = millis / min;
    +
    +        StringBuilder b = new StringBuilder ();
    +
    +        if (days > 0)
    +        {
    +
    +            b.append (days);
    +            b.append ("d");
    +
    +        }
    +
    +        if (hours > 0)
    +        {
    +
    +            if (b.length () > 0)
    +            {
    +
    +                b.append (" ");
    +
    +            }
    +
    +            b.append (hours);
    +            b.append ("h");
    +
    +        }
    +
    +        if (mins > 0)
    +        {
    +
    +            if (b.length () > 0)
    +            {
    +
    +                b.append (" ");
    +
    +            }
    +
    +            b.append (mins);
    +            b.append ("m");
    +
    +        }
    +
    +        return b.toString ();
    +
    +    }
    
     }
    diff --git a/src/com/quollwriter/data/Session.java b/src/com/quollwriter/data/Session.java
    index 8e4c7c7..3952d06 100644
    --- a/src/com/quollwriter/data/Session.java
    +++ b/src/com/quollwriter/data/Session.java
    @@ -8,11 +8,9 @@ import com.quollwriter.ui.*;
     public class Session
     {
    
    -    private int currentSessionWordCount = 0;
    -    private ChapterCounts endWordCount = null;
         private Date startTime = null;
         private Date endTime = null;
    -    private int endOfHourWordCount = 0;
    +    private int wordCount = 0;
    
         public Session ()
         {
    @@ -26,22 +24,31 @@ public class Session
    
             this.startTime = start;
             this.endTime = end;
    -        this.currentSessionWordCount = wc;
    +        this.wordCount = wc;
    
         }
    -
    -    public int getCurrentSessionWordCount ()
    +
    +    @Override
    +    public String toString ()
         {
    
    -        return this.currentSessionWordCount;
    +        return "start: " + this.startTime + ", end: " + this.endTime + ", wordcount: " + this.wordCount;
    
         }
    
    -    @Override
    -    public String toString ()
    +    public long getSessionDuration ()
         {
    
    -        return "start: " + this.startTime + ", end: " + this.endTime + ", wordcount: " + this.currentSessionWordCount;
    +        if (this.startTime == null)
    +        {
    +
    +            return 0;
    +
    +        }
    +
    +        Date e = (this.endTime != null ? this.endTime : new Date ());
    +
    +        return e.getTime () - this.startTime.getTime ();
    
         }
    
    @@ -59,22 +66,25 @@ public class Session
    
         }
    
    -    public int getSessionWordCount ()
    +    public int getWordCount ()
         {
    
    +        return this.wordCount;
    +        /*
    +        //new Exception ().printStackTrace ();
             Map<ProjectInfo, AbstractProjectViewer> pvs = Environment.getOpenProjects ();
    -
    +        System.out.println ("CURRENT: " + this.currentSessionWordCount);
             int c = this.currentSessionWordCount;
    
             for (AbstractProjectViewer pv : pvs.values ())
             {
    -
    +            System.out.println ("ADDING: " + pv.getSessionWordCount ());
                 c += pv.getSessionWordCount ();
    
             }
    
             return c;
    -
    +        */
         }
    
         public void start (Date startTime)
    @@ -90,12 +100,5 @@ public class Session
             this.endTime = endTime;
    
         }
    -
    -    public void updateSessionWordCount (int wordCount)
    -    {
    -
    -        this.currentSessionWordCount += wordCount;
    
    -    }
    -
     }
    \ No newline at end of file
    diff --git a/src/com/quollwriter/data/TargetsData.java b/src/com/quollwriter/data/TargetsData.java
    new file mode 100644
    index 0000000..27d86b3
    --- /dev/null
    +++ b/src/com/quollwriter/data/TargetsData.java
    @@ -0,0 +1,334 @@
    +package com.quollwriter.data;
    +
    +import java.util.Map;
    +import java.util.HashMap;
    +
    +import com.gentlyweb.properties.*;
    +
    +import com.quollwriter.*;
    +
    +public class TargetsData
    +{
    +
    +    public enum Target
    +    {
    +
    +        myDailyWriting ("myDailyWriting"),
    +        mySessionWriting ("mySessionWriting"),
    +        myWeeklyWriting ("myWeeklyWriting"),
    +        myMonthlyWriting ("myMonthlyWriting"),
    +        maxChapterCount ("maxChapterCount"),
    +        readabilityGF ("readabilityGF"),
    +        readabilityFK ("readabilityFK");
    +
    +        private String type = null;
    +
    +        Target (String type)
    +        {
    +
    +            this.type = type;
    +
    +        }
    +
    +        public String getType ()
    +        {
    +
    +            return this.type;
    +
    +        }
    +
    +    }
    +
    +    private Map<Target, Number> targets = new HashMap ();
    +    private Properties props = null;
    +    private boolean targetShowMessageWhenMaxChapterCountExceeded = false;
    +    private boolean targetShowMessageWhenSessionTargetReached = false;
    +
    +    public TargetsData (Properties props)
    +    {
    +
    +        this.props = props;
    +
    +        this.init ();
    +
    +    }
    +
    +    private void init ()
    +    {
    +
    +        int val = this.props.getPropertyAsInt (Constants.TARGET_DAILY_WRITING_PROPERTY_NAME);
    +
    +        if (val < 0)
    +        {
    +
    +            // Get the default.
    +            val = Environment.getDefaultUserTargets ().getMyDailyWriting ();
    +
    +        }
    +
    +        this.targets.put (Target.myDailyWriting,
    +                          val);
    +
    +        val = this.props.getPropertyAsInt (Constants.TARGET_SESSION_WRITING_PROPERTY_NAME);
    +
    +        if (val < 0)
    +        {
    +
    +            // Get the default.
    +            val = Environment.getDefaultUserTargets ().getMySessionWriting ();
    +
    +        }
    +
    +        this.targets.put (Target.mySessionWriting,
    +                          val);
    +
    +        val = this.props.getPropertyAsInt (Constants.TARGET_WEEKLY_WRITING_PROPERTY_NAME);
    +
    +        if (val < 0)
    +        {
    +
    +            // Get the default.
    +            val = Environment.getDefaultUserTargets ().getMyWeeklyWriting ();
    +
    +        }
    +
    +        this.targets.put (Target.myWeeklyWriting,
    +                          val);
    +
    +        val = this.props.getPropertyAsInt (Constants.TARGET_MONTHLY_WRITING_PROPERTY_NAME);
    +
    +        if (val < 0)
    +        {
    +
    +            // Get the default.
    +            val = Environment.getDefaultUserTargets ().getMyMonthlyWriting ();
    +
    +        }
    +
    +        this.targets.put (Target.myMonthlyWriting,
    +                          val);
    +
    +        val = this.props.getPropertyAsInt (Constants.TARGET_READABILITY_FK_PROPERTY_NAME);
    +
    +        if (val < 0)
    +        {
    +
    +            // Get the default.
    +            val = Environment.getDefaultUserTargets ().getReadabilityFK ();
    +
    +        }
    +
    +        this.targets.put (Target.readabilityFK,
    +                          val);
    +
    +        val = this.props.getPropertyAsInt (Constants.TARGET_READABILITY_GF_PROPERTY_NAME);
    +
    +        if (val < 0)
    +        {
    +
    +            // Get the default.
    +            val = Environment.getDefaultUserTargets ().getReadabilityGF ();
    +
    +        }
    +
    +        this.targets.put (Target.readabilityGF,
    +                          val);
    +
    +        val = this.props.getPropertyAsInt (Constants.TARGET_MAX_CHAPTER_COUNT_PROPERTY_NAME);
    +
    +        if (val < 0)
    +        {
    +
    +            // Get the default.
    +            val = Environment.getDefaultUserTargets ().getMaxChapterCount ();
    +
    +        }
    +
    +        this.targets.put (Target.maxChapterCount,
    +                          val);
    +
    +        this.targetShowMessageWhenMaxChapterCountExceeded = this.props.getPropertyAsBoolean (Constants.TARGET_SHOW_MESSAGE_WHEN_MAX_CHAPTER_COUNT_EXCEEDED_PROPERTY_NAME);
    +
    +        this.targetShowMessageWhenSessionTargetReached = this.props.getPropertyAsBoolean (Constants.TARGET_SHOW_MESSAGE_WHEN_SESSION_TARGET_REACHED_PROPERTY_NAME);
    +
    +    }
    +
    +    public void setMaxChapterCount (int v)
    +    {
    +
    +        this.updateIntTarget (Target.maxChapterCount,
    +                              Constants.TARGET_MAX_CHAPTER_COUNT_PROPERTY_NAME,
    +                              v);
    +
    +    }
    +
    +    public int getMaxChapterCount ()
    +    {
    +
    +        return this.getTargetAsInt (Target.maxChapterCount);
    +
    +    }
    +
    +    public void setReadabilityGF (int v)
    +    {
    +
    +        this.updateIntTarget (Target.readabilityGF,
    +                              Constants.TARGET_READABILITY_GF_PROPERTY_NAME,
    +                              v);
    +
    +    }
    +
    +    public boolean isShowMessageWhenSessionTargetReached ()
    +    {
    +
    +        return this.targetShowMessageWhenSessionTargetReached;
    +
    +    }
    +
    +    public void setShowMessageWhenSessionTargetReached (boolean v)
    +    {
    +
    +        this.targetShowMessageWhenSessionTargetReached = v;
    +
    +        this.props.setProperty (Constants.TARGET_SHOW_MESSAGE_WHEN_SESSION_TARGET_REACHED_PROPERTY_NAME,
    +                                new BooleanProperty (Constants.TARGET_SHOW_MESSAGE_WHEN_SESSION_TARGET_REACHED_PROPERTY_NAME,
    +                                                     v));
    +
    +    }
    +
    +    public void setShowMessageWhenMaxChapterCountExceeded (boolean v)
    +    {
    +
    +        this.targetShowMessageWhenMaxChapterCountExceeded = v;
    +
    +        this.props.setProperty (Constants.TARGET_SHOW_MESSAGE_WHEN_MAX_CHAPTER_COUNT_EXCEEDED_PROPERTY_NAME,
    +                                new BooleanProperty (Constants.TARGET_SHOW_MESSAGE_WHEN_MAX_CHAPTER_COUNT_EXCEEDED_PROPERTY_NAME,
    +                                                     v));
    +
    +    }
    +
    +    public boolean isShowMessageWhenMaxChapterCountExceeded ()
    +    {
    +
    +        return this.targetShowMessageWhenMaxChapterCountExceeded;
    +
    +    }
    +
    +    public int getReadabilityGF ()
    +    {
    +
    +        return this.getTargetAsInt (Target.readabilityGF);
    +
    +    }
    +
    +    public void setReadabilityFK (int v)
    +    {
    +
    +        this.updateIntTarget (Target.readabilityFK,
    +                              Constants.TARGET_READABILITY_FK_PROPERTY_NAME,
    +                              v);
    +
    +    }
    +
    +    public int getReadabilityFK ()
    +    {
    +
    +        return this.getTargetAsInt (Target.readabilityFK);
    +
    +    }
    +
    +    public void setMyDailyWriting (int c)
    +    {
    +
    +        this.updateIntTarget (Target.myDailyWriting,
    +                              Constants.TARGET_DAILY_WRITING_PROPERTY_NAME,
    +                              c);
    +
    +    }
    +
    +    public int getMyDailyWriting ()
    +    {
    +
    +        return this.getTargetAsInt (Target.myDailyWriting);
    +
    +    }
    +
    +    public int getMySessionWriting ()
    +    {
    +
    +        return this.getTargetAsInt (Target.mySessionWriting);
    +
    +    }
    +
    +    public void setMySessionWriting (int c)
    +    {
    +
    +        this.updateIntTarget (Target.mySessionWriting,
    +                              Constants.TARGET_SESSION_WRITING_PROPERTY_NAME,
    +                              c);
    +
    +    }
    +
    +    public int getMyWeeklyWriting ()
    +    {
    +
    +        return this.getTargetAsInt (Target.myWeeklyWriting);
    +
    +    }
    +
    +    public void setMyWeeklyWriting (int c)
    +    {
    +
    +        this.updateIntTarget (Target.myWeeklyWriting,
    +                              Constants.TARGET_WEEKLY_WRITING_PROPERTY_NAME,
    +                              c);
    +
    +    }
    +
    +    public int getMyMonthlyWriting ()
    +    {
    +
    +        return this.getTargetAsInt (Target.myMonthlyWriting);
    +
    +    }
    +
    +    public void setMyMonthlyWriting (int c)
    +    {
    +
    +        this.updateIntTarget (Target.myMonthlyWriting,
    +                              Constants.TARGET_MONTHLY_WRITING_PROPERTY_NAME,
    +                              c);
    +
    +    }
    +
    +    public void updateIntTarget (Target t,
    +                                 String propName,
    +                                 int    value)
    +    {
    +
    +        this.targets.put (t,
    +                          value);
    +
    +        this.props.setProperty (propName,
    +                                new IntegerProperty (propName,
    +                                                     this.targets.get (t).intValue ()));
    +
    +    }
    +
    +    public int getTargetAsInt (Target t)
    +    {
    +
    +        Number n = this.targets.get (t);
    +
    +        if (n == null)
    +        {
    +
    +            return 0;
    +
    +        }
    +
    +        return n.intValue ();
    +
    +    }
    +
    +}
    \ No newline at end of file
    diff --git a/src/com/quollwriter/data/UserSession.java b/src/com/quollwriter/data/UserSession.java
    new file mode 100644
    index 0000000..68a6d1a
    --- /dev/null
    +++ b/src/com/quollwriter/data/UserSession.java
    @@ -0,0 +1,314 @@
    +package com.quollwriter.data;
    +
    +import java.util.*;
    +
    +import com.quollwriter.*;
    +import com.quollwriter.ui.*;
    +
    +/**
    + * Holds state information about the user session.
    + */
    +public class UserSession extends Session
    +{
    +
    +    public boolean sessionTargetReachedPopupShown = false;
    +    private int lastSnapshotSessionWordCount = 0;
    +    private Date lastSnapshotSessionEnd = null;
    +    private int currentSessionWordCount = 0;
    +    private Date dailyTargetReachedPopupShownDate = null;
    +    private Date weeklyTargetReachedPopupShownDate = null;
    +    private Date monthlyTargetReachedPopupShownDate = null;
    +
    +    public UserSession ()
    +    {
    +
    +        this.init ();
    +
    +    }
    +
    +    public UserSession (Date start,
    +                        Date end,
    +                        int  wc)
    +    {
    +
    +        super (start,
    +               end,
    +               wc);
    +
    +        this.init ();
    +
    +    }
    +
    +    private void init ()
    +    {
    +
    +        String dv = Environment.getUserProperties ().getProperty (Constants.TARGET_DAILY_TARGET_REACHED_POPUP_SHOWN_DATE);
    +
    +        if (dv != null)
    +        {
    +
    +            try
    +            {
    +
    +                this.dailyTargetReachedPopupShownDate = new Date (Long.parseLong (dv));
    +
    +            } catch (Exception e) {
    +
    +                Environment.logError ("Unable to parse daily target reached popup shown date",
    +                                      e);
    +
    +            }
    +
    +        }
    +
    +        dv = Environment.getUserProperties ().getProperty (Constants.TARGET_WEEKLY_TARGET_REACHED_POPUP_SHOWN_DATE);
    +
    +        if (dv != null)
    +        {
    +
    +            try
    +            {
    +
    +                this.weeklyTargetReachedPopupShownDate = new Date (Long.parseLong (dv));
    +
    +            } catch (Exception e) {
    +
    +                Environment.logError ("Unable to parse weekly target reached popup shown date",
    +                                      e);
    +
    +            }
    +
    +        }
    +
    +        dv = Environment.getUserProperties ().getProperty (Constants.TARGET_MONTHLY_TARGET_REACHED_POPUP_SHOWN_DATE);
    +
    +        if (dv != null)
    +        {
    +
    +            try
    +            {
    +
    +                this.monthlyTargetReachedPopupShownDate = new Date (Long.parseLong (dv));
    +
    +            } catch (Exception e) {
    +
    +                Environment.logError ("Unable to parse monthly target reached popup shown date",
    +                                      e);
    +
    +            }
    +
    +        }
    +
    +    }
    +
    +    public void shownDailyTargetReachedPopup ()
    +    {
    +
    +        Date d = Utils.zeroTimeFields (new Date ());
    +
    +        this.dailyTargetReachedPopupShownDate = d;
    +
    +        try
    +        {
    +
    +            // Set a user property.
    +            Environment.setUserProperty (Constants.TARGET_DAILY_TARGET_REACHED_POPUP_SHOWN_DATE,
    +                                         String.valueOf (d.getTime ()));
    +
    +        } catch (Exception e) {
    +
    +            Environment.logError ("Unable to set daily target reached popup shown date",
    +                                  e);
    +
    +        }
    +
    +    }
    +
    +    public boolean shouldShowDailyTargetReachedPopup ()
    +    {
    +
    +        if (this.dailyTargetReachedPopupShownDate != null)
    +        {
    +
    +            Date d = Utils.zeroTimeFields (new Date ());
    +
    +            return d.after (this.dailyTargetReachedPopupShownDate);
    +
    +        }
    +
    +        return true;
    +
    +    }
    +
    +    private Date getWeekDate ()
    +    {
    +
    +        GregorianCalendar gc = new GregorianCalendar ();
    +
    +        gc.set (Calendar.DAY_OF_WEEK,
    +                gc.getFirstDayOfWeek ());
    +
    +        Date d = Utils.zeroTimeFields (gc.getTime ());
    +
    +        return d;
    +
    +    }
    +
    +    public void shownWeeklyTargetReachedPopup ()
    +    {
    +
    +        Date d = this.getWeekDate ();
    +
    +        this.weeklyTargetReachedPopupShownDate = d;
    +
    +        try
    +        {
    +
    +            // Set a user property.
    +            Environment.setUserProperty (Constants.TARGET_WEEKLY_TARGET_REACHED_POPUP_SHOWN_DATE,
    +                                         String.valueOf (d.getTime ()));
    +
    +        } catch (Exception e) {
    +
    +            Environment.logError ("Unable to set weekly target reached popup shown date",
    +                                  e);
    +
    +        }
    +
    +    }
    +
    +    public boolean shouldShowWeeklyTargetReachedPopup ()
    +    {
    +
    +        if (this.weeklyTargetReachedPopupShownDate != null)
    +        {
    +
    +            Date d = this.getWeekDate ();
    +
    +            return d.after (this.weeklyTargetReachedPopupShownDate);
    +
    +        }
    +
    +        return true;
    +
    +    }
    +
    +    private Date getMonthDate ()
    +    {
    +
    +        GregorianCalendar gc = new GregorianCalendar ();
    +
    +        gc.set (Calendar.DAY_OF_MONTH,
    +                1);
    +
    +        Date d = Utils.zeroTimeFields (gc.getTime ());
    +
    +        return d;
    +
    +    }
    +
    +    public void shownMonthlyTargetReachedPopup ()
    +    {
    +
    +        Date d = this.getMonthDate ();
    +
    +        this.monthlyTargetReachedPopupShownDate = d;
    +
    +        try
    +        {
    +
    +            // Set a user property.
    +            Environment.setUserProperty (Constants.TARGET_MONTHLY_TARGET_REACHED_POPUP_SHOWN_DATE,
    +                                         String.valueOf (d.getTime ()));
    +
    +        } catch (Exception e) {
    +
    +            Environment.logError ("Unable to set monthly target reached popup shown date",
    +                                  e);
    +
    +        }
    +
    +    }
    +
    +    public boolean shouldShowMonthlyTargetReachedPopup ()
    +    {
    +
    +        if (this.monthlyTargetReachedPopupShownDate != null)
    +        {
    +
    +            Date d = this.getMonthDate ();
    +
    +            return d.after (this.monthlyTargetReachedPopupShownDate);
    +
    +        }
    +
    +        return true;
    +
    +    }
    +
    +    public void shownSessionTargetReachedPopup ()
    +    {
    +
    +        this.sessionTargetReachedPopupShown = true;
    +
    +    }
    +
    +    public boolean shouldShowSessionTargetReachedPopup ()
    +    {
    +
    +        return !this.sessionTargetReachedPopupShown;
    +
    +    }
    +
    +    public String toString ()
    +    {
    +
    +        return super.toString () + ", lastCurrent: " + this.currentSessionWordCount + ", current: " + this.getCurrentSessionWordCount ();
    +
    +    }
    +
    +    public void updateCurrentSessionWordCount (int wordCount)
    +    {
    +
    +        this.currentSessionWordCount += wordCount;
    +
    +    }
    +
    +    public int getCurrentSessionWordCount ()
    +    {
    +
    +        //new Exception ().printStackTrace ();
    +        Map<ProjectInfo, AbstractProjectViewer> pvs = Environment.getOpenProjects ();
    +
    +        int c = this.currentSessionWordCount;
    +
    +        for (AbstractProjectViewer pv : pvs.values ())
    +        {
    +
    +            c += pv.getSessionWordCount ();
    +
    +        }
    +
    +        return c;
    +
    +    }
    +
    +    public UserSession createSnapshot ()
    +    {
    +
    +        int wc = this.getCurrentSessionWordCount () - this.lastSnapshotSessionWordCount;
    +
    +        Date end = new Date ();
    +
    +        UserSession s = new UserSession ((this.lastSnapshotSessionEnd != null ? this.lastSnapshotSessionEnd : this.getStart ()),
    +                                         end,
    +                                         wc);
    +
    +        this.lastSnapshotSessionEnd = end;
    +        this.lastSnapshotSessionWordCount = wc;
    +
    +        return s;
    +
    +    }
    +
    +}
    \ No newline at end of file
    diff --git a/src/com/quollwriter/db/ProjectInfoObjectManager.java b/src/com/quollwriter/db/ProjectInfoObjectManager.java
    index bc7edd1..fa0795c 100644
    --- a/src/com/quollwriter/db/ProjectInfoObjectManager.java
    +++ b/src/com/quollwriter/db/ProjectInfoObjectManager.java
    @@ -168,7 +168,7 @@ public class ProjectInfoObjectManager extends ObjectManager
                 List params = new ArrayList ();
                 params.add (s.getStart ());
                 params.add (s.getEnd ());
    -            params.add (s.getCurrentSessionWordCount ());
    +            params.add (s.getWordCount ());
    
                 this.executeStatement ("INSERT INTO session (start, end, wordcount) VALUES (?, ?, ?)",
                                        params,
    @@ -216,11 +216,14 @@ public class ProjectInfoObjectManager extends ObjectManager
    
                 String whereDays = "";
    
    -            if (daysPast != 0)
    +            // 0 means today.
    +            // -1 means all time
    +            // 1 means yesterday
    +            if (daysPast > -1)
                 {
    
    -                whereDays = " AND start > DATEADD ('DAY', ?, CURRENT_DATE) ";
    -                params.add (daysPast);
    +                whereDays = " AND start >= DATEADD ('DAY', ?, CURRENT_DATE) ";
    +                params.add (-1 * daysPast);
    
                 }
    
    @@ -231,6 +234,8 @@ public class ProjectInfoObjectManager extends ObjectManager
    
                 List<Session> ret = new ArrayList ();
    
    +            Session last = null;
    +
                 while (rs.next ())
                 {
    
    @@ -240,6 +245,28 @@ public class ProjectInfoObjectManager extends ObjectManager
                                              rs.getTimestamp (ind++), // end
                                              rs.getInt (ind++)); // word count
    
    +                if (last != null)
    +                {
    +
    +                    // If the time difference less than 2s?
    +                    if ((s.getStart ().getTime () - last.getEnd ().getTime ()) < 2 * Constants.SEC_IN_MILLIS)
    +                    {
    +
    +                        Session _s = new Session (last.getStart (),
    +                                                  s.getEnd (),
    +                                                  s.getWordCount () + last.getWordCount ());
    +
    +                        // Merge the two together.
    +                        ret.remove (last);
    +
    +                        s = _s;
    +
    +                    }
    +
    +                }
    +
    +                last = s;
    +
                     ret.add (s);
    
                 }
    diff --git a/src/com/quollwriter/editors/ui/EditorProjectViewer.java b/src/com/quollwriter/editors/ui/EditorProjectViewer.java
    index aff2c77..05a6900 100644
    --- a/src/com/quollwriter/editors/ui/EditorProjectViewer.java
    +++ b/src/com/quollwriter/editors/ui/EditorProjectViewer.java
    @@ -1343,8 +1343,8 @@ public class EditorProjectViewer extends AbstractProjectViewer
    
         }
    
    -    protected void addNameChangeListener (final NamedObject n,
    -                                          final QuollPanel  qp)
    +    protected void addNameChangeListener (final NamedObject             n,
    +                                          final ProjectObjectQuollPanel qp)
         {
    
             final EditorProjectViewer _this = this;
    diff --git a/src/com/quollwriter/editors/ui/EditorsUIUtils.java b/src/com/quollwriter/editors/ui/EditorsUIUtils.java
    index dfd3ccf..6932878 100644
    --- a/src/com/quollwriter/editors/ui/EditorsUIUtils.java
    +++ b/src/com/quollwriter/editors/ui/EditorsUIUtils.java
    @@ -30,6 +30,7 @@ import com.quollwriter.editors.ui.sidebars.*;
     import com.quollwriter.data.*;
     import com.quollwriter.data.editors.*;
     import com.quollwriter.ui.*;
    +import com.quollwriter.ui.panels.*;
     import com.quollwriter.ui.renderers.*;
     import com.quollwriter.ui.components.QPopup;
     import com.quollwriter.ui.components.ImagePanel;
    @@ -1512,7 +1513,7 @@ public class EditorsUIUtils
                     for (Chapter c : chapters)
                     {
    
    -                    QuollPanel qp = viewer.getQuollPanelForObject (c);
    +                    AbstractEditorPanel qp = viewer.getEditorForChapter (c);
    
                         if (qp != null)
                         {
    diff --git a/src/com/quollwriter/editors/ui/SendProjectWizard.java b/src/com/quollwriter/editors/ui/SendProjectWizard.java
    index 1107b5b..3b8b7fd 100644
    --- a/src/com/quollwriter/editors/ui/SendProjectWizard.java
    +++ b/src/com/quollwriter/editors/ui/SendProjectWizard.java
    @@ -25,6 +25,7 @@ import com.quollwriter.*;
     import com.quollwriter.data.editors.*;
     import com.quollwriter.data.*;
     import com.quollwriter.ui.*;
    +import com.quollwriter.ui.panels.*;
     import com.quollwriter.editors.*;
     import com.quollwriter.editors.messages.*;
    
    @@ -121,11 +122,11 @@ public class SendProjectWizard extends Wizard<AbstractProjectViewer>
                 err = "Please select at least 1 {chapter}.";
    
             }
    -
    +
             for (Chapter c : chapters)
             {
    
    -            QuollPanel qp = this.viewer.getQuollPanelForObject (c);
    +            AbstractEditorPanel qp = this.viewer.getEditorForChapter (c);
    
                 if (qp != null)
                 {
    diff --git a/src/com/quollwriter/editors/ui/panels/AdvertiseProjectPanel.java b/src/com/quollwriter/editors/ui/panels/AdvertiseProjectPanel.java
    index 60dd17f..1b7d583 100644
    --- a/src/com/quollwriter/editors/ui/panels/AdvertiseProjectPanel.java
    +++ b/src/com/quollwriter/editors/ui/panels/AdvertiseProjectPanel.java
    @@ -53,7 +53,7 @@ import com.quollwriter.ui.components.ScrollableBox;
     import com.quollwriter.ui.components.ActionAdapter;
     import com.quollwriter.ui.components.ImagePanel;
    
    -public class AdvertiseProjectPanel extends QuollPanel
    +public class AdvertiseProjectPanel extends QuollPanel<AbstractViewer>
     {
    
         public static final String PANEL_ID = "advertiseproject";
    @@ -73,12 +73,11 @@ public class AdvertiseProjectPanel extends QuollPanel
    
         private Map<String, FormItem> formItems = new LinkedHashMap ();
    
    -    public AdvertiseProjectPanel (AbstractProjectViewer pv)
    +    public AdvertiseProjectPanel (AbstractViewer pv)
                                throws GeneralException
         {
    
    -        super (pv,
    -               pv.getProject ());
    +        super (pv);
    
         }
    
    @@ -135,7 +134,7 @@ public class AdvertiseProjectPanel extends QuollPanel
    
             EditorProject proj = null; //this.projectViewer.getProject ().getEditorProject ();
    
    -        String title = this.projectViewer.getProject ().getName ();
    +        String title = ""; //this.projectViewer.getProject ().getName ();
             String desc = null;
             Set<String> selectedGenres = null;
             String wcLength = null;
    @@ -650,7 +649,7 @@ System.out.println ("CREATED/SAVED PROJECT");
         {
    
             JTextPane t = UIUtils.createHelpTextPane (text,
    -                                                  this.projectViewer);
    +                                                  this.viewer);
             t.setBorder (new EmptyBorder (0,
                                           5,
                                           10,
    diff --git a/src/com/quollwriter/editors/ui/panels/RegisterAsAnEditorPanel.java b/src/com/quollwriter/editors/ui/panels/RegisterAsAnEditorPanel.java
    index 217dc23..e526e05 100644
    --- a/src/com/quollwriter/editors/ui/panels/RegisterAsAnEditorPanel.java
    +++ b/src/com/quollwriter/editors/ui/panels/RegisterAsAnEditorPanel.java
    @@ -52,7 +52,7 @@ import com.quollwriter.ui.components.ScrollableBox;
     import com.quollwriter.ui.components.ActionAdapter;
     import com.quollwriter.ui.components.ImagePanel;
    
    -public class RegisterAsAnEditorPanel extends QuollPanel
    +public class RegisterAsAnEditorPanel extends QuollPanel<AbstractViewer>
     {
    
         public static final String PANEL_ID = "registerasaneditor";
    @@ -69,12 +69,11 @@ public class RegisterAsAnEditorPanel extends QuollPanel
    
         private Map<String, FormItem> formItems = new LinkedHashMap ();
    
    -    public RegisterAsAnEditorPanel (AbstractProjectViewer pv)
    +    public RegisterAsAnEditorPanel (AbstractViewer pv)
                                  throws GeneralException
         {
    
    -        super (pv,
    -               pv.getProject ());
    +        super (pv);
    
         }
    
    @@ -582,7 +581,7 @@ System.out.println ("AV FILE: " + _this.avatarF.getValue ());
         {
    
             JTextPane t = UIUtils.createHelpTextPane (text,
    -                                                  this.projectViewer);
    +                                                  this.viewer);
             t.setBorder (new EmptyBorder (0,
                                           5,
                                           10,
    diff --git a/src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java b/src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
    index 9e6264d..be9d824 100644
    --- a/src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
    +++ b/src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
    @@ -547,7 +547,7 @@ public class EditorProjectSideBar extends AbstractSideBar<EditorProjectViewer>
         public void panelShown (MainPanelEvent ev)
         {
    
    -        this.chapters.setObjectSelectedInTree (ev.getPanel ().getForObject ());
    +        this.chapters.setObjectSelectedInTree (ev.getForObject ());
    
         }
    
    diff --git a/src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java b/src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java
    index 504dac5..ff316e4 100644
    --- a/src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java
    +++ b/src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java
    @@ -198,7 +198,7 @@ public abstract class ProjectSentReceivedSideBar<E extends EditorMessage, V exte
         public void panelShown (MainPanelEvent ev)
         {
    
    -        this.chapters.setObjectSelectedInTree (ev.getPanel ().getForObject ());
    +        this.chapters.setObjectSelectedInTree (ev.getForObject ());
    
         }
    
    diff --git a/src/com/quollwriter/events/MainPanelEvent.java b/src/com/quollwriter/events/MainPanelEvent.java
    index 70ff8c2..22adc5d 100644
    --- a/src/com/quollwriter/events/MainPanelEvent.java
    +++ b/src/com/quollwriter/events/MainPanelEvent.java
    @@ -3,6 +3,8 @@ package com.quollwriter.events;
     import java.util.EventObject;
    
     import com.quollwriter.ui.*;
    +import com.quollwriter.ui.panels.*;
    +import com.quollwriter.data.*;
    
     public class MainPanelEvent extends EventObject
     {
    @@ -26,4 +28,20 @@ public class MainPanelEvent extends EventObject
    
         }
    
    +    public DataObject getForObject ()
    +    {
    +
    +        if (this.panel instanceof ProjectObjectQuollPanel)
    +        {
    +
    +            ProjectObjectQuollPanel p = (ProjectObjectQuollPanel) this.panel;
    +
    +            return p.getForObject ();
    +
    +        }
    +
    +        return null;
    +
    +    }
    +
     }
    \ No newline at end of file
    diff --git a/src/com/quollwriter/events/SideBarEvent.java b/src/com/quollwriter/events/SideBarEvent.java
    index 4b3733a..57a2eb1 100644
    --- a/src/com/quollwriter/events/SideBarEvent.java
    +++ b/src/com/quollwriter/events/SideBarEvent.java
    @@ -3,22 +3,33 @@ package com.quollwriter.events;
     import java.util.EventObject;
    
     import com.quollwriter.ui.sidebars.AbstractSideBar;
    +import com.quollwriter.ui.*;
    
     public class SideBarEvent extends EventObject
     {
    
         private AbstractSideBar sb = null;
    -
    -    public SideBarEvent (Object          source,
    -                         AbstractSideBar sb)
    +    private AbstractProjectViewer viewer = null;
    +
    +    public SideBarEvent (AbstractProjectViewer source,
    +                         AbstractSideBar       sb)
         {
    
             super (source);
    
    +        this.viewer = source;
    +
             this.sb = sb;
    
         }
    
    +    public AbstractProjectViewer getViewer ()
    +    {
    +
    +        return this.viewer;
    +
    +    }
    +
         public AbstractSideBar getSideBar ()
         {
    
    diff --git a/src/com/quollwriter/ui/AbstractProjectViewer.java b/src/com/quollwriter/ui/AbstractProjectViewer.java
    index 28ffc4b..522f874 100644
    --- a/src/com/quollwriter/ui/AbstractProjectViewer.java
    +++ b/src/com/quollwriter/ui/AbstractProjectViewer.java
    @@ -59,6 +59,7 @@ import com.quollwriter.ui.actionHandlers.*;
     import com.quollwriter.ui.components.*;
     import com.quollwriter.ui.events.*;
     import com.quollwriter.ui.renderers.*;
    +import com.quollwriter.ui.charts.*;
    
     import com.quollwriter.data.editors.*;
     import com.quollwriter.editors.*;
    @@ -97,7 +98,6 @@ public abstract class AbstractProjectViewer extends AbstractViewer /*JFrame*/ im
         public static final int RENAME_PROJECT_ACTION = 14; // "renameProject";
         public static final int EDIT_PROJECT_PROPERTIES_ACTION = 15; // "editProjectProperties";
         public static final int WARMUP_EXERCISE_ACTION = 26;
    -    public static final int SHOW_STATISTICS_ACTION = 27;
         public static final int CONTACT_SUPPORT_ACTION = 28;
    
         public static final String NAME_CHANGED = "nameChanged";
    @@ -169,7 +169,9 @@ public abstract class AbstractProjectViewer extends AbstractViewer /*JFrame*/ im
    
            private java.util.Timer autoBackupsTimer = null;
            private TimerTask autoSaveTask = null;
    -
    +       private TargetsData targets = null;
    +       private Map<Chapter, Date> chapterWordCountTargetWarned = new HashMap ();
    +
         public AbstractProjectViewer()
         {
    
    @@ -1618,11 +1620,11 @@ public abstract class AbstractProjectViewer extends AbstractViewer /*JFrame*/ im
    
                 this.fsf.showSideBar ();
    
    -            return;
    -
    -        }
    +        } else {
    
    -        this.setUILayout (this.layout);
    +                       this.setUILayout (this.layout);
    +
    +               }
    
             try
             {
    @@ -1640,14 +1642,7 @@ public abstract class AbstractProjectViewer extends AbstractViewer /*JFrame*/ im
             }
    
             this.fireSideBarShownEvent (b);
    -
    -        if (this.fsf != null)
    -        {
    -
    -            this.fsf.showSideBar ();
    -
    -        }
    -
    +
         }
         /*
         public Map getTempOptions ()
    @@ -2114,23 +2109,6 @@ public abstract class AbstractProjectViewer extends AbstractViewer /*JFrame*/ im
                 };
    
             }
    -
    -        if (name == AbstractProjectViewer.SHOW_STATISTICS_ACTION)
    -        {
    -
    -            return new ActionAdapter ()
    -            {
    -
    -                public void actionPerformed (ActionEvent ev)
    -                {
    -
    -                    pv.viewWordCountHistory ();
    -
    -                }
    -
    -            };
    -
    -        }
    
             if (name == AbstractProjectViewer.RENAME_CHAPTER_ACTION)
             {
    @@ -3974,6 +3952,8 @@ public abstract class AbstractProjectViewer extends AbstractViewer /*JFrame*/ im
    
                    this.initChapterCounts ();
    
    +               this.targets = new TargetsData (this.proj.getProperties ());
    +
             Environment.incrStartupProgress ();
    
                    this.proj.setFilePassword (filePassword);
    @@ -4145,7 +4125,7 @@ xxx
                                    ProjectEvent.OPEN);
    
             this.showViewer ();
    -
    +
             // Register ourselves with the environment.
             try
             {
    @@ -4163,8 +4143,312 @@ xxx
    
                    UIUtils.doLater (onOpen);
    
    +               // Check to see if any chapters have overrun the target.
    +               UIUtils.doLater (new ActionListener ()
    +               {
    +
    +                       @Override
    +                       public void actionPerformed (ActionEvent ev)
    +                       {
    +
    +                               try
    +                               {
    +
    +                                       int wc = _this.getProjectTargets ().getMaxChapterCount ();
    +
    +                                       if ((wc > 0)
    +                                               &&
    +                                               (_this.getProjectTargets ().isShowMessageWhenMaxChapterCountExceeded ())
    +                                          )
    +                                       {
    +
    +                                               Book b = _this.proj.getBooks ().get (0);
    +
    +                                               Set<Chapter> over = new LinkedHashSet ();
    +
    +                                               java.util.List<Chapter> chapters = b.getChapters ();
    +
    +                                               Date d = new Date ();
    +
    +                                               for (Chapter c : chapters)
    +                                               {
    +
    +                                                   ChapterCounts cc = _this.getChapterCounts (c);
    +
    +                                                       if (cc.wordCount > wc)
    +                                                       {
    +
    +                                                               over.add (c);
    +
    +                                                               _this.chapterWordCountTargetWarned.put (c,
    +                                                                                                                                           d);
    +
    +                                                       }
    +
    +                                               }
    +
    +                                               int s = over.size ();
    +
    +                                               if (s > 0)
    +                                               {
    +
    +                                                       final JLabel l = UIUtils.createLabel (null,
    +                                                                                                                                 null,
    +                                                                                                                                 null);
    +
    +                                                       final Notification n = _this.addNotification (l,
    +                                                                                                                                                 Constants.WORDCOUNT_ICON_NAME,
    +                                                                                                                                                 -1);
    +
    +                                                       String text = String.format ("%s {chapter}%s over the word count maximum of <b>%s</b> words, click to view the {chapter}%s.",
    +                                                                                                                Environment.formatNumber (s),
    +                                                                                                                (s == 1 ? " is" : "s are"),
    +                                                                                                                Environment.formatNumber (wc),
    +                                                                                                                (s == 1 ? "" : "s"));
    +
    +                                                       l.setText (text);
    +
    +                                                       UIUtils.makeClickable (l,
    +                                                                                                  new ActionListener ()
    +                                                                                                  {
    +
    +                                                                                                               @Override
    +                                                                                                               public void actionPerformed (ActionEvent ev)
    +                                                                                                               {
    +
    +                                                                                                                       Targets.showChaptersOverWordTarget (_this,
    +                                                                                                                                                                                               null);
    +
    +                                                                                                                       n.removeNotification ();
    +
    +                                                                                                               }
    +
    +                                                                                                  });
    +
    +                                               }
    +
    +                                       }
    +
    +                               } catch (Exception e) {
    +
    +                                       Environment.logError ("Unable to display chapters over target notification",
    +                                                                                 e);
    +
    +                               }
    +
    +                       }
    +
    +               });
    +
    +               this.schedule (new TimerTask ()
    +               {
    +
    +                       @Override
    +                       public void run ()
    +                       {
    +
    +                               try
    +                               {
    +
    +                                       int wc = _this.getProjectTargets ().getMaxChapterCount ();
    +
    +                                       if ((wc > 0)
    +                                               &&
    +                                               (_this.getProjectTargets ().isShowMessageWhenMaxChapterCountExceeded ())
    +                                          )
    +                                       {
    +
    +                                               Book b = _this.proj.getBooks ().get (0);
    +
    +                                               final Set<Chapter> over = new LinkedHashSet ();
    +
    +                                               java.util.List<Chapter> chapters = b.getChapters ();
    +
    +                                               Date d = new Date ();
    +
    +                                               // 15 minutes ago.
    +                                               long last = System.currentTimeMillis () - 15 * 60 * 1000;
    +
    +                                               for (Chapter c : chapters)
    +                                               {
    +
    +                                                   ChapterCounts cc = _this.getChapterCounts (c);
    +
    +                                                       final Chapter _c = c;
    +
    +                                                       if (cc.wordCount > wc)
    +                                                       {
    +
    +                                                               if (!_this.chapterWordCountTargetWarned.containsKey (c))
    +                                                               {
    +
    +                                                                       _this.chapterWordCountTargetWarned.put (c,
    +                                                                                                                                                       new Date ());
    +
    +                                                                       over.add (c);
    +
    +                                                               }
    +
    +                                                       } else {
    +
    +                                                               Date od = _this.chapterWordCountTargetWarned.get (c);
    +
    +                                                               // Only remove if it's been 15 minutes since we last warned the user.
    +                                                               // This provides a buffer so that they aren't constantly nagged about
    +                                                               // it going over, for example if they've deleted/edited a sentence, removed
    +                                                               // a word or two to go below the target then added some back in.
    +                                                               if ((od != null)
    +                                                                       &&
    +                                                                       (od.getTime () < last)
    +                                                                  )
    +                                                               {
    +
    +                                                                       _this.chapterWordCountTargetWarned.remove (c);
    +
    +                                                               }
    +
    +                                                       }
    +
    +                                               }
    +
    +                                               if (over.size () > 0)
    +                                               {
    +
    +                                                       // Show a message.
    +                                                       UIUtils.doLater (new ActionListener ()
    +                                                       {
    +
    +                                                               @Override
    +                                                               public void actionPerformed (ActionEvent ev)
    +                                                               {
    +
    +                                                                       final int s = over.size ();
    +
    +                                                                       final QPopup popup = UIUtils.createClosablePopup (String.format ("{Chapter}%s over word count target",
    +                                                                                                                                                                                                        (s == 1 ? "" : "s")),
    +                                                                                                                                                                         Environment.getIcon (Constants.WORDCOUNT_ICON_NAME,
    +                                                                                                                                                                                                                  Constants.ICON_POPUP),
    +                                                                                                                                                                         null);
    +
    +                                                                       String text = String.format ("%s {chapter}%s over the target word count, click to view them.",
    +                                                                                                                                Environment.formatNumber (s),
    +                                                                                                                                (s == 1 ? " is" : "s are"));
    +
    +                                                                       if (s == 1)
    +                                                                       {
    +
    +                                                                               Chapter c = over.iterator ().next ();
    +
    +                                                                               text = String.format ("{Chapter} <b>%s</b> is over the target word count, click to view it.",
    +                                                                                                                         c.getName ());
    +
    +                                                                       }
    +
    +                                                                       Box content = new Box (BoxLayout.Y_AXIS);
    +
    +                                                                       ActionListener showChapter = new ActionListener ()
    +                                                                       {
    +
    +                                                                               @Override
    +                                                                               public void actionPerformed (ActionEvent ev)
    +                                                                               {
    +
    +                                                                                       Targets.showChaptersOverWordTarget (_this,
    +                                                                                                                                                               null);
    +
    +                                                                                       popup.removeFromParent ();
    +
    +                                                                               }
    +
    +                                                                       };
    +
    +                                                                       JLabel l = UIUtils.createLabel (text,
    +                                                                                                                                       null,
    +                                                                                                                                       showChapter);
    +
    +                                                                       l.setBorder (UIUtils.createPadding (0, 0, 10, 0));
    +
    +                                                                       content.setBorder (UIUtils.createPadding (10, 10, 10, 10));
    +
    +                                                                       content.add (l);
    +
    +                                                                       JButton cb = UIUtils.createButton ("Close",
    +                                                                                                                                          null);
    +
    +                                                                       JButton sb = UIUtils.createButton ("Show detail",
    +                                                                                                                                          null);
    +
    +                                                                       sb.addActionListener (showChapter);
    +
    +                                                                       JButton[] buts = { sb, cb };
    +
    +                                                                       JComponent bs = UIUtils.createButtonBar2 (buts,
    +                                                                                                                                                         Component.CENTER_ALIGNMENT);
    +                                                                       bs.setAlignmentX (Component.LEFT_ALIGNMENT);
    +
    +                                                                       content.add (bs);
    +
    +                                                                       cb.addActionListener (popup.getCloseAction ());
    +                                                                       popup.setRemoveOnClose (true);
    +
    +                                                                       popup.setContent (content);
    +
    +                                                                       popup.setDraggable (_this);
    +
    +                                                                       popup.resize ();
    +
    +                                                                       _this.showPopupAt (popup,
    +                                                                                                          new Point (10, 10),
    +                                                                                                          false);
    +
    +                                                               }
    +
    +                                                       });
    +
    +                                               }
    +
    +                                       }
    +
    +                               } catch (Exception e) {
    +
    +                                       Environment.logError ("Unable to determine chapters that are over target",
    +                                                                                 e);
    +
    +                               }
    +
    +                       }
    +
    +               },
    +               30 * 1000,
    +               5 * 1000);
    +
         }
    
    +       public void saveProjectTargets ()
    +       {
    +
    +               try
    +               {
    +
    +                       this.saveObject (this.proj,
    +                                                        false);
    +
    +               } catch (Exception e) {
    +
    +                       Environment.logError ("Unable to update project targets",
    +                                                                 e);
    +
    +               }
    +
    +       }
    +
    +       public TargetsData getProjectTargets ()
    +       {
    +
    +               return this.targets;
    +
    +       }
    +
            private void startAutoBackups ()
            {
    
    @@ -5365,7 +5649,7 @@ xxx
                 if (v.equals ("statistics"))
                 {
    
    -                this.viewWordCountHistory ();
    +                this.viewStatistics ();
    
                     return;
    
    @@ -5383,7 +5667,7 @@ xxx
                 if (v.equals ("wordcounthistory"))
                 {
    
    -                this.viewWordCountHistory ();
    +                this.viewStatistics ();
    
                     return;
    
    @@ -5548,8 +5832,7 @@ xxx
             try
             {
    
    -            ap = new AchievementsPanel (this,
    -                                        this.proj);
    +            ap = new AchievementsPanel (this);
    
                 ap.init ();
    
    @@ -5584,10 +5867,17 @@ xxx
    
             }
    
    -        if (id.equals (WordCountPanel.PANEL_ID))
    +        if (id.equals (StatisticsPanel.PANEL_ID))
             {
    
    -            return this.viewWordCountHistory ();
    +            return this.viewStatistics ();
    +
    +        }
    +
    +        if (id.equals (StatisticsPanel.OLD_WORD_COUNT_PANEL_ID))
    +        {
    +
    +            return this.viewStatistics ();
    
             }
    
    @@ -5670,41 +5960,48 @@ xxx
                 for (QuollPanel qp : this.panels.values ())
                 {
    
    -                if (qp.hasUnsavedChanges ())
    -                {
    -
    -                    boolean showError = true;
    -
    -                    try
    -                    {
    -
    -                        showError = !qp.saveUnsavedChanges ();
    -
    -                    } catch (Exception e)
    -                    {
    -
    -                        Environment.logError ("Unable to save unsaved changes for: " +
    -                                              qp.getForObject (),
    -                                              e);
    -
    -                    }
    -
    -                    if (showError)
    -                    {
    -
    -                        UIUtils.showErrorMessage (this,
    -                                                  "Unable to save: " +
    -                                                  qp.getForObject ().getName () +
    -                                                  ", aborting exit.");
    -
    -                        // Switch to the tab.
    -                        this.viewObject (qp.getForObject ());
    -
    -                        return false;
    -
    -                    }
    -
    -                }
    +                               if (qp instanceof ProjectObjectQuollPanel)
    +                               {
    +
    +                                       ProjectObjectQuollPanel pqp = (ProjectObjectQuollPanel) qp;
    +
    +                                       if (pqp.hasUnsavedChanges ())
    +                                       {
    +
    +                                               boolean showError = true;
    +
    +                                               try
    +                                               {
    +
    +                                                       showError = !pqp.saveUnsavedChanges ();
    +
    +                                               } catch (Exception e)
    +                                               {
    +
    +                                                       Environment.logError ("Unable to save unsaved changes for: " +
    +                                                                                                 pqp.getForObject (),
    +                                                                                                 e);
    +
    +                                               }
    +
    +                                               if (showError)
    +                                               {
    +
    +                                                       UIUtils.showErrorMessage (this,
    +                                                                                                         "Unable to save: " +
    +                                                                                                         pqp.getForObject ().getName () +
    +                                                                                                         ", aborting exit.");
    +
    +                                                       // Switch to the tab.
    +                                                       this.viewObject (pqp.getForObject ());
    +
    +                                                       return false;
    +
    +                                               }
    +
    +                                       }
    +
    +                               }
    
                 }
    
    @@ -5780,24 +6077,14 @@ xxx
    
             }
    
    -        this.dispose ();
    -
                    this.autoBackupsTimer = null;
    
             this.proj = null;
    
             this.dBMan = null;
    -
    -        if (afterClose != null)
    -        {
    -
    -            afterClose.actionPerformed (new ActionEvent (this,
    -                                                         0,
    -                                                         "closed"));
    -
    -        }
    
    -        return true;
    +               return super.close (false,
    +                                                       afterClose);
    
         }
    
    @@ -5827,19 +6114,26 @@ xxx
                 for (QuollPanel qp : this.panels.values ())
                 {
    
    -                if (qp.hasUnsavedChanges ())
    -                {
    -
    -                    hasChanges = true;
    -
    -                    if (qp.getForObject () instanceof NamedObject)
    -                    {
    -
    -                        b.append ("<li>" + UIUtils.getObjectALink ((NamedObject) qp.getForObject ()) + "</li>");
    -
    -                    }
    -
    -                }
    +                               if (qp instanceof ProjectObjectQuollPanel)
    +                               {
    +
    +                                       ProjectObjectQuollPanel pqp = (ProjectObjectQuollPanel) qp;
    +
    +                                       if (pqp.hasUnsavedChanges ())
    +                                       {
    +
    +                                               hasChanges = true;
    +
    +                                               if (pqp.getForObject () instanceof NamedObject)
    +                                               {
    +
    +                                                       b.append ("<li>" + UIUtils.getObjectALink ((NamedObject) pqp.getForObject ()) + "</li>");
    +
    +                                               }
    +
    +                                       }
    +
    +                               }
    
                 }
    
    @@ -6390,7 +6684,8 @@ xxx
             if (qep == null)
             {
    
    -            qep = new BlankQuollPanel (this);
    +            qep = new BlankQuollPanel (this,
    +                                                                          "fullscreen-blank");
    
                 qep.init ();
    
    @@ -6431,7 +6726,8 @@ xxx
             } else
             {
    
    -            this.fsf = new FullScreenFrame (fs);
    +            this.fsf = new FullScreenFrame (fs,
    +                                                                                       this);
    
                 this.fsf.init ();
    
    @@ -6478,7 +6774,7 @@ xxx
             if (this.fsf != null)
             {
    
    -            if (this.fsf.getPanel ().getChild ().getForObject () == n)
    +            if (this.fsf.getCurrentForObject () == n)
                 {
    
                     // Nothing to do, it's already showing, maybe bring to front.
    @@ -6527,7 +6823,8 @@ xxx
                 } else
                 {
    
    -                this.fsf = new FullScreenFrame (fs);
    +                this.fsf = new FullScreenFrame (fs,
    +                                                                                               this);
    
                     this.fsf.init ();
    
    @@ -6544,78 +6841,74 @@ xxx
    
         }
    
    -    public QuollPanel getQuollPanelForObject (DataObject n)
    +    public ProjectObjectQuollPanel getQuollPanelForObject (DataObject n)
         {
    
             for (QuollPanel qp : this.panels.values ())
             {
    
    -            if (qp.getForObject () == n)
    -            {
    -
    -                if (qp instanceof FullScreenQuollPanel)
    -                {
    -
    -                    return ((FullScreenQuollPanel) qp).getChild ();
    -
    -                } else {
    -
    -                    return qp;
    -
    -                }
    +                       ProjectObjectQuollPanel pqp = null;
    +
    +                       if (qp instanceof FullScreenQuollPanel)
    +                       {
    +
    +                               FullScreenQuollPanel fqp = (FullScreenQuollPanel) qp;
    +
    +                               if (fqp.getChild () instanceof ProjectObjectQuollPanel)
    +                               {
    +
    +                                       pqp = (ProjectObjectQuollPanel) fqp.getChild ();
    +
    +                               }
    
    -            }
    -
    +                       }
    +
    +                       // This is getting silly...
    +                       // TODO: Fix this up.
    +                       if (qp instanceof ProjectObjectQuollPanel)
    +                       {
    +
    +                               pqp = (ProjectObjectQuollPanel) qp;
    +
    +                       }
    +
    +                       if ((pqp != null)
    +                               &&
    +                               (pqp.getForObject () == n)
    +                          )
    +                       {
    +
    +                               return pqp;
    +
    +                       }
    +
             }
    -/*
    -        for (int i = 0; i < this.tabs.getTabCount (); i++)
    -        {
    -
    -            Component comp = this.tabs.getComponentAt (i);
    -
    -            if (comp instanceof QuollPanel)
    -            {
    -
    -                QuollPanel qp = (QuollPanel) comp;
    -
    -                if (qp.getForObject () == n)
    -                {
    
    -                    if (qp instanceof FullScreenQuollPanel)
    -                    {
    -
    -                        return ((FullScreenQuollPanel) qp).getChild ();
    -
    -                    } else {
    -
    -                        return qp;
    -
    -                    }
    -
    -                }
    -
    -            }
    -
    -        }
    -*/
             return null;
    
         }
    
    -    public java.util.List<QuollPanel> getAllQuollPanelsForObject (DataObject n)
    +    public java.util.List<ProjectObjectQuollPanel> getAllQuollPanelsForObject (DataObject n)
         {
    
    -        java.util.List<QuollPanel> ret = new ArrayList ();
    +        java.util.List<ProjectObjectQuollPanel> ret = new ArrayList ();
    
             for (QuollPanel qp : this.panels.values ())
             {
    
    -            if (qp.getForObject () == n)
    -            {
    -
    -                ret.add (qp);
    +                       if (qp instanceof ProjectObjectQuollPanel)
    +                       {
    +
    +                               ProjectObjectQuollPanel pqp = (ProjectObjectQuollPanel) qp;
    
    -            }
    +                               if (pqp.getForObject () == n)
    +                               {
    +
    +                                       ret.add (pqp);
    +
    +                               }
    +
    +                       }
    
             }
    
    @@ -6651,7 +6944,7 @@ xxx
    
                 } catch (Exception e) {
    
    -                Environment.logError ("Unable to show: " + qp.getForObject () +
    +                Environment.logError ("Unable to show panel: " + qp +
                                           " in full screen",
                                           e);
    
    @@ -7195,12 +7488,10 @@ xxx
         public void removeAllPanelsForObject (NamedObject n)
         {
    
    -        java.util.List<QuollPanel> panels = this.getAllQuollPanelsForObject (n);
    -
    -        for (QuollPanel p : panels)
    +        for (ProjectObjectQuollPanel p : this.getAllQuollPanelsForObject (n))
             {
    
    -            this.removePanel (p.getPanelId ());
    +            this.removePanel (p);
    
             }
    
    @@ -7218,12 +7509,42 @@ xxx
    
             }
    
    +               // Not sure if this will auto pick the correct method, force it to be sure.
    +               if (p instanceof ProjectObjectQuollPanel)
    +               {
    +
    +                       return this.removePanel ((ProjectObjectQuollPanel) p);
    +
    +               }
    +
             return this.removePanel (p);
    
         }
    
         private boolean removePanel (final QuollPanel p)
         {
    +
    +               p.close ();
    +
    +               String panelId = p.getPanelId ();
    +
    +               int tInd = this.getTabIndexForPanelId (panelId);
    +
    +               if (tInd > -1)
    +               {
    +
    +                       this.tabs.removeTabAt (tInd);
    +
    +               }
    +
    +               this.panels.remove (panelId);
    +
    +               return true;
    +
    +       }
    +
    +    private boolean removePanel (final ProjectObjectQuollPanel p)
    +    {
    
             final AbstractProjectViewer _this = this;
    
    @@ -7252,21 +7573,8 @@ xxx
    
                         }
    
    -                    p.close ();
    -
    -                    String panelId = p.getPanelId ();
    -
    -                    int tInd = _this.getTabIndexForPanelId (panelId);
    -
    -                    if (tInd > -1)
    -                    {
    -
    -                        _this.tabs.removeTabAt (tInd);
    -
    -                    }
    -
    -                    _this.panels.remove (panelId);
    -
    +                                       _this.removePanel ((QuollPanel) p);
    +
                         // Remove all the property changed listeners.
                         java.util.List<PropertyChangedListener> l = p.getObjectPropertyChangedListeners ();
    
    @@ -7405,7 +7713,7 @@ xxx
         public void refreshViewPanel (NamedObject n)
         {
    
    -        QuollPanel p = this.getQuollPanelForObject (n);
    +        ProjectObjectQuollPanel p = this.getQuollPanelForObject (n);
    
             if (p != null)
             {
    @@ -7425,30 +7733,31 @@ xxx
                 (objs.size () > 0))
             {
    
    -            SwingUtilities.invokeLater (new Runner ()
    -                {
    +                       UIUtils.doLater (new ActionListener ()
    +                       {
    
    -                    public void run ()
    -                    {
    +                @Override
    +                               public void actionPerformed (ActionEvent ev)
    +                               {
    
    -                        // For each one determine if it is visible.
    -                        for (NamedObject n : objs)
    -                        {
    +                                       // For each one determine if it is visible.
    +                                       for (NamedObject n : objs)
    +                                       {
    
    -                            QuollPanel qp = _this.getQuollPanelForObject (n);
    +                                               ProjectObjectQuollPanel qp = _this.getQuollPanelForObject (n);
    
    -                            if (qp != null)
    -                            {
    +                                               if (qp != null)
    +                                               {
    
    -                                qp.refresh (n);
    +                                                       qp.refresh (n);
    
    -                            }
    +                                               }
    
    -                        }
    +                                       }
    
    -                    }
    +                               }
    
    -                });
    +            });
    
             }
    
    @@ -7953,22 +8262,42 @@ xxx
    
         }
    
    +       @Override
    +       public boolean showChart (String chartType)
    +                                          throws GeneralException
    +       {
    +
    +               if (this.viewStatistics ())
    +               {
    +
    +                       StatisticsPanel sp = (StatisticsPanel) this.getQuollPanel (StatisticsPanel.PANEL_ID);
    +
    +                       sp.showChart (chartType);
    +
    +                       return true;
    +
    +               }
    +
    +               return false;
    +
    +       }
    +
         /**
          * This is a top-level action so it can handle showing the user a message, it returns a boolean to indicate
          * whether the word count history is viewed.
          */
    -    public boolean viewWordCountHistory ()
    +    public boolean viewStatistics ()
         {
    
             // Check our tabs to see if we are already viewing the word counts, if so then just switch to it instead.
    -        WordCountPanel wcp = (WordCountPanel) this.getQuollPanel (WordCountPanel.PANEL_ID);
    +        StatisticsPanel wcp = (StatisticsPanel) this.getQuollPanel (StatisticsPanel.PANEL_ID);
    
             if (wcp != null)
             {
    
                 this.setPanelVisible (wcp);
    
    -            this.fireProjectEvent (ProjectEvent.WORD_COUNT_HISTORY,
    +            this.fireProjectEvent (ProjectEvent.STATISTICS,
                                        ProjectEvent.SHOW);
    
                 return true;
    @@ -7977,12 +8306,18 @@ xxx
    
             try
             {
    -
    -            wcp = new WordCountPanel (this,
    -                                      this.proj);
    +
    +            wcp = new StatisticsPanel (this,
    +                                                                          new PerChapterWordCountsChart (this),
    +                                                                          new AllWordCountsChart (this),
    +                                                                          new ReadabilityIndicesChart (this),
    +                                                                          new SessionWordCountChart (this),
    +                                                                          new SessionTimeChart (this));
    
                 wcp.init ();
    
    +                       wcp.showChart (PerChapterWordCountsChart.CHART_TYPE);
    +
             } catch (Exception e)
             {
    
    @@ -8000,7 +8335,7 @@ xxx
             this.addPanel (wcp);
    
             // Open the tab :)
    -        return this.viewWordCountHistory ();
    +        return this.viewStatistics ();
    
         }
    
    @@ -8619,5 +8954,48 @@ xxx
             }
    
         }
    +
    +       /**
    +        * Display the targets for the project.
    +        *
    +        */
    +       public void viewTargets ()
    +                      throws GeneralException
    +       {
    +
    +        TargetsSideBar t = new TargetsSideBar (this);
    +
    +        this.addSideBar ("targets",
    +                         t);
    +
    +        this.showSideBar ("targets");
    +
    +       }
    +
    +       public boolean hasUnsavedChapters ()
    +       {
    +
    +        for (QuollPanel qp : this.panels.values ())
    +        {
    +
    +                       if (qp instanceof AbstractEditorPanel)
    +                       {
    +
    +                               AbstractEditorPanel ep = (AbstractEditorPanel) qp;
    +
    +                               if (ep.hasUnsavedChanges ())
    +                               {
    +
    +                                       return true;
    +
    +                               }
    +
    +                       }
    +
    +               }
    +
    +               return false;
    +
    +       }
    
     }
    diff --git a/src/com/quollwriter/ui/AbstractViewer.java b/src/com/quollwriter/ui/AbstractViewer.java
    index 6d13471..4e14f9c 100644
    --- a/src/com/quollwriter/ui/AbstractViewer.java
    +++ b/src/com/quollwriter/ui/AbstractViewer.java
    @@ -81,6 +81,8 @@ public abstract class AbstractViewer extends JFrame implements PopupsSupported,
         public static final int DELETE_PROJECT_ACTION = 13; // "deleteProject";
         public static final int WARMUP_EXERCISE_ACTION = 26;
         public static final int CONTACT_SUPPORT_ACTION = 28;
    +       public static final int SHOW_TARGETS_ACTION = 29;
    +    public static final int SHOW_STATISTICS_ACTION = 27;
    
         public static final String REPORT_BUG_HEADER_CONTROL_ID = "reportBug";
         public static final String CONTACTS_HEADER_CONTROL_ID = "contacts";
    @@ -675,6 +677,9 @@ public abstract class AbstractViewer extends JFrame implements PopupsSupported,
    
         public abstract boolean isEditorsVisible ();
    
    +    public abstract void viewTargets ()
    +                               throws GeneralException;
    +
         public abstract void viewEditor (EditorEditor ed)
                                   throws GeneralException;
    
    @@ -684,6 +689,12 @@ public abstract class AbstractViewer extends JFrame implements PopupsSupported,
         public abstract void sendMessageToEditor (EditorEditor ed)
                                            throws GeneralException;
    
    +    public abstract boolean showChart (String chartType)
    +                                throws GeneralException;
    +
    +    public abstract boolean viewStatistics ()
    +                                     throws GeneralException;
    +
         public void setContent (JComponent content)
         {
    
    @@ -1595,6 +1606,36 @@ public abstract class AbstractViewer extends JFrame implements PopupsSupported,
    
             final AbstractViewer _this = this;
    
    +        if (name == AbstractViewer.SHOW_STATISTICS_ACTION)
    +        {
    +
    +            return new ActionAdapter ()
    +            {
    +
    +                public void actionPerformed (ActionEvent ev)
    +                {
    +
    +                    try
    +                    {
    +
    +                        _this.viewStatistics ();
    +
    +                    } catch (Exception e) {
    +
    +                        Environment.logError ("Unable to view the statistics",
    +                                              e);
    +
    +                        UIUtils.showErrorMessage (_this,
    +                                                  "Unable to view the statistics");
    +
    +                    }
    +
    +                }
    +
    +            };
    +
    +        }
    +
             if (name == AbstractViewer.WARMUP_EXERCISE_ACTION)
             {
    
    @@ -1663,6 +1704,36 @@ public abstract class AbstractViewer extends JFrame implements PopupsSupported,
    
             }
    
    +        if (name == AbstractViewer.SHOW_TARGETS_ACTION)
    +        {
    +
    +            return new ActionAdapter ()
    +            {
    +
    +                public void actionPerformed (ActionEvent ev)
    +                {
    +
    +                    try
    +                    {
    +
    +                        _this.viewTargets ();
    +
    +                    } catch (Exception e) {
    +
    +                        Environment.logError ("Unable to view targets",
    +                                              e);
    +
    +                        UIUtils.showErrorMessage (_this,
    +                                                  "Unable to view targets.");
    +
    +                    }
    +
    +                }
    +
    +            };
    +
    +        }
    +
             return null;
    
         }
    @@ -2386,6 +2457,11 @@ public abstract class AbstractViewer extends JFrame implements PopupsSupported,
    
             }
    
    +        this.generalTimer.cancel ();
    +        this.generalTimer.purge ();
    +
    +        this.generalTimer = null;
    +
             return true;
    
         }
    diff --git a/src/com/quollwriter/ui/BackgroundImagePanel.java b/src/com/quollwriter/ui/BackgroundImagePanel.java
    index 24e9d62..eed7360 100644
    --- a/src/com/quollwriter/ui/BackgroundImagePanel.java
    +++ b/src/com/quollwriter/ui/BackgroundImagePanel.java
    @@ -15,6 +15,15 @@ public class BackgroundImagePanel extends JPanel implements MouseWheelListener
         private float opacity = 0f;
    
         private Object backgroundObject = null;
    +
    +    public BackgroundImagePanel ()
    +    {
    +
    +        this.setLayout (new BoxLayout (this, BoxLayout.Y_AXIS));
    +
    +        this.addMouseWheelListener (this);
    +
    +    }
    
         public BackgroundImagePanel (LayoutManager layout)
         {
    diff --git a/src/com/quollwriter/ui/ChapterFieldAccordionItem.java b/src/com/quollwriter/ui/ChapterFieldAccordionItem.java
    index b60ea06..927621a 100644
    --- a/src/com/quollwriter/ui/ChapterFieldAccordionItem.java
    +++ b/src/com/quollwriter/ui/ChapterFieldAccordionItem.java
    @@ -433,7 +433,7 @@ public abstract class ChapterFieldAccordionItem extends AccordionItem
                 PanelBuilder pb = new PanelBuilder (fl);
    
                 CellConstraints cc = new CellConstraints ();
    -
    +
                 JTextPane tp = UIUtils.createObjectDescriptionViewPane (v,
                                                                         this.chapter,
                                                                         this.projectViewer,
    diff --git a/src/com/quollwriter/ui/FullScreenFrame.java b/src/com/quollwriter/ui/FullScreenFrame.java
    index 95764f2..4ff0f30 100644
    --- a/src/com/quollwriter/ui/FullScreenFrame.java
    +++ b/src/com/quollwriter/ui/FullScreenFrame.java
    @@ -98,19 +98,17 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
         private boolean              distractionFreeModeEnabled = false;
         private Timer achievementsHideTimer = null;
         private QPopup                achievementsPopup = null;
    +    private Timer updateTimer = null;
    
    -    public FullScreenFrame (FullScreenQuollPanel qp)
    +    public FullScreenFrame (FullScreenQuollPanel  qp,
    +                            AbstractProjectViewer viewer)
         {
    
             this.panel = qp;
    
    -        this.projectViewer = this.panel.getProjectViewer ();
    -
    -        //com.gentlyweb.properties.Properties props = Environment.getUserProperties ();
    +        this.projectViewer = viewer;
    
             Project proj = this.projectViewer.getProject ();
    -
    -        //this.projectViewer.setVisible (false);
    
             this.fullScreenTextProperties = new FullScreenTextProperties (this);
    
    @@ -172,7 +170,8 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
         public void showBlankPanel ()
         {
    
    -        BlankQuollPanel bqp = new BlankQuollPanel (this.projectViewer);
    +        BlankQuollPanel bqp = new BlankQuollPanel (this.projectViewer,
    +                                                   "fullscreen-blank");
    
             bqp.init ();
    
    @@ -276,6 +275,8 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
    
             this.clockTimer.stop ();
    
    +        this.updateTimer.stop ();
    +
             this.restorePanel ();
    
             this.projectViewer.doForPanels (QuollEditorPanel.class,
    @@ -847,6 +848,11 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
    
             };
     */
    +
    +        //this.createHeader ();
    +
    +        this.createInfo ();
    +
             this.closeAction = new ActionAdapter ()
             {
    
    @@ -1583,6 +1589,188 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
    
         }
    
    +    private void createInfo ()
    +    {
    +
    +        final Box info = new Box (BoxLayout.X_AXIS);
    +
    +        Box cp = new Box (BoxLayout.Y_AXIS);
    +
    +        cp.setOpaque (true);
    +        cp.setBackground (UIUtils.getComponentColor ());
    +        cp.setBorder (UIUtils.createPadding (5, 10, 5, 10));
    +
    +        info.add (cp);
    +        info.setOpaque (false);
    +
    +        info.setBorder (new com.quollwriter.ui.components.DropShadowBorderX (UIManager.getColor ("Control"),
    +                                                                                                        Color.BLACK,
    +                                                                                                  1,
    +                                                                                                  12,
    +                                                                                                  0.5f,
    +                                                                                                  12,
    +                                                                                                  true,
    +                                                                                                  true,
    +                                                                                                  false,
    +                                                                                                  true));
    +
    +        JToolBar titleC = new JToolBar ();
    +        titleC.setFloatable (false);
    +        titleC.setOpaque (false);
    +        titleC.setRollover (true);
    +        titleC.setBorderPainted (false);
    +
    +        Box ib = new Box (BoxLayout.X_AXIS);
    +
    +        final JLabel time = UIUtils.createLabel ("");
    +
    +        //time.setBorder (UIUtils.createPadding (0, 0, 0, 15));
    +
    +        ib.add (time);
    +                /*
    +        l.setIcon (Environment.getIcon (Constants.CLOCK_ICON_NAME,
    +                                        Constants.ICON_MENU));
    +                */
    +        time.setFont (time.getFont ().deriveFont (16f));
    +
    +        titleC.add (ib);
    +
    +        final JLabel sessWords = UIUtils.createLabel ("");
    +
    +        ib.add (sessWords);
    +
    +        sessWords.setBorder (UIUtils.createPadding (0, 15, 0, 15));
    +
    +        sessWords.setIcon (Environment.getIcon (Constants.CLOCK_ICON_NAME,
    +                                        Constants.ICON_MENU));
    +
    +        sessWords.setFont (sessWords.getFont ().deriveFont (16f));
    +
    +        titleC.add (ib);
    +
    +        final JLabel chapWords = UIUtils.createLabel ("");
    +
    +        ib.add (chapWords);
    +
    +        chapWords.setIcon (Environment.getIcon (Chapter.OBJECT_TYPE,
    +                                                Constants.ICON_MENU));
    +
    +        chapWords.setFont (chapWords.getFont ().deriveFont (16f));
    +
    +        titleC.add (ib);
    +
    +        cp.add (titleC);
    +
    +        this.getLayeredPane ().add (info,
    +                                    1,
    +                                    2);
    +
    +        this.getLayeredPane ().moveToFront (info);
    +        this.getLayeredPane ().validate ();
    +
    +        final FullScreenFrame _this = this;
    +
    +        ActionListener l = new ActionListener ()
    +        {
    +
    +            @Override
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +               info.setVisible (Environment.getUserProperties ().getPropertyAsBoolean (Constants.FULL_SCREEN_SHOW_TIME_WORD_COUNT_PROPERTY_NAME));
    +
    +               time.setText (_this.clockFormat.format (new Date ()));
    +
    +               QuollPanel qp = _this.panel.getChild ();
    +
    +               if (qp instanceof AbstractEditorPanel)
    +               {
    +
    +                   sessWords.setVisible (true);
    +                   chapWords.setVisible (true);
    +
    +                   AbstractEditorPanel aep = (AbstractEditorPanel) qp;
    +
    +                   ChapterCounts cc = _this.projectViewer.getChapterCounts (aep.getChapter ());
    +
    +                   String t = "";
    +
    +                   TargetsData td = Environment.getUserTargets ();
    +
    +                   if ((td.getMySessionWriting () > 0)
    +                       &&
    +                       (Environment.getSessionWordCount () != 0)
    +                      )
    +                   {
    +
    +                       t = String.format (", %s",
    +                                          Environment.getSessionWordCount () - td.getMySessionWriting ());
    +
    +                   }
    +
    +                   sessWords.setToolTipText ("Session word count");
    +
    +                   sessWords.setText (String.format ("%s words%s",
    +                                                     Environment.formatNumber (Environment.getSessionWordCount ()),
    +                                                     t));
    +
    +                   int maxChapWC = aep.getViewer ().getProjectTargets ().getMaxChapterCount ();
    +
    +                   t = "";
    +
    +                   if ((maxChapWC > 0)
    +                       &&
    +                       (cc.wordCount > maxChapWC)
    +                      )
    +                   {
    +
    +                       t = String.format (", %s",
    +                                          Environment.formatNumber (cc.wordCount - maxChapWC));
    +
    +                   }
    +
    +                   chapWords.setToolTipText ("{Chapter} word count");
    +
    +                   chapWords.setText (String.format ("%s words%s",
    +                                                     Environment.formatNumber (cc.wordCount),
    +                                                     t));
    +
    +               } else {
    +
    +                   sessWords.setVisible (false);
    +                   chapWords.setVisible (false);
    +
    +               }
    +
    +               final Dimension d = Toolkit.getDefaultToolkit ().getScreenSize ();
    +
    +               info.setBounds ((int) 10,
    +                                      d.height - info.getPreferredSize ().height,
    +                                      info.getPreferredSize ().width,
    +                                      info.getPreferredSize ().height);
    +
    +            }
    +
    +        };
    +
    +        l.actionPerformed (new ActionEvent (this, 0, "0"));
    +
    +        info.setVisible (Environment.getUserProperties ().getPropertyAsBoolean (Constants.FULL_SCREEN_SHOW_TIME_WORD_COUNT_PROPERTY_NAME));
    +
    +        this.updateTimer = new Timer (500,
    +                                      l);
    +
    +        final Dimension d = Toolkit.getDefaultToolkit ().getScreenSize ();
    +
    +        info.setBounds ((int) 10,
    +                               d.height - info.getPreferredSize ().height,
    +                               info.getPreferredSize ().width,
    +                               info.getPreferredSize ().height);
    +
    +        this.updateTimer.start ();
    +
    +    }
    +
         private void createHeader ()
         {
    
    @@ -1688,7 +1876,7 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
                                              {
    
                                                  _this.clockLabel.setText (_this.clockFormat.format (new Date ()));
    -
    +
                                              }
    
                                          });
    @@ -1727,7 +1915,7 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
    
             titleC.add (this.distModeButton);
    
    -        this.panel.projectViewer.fillFullScreenTitleToolbar (titleC);
    +        this.projectViewer.fillFullScreenTitleToolbar (titleC);
    
             if (EditorsEnvironment.isEditorsServiceAvailable ())
             {
    @@ -1746,7 +1934,7 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
                                                             try
                                                             {
    
    -                                                            _this.panel.getProjectViewer ().viewEditors ();
    +                                                            _this.projectViewer.viewEditors ();
    
                                                             } catch (Exception e) {
    
    @@ -1773,7 +1961,7 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
                                                     public void actionPerformed (ActionEvent ev)
                                                     {
    
    -                                                    _this.panel.getProjectViewer ().showFind (null);
    +                                                    _this.projectViewer.showFind (null);
    
                                                         _this.showSideBar (Constants.LEFT);
    
    @@ -2232,8 +2420,8 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
    
             this.setFullScreenBackgroundProperty (f);
    
    -        this.panel.getProjectViewer ().fireProjectEvent (ProjectEvent.FULL_SCREEN,
    -                                                          ProjectEvent.CHANGE_BG_IMAGE);
    +        this.projectViewer.fireProjectEvent (ProjectEvent.FULL_SCREEN,
    +                                             ProjectEvent.CHANGE_BG_IMAGE);
    
         }
    
    @@ -2468,14 +2656,7 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
         public void showProperties ()
         {
    
    -        this.panel.getProjectViewer ().showSideBar ("fullscreenproperties");
    -
    -        if (true)
    -        {
    -
    -            return;
    -
    -        }
    +        this.projectViewer.showSideBar ("fullscreenproperties");
    
         }
    
    @@ -2643,7 +2824,7 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
    
             final QuollPanel child = this.panel.getChild ();
    
    -        if (child.getProjectViewer () instanceof ProjectViewer)
    +        if (child.getViewer () instanceof ProjectViewer)
             {
    
                 ProjectViewer.addAssetActionMappings (child,
    @@ -3015,5 +3196,19 @@ public class FullScreenFrame extends JFrame implements PopupsSupported, SideBarL
             return this.projectViewer;
    
         }
    +
    +    public DataObject getCurrentForObject ()
    +    {
    +
    +        if (this.panel.getChild () instanceof ProjectObjectQuollPanel)
    +        {
    +
    +            return ((ProjectObjectQuollPanel) this.panel.getChild ()).getForObject ();
    +
    +        }
    +
    +        return null;
    +
    +    }
    
     }
    diff --git a/src/com/quollwriter/ui/FullScreenTextProperties.java b/src/com/quollwriter/ui/FullScreenTextProperties.java
    index a704893..041772a 100644
    --- a/src/com/quollwriter/ui/FullScreenTextProperties.java
    +++ b/src/com/quollwriter/ui/FullScreenTextProperties.java
    @@ -41,7 +41,9 @@ public class FullScreenTextProperties extends TextProperties
                                UIUtils.getColor (proj.getProperty (Constants.FULL_SCREEN_EDITOR_WRITING_LINE_COLOR_PROPERTY_NAME,
                                                                    Constants.EDITOR_WRITING_LINE_COLOR_PROPERTY_NAME)),
                                proj.getPropertyAsBoolean (Constants.FULL_SCREEN_EDITOR_HIGHLIGHT_WRITING_LINE_PROPERTY_NAME,
    -                                                      Constants.EDITOR_HIGHLIGHT_WRITING_LINE_PROPERTY_NAME));
    +                                                      Constants.EDITOR_HIGHLIGHT_WRITING_LINE_PROPERTY_NAME),
    +                           proj.getPropertyAsInt (Constants.FULL_SCREEN_EDITOR_TEXT_BORDER_PROPERTY_NAME,
    +                                                  Constants.EDITOR_TEXT_BORDER_PROPERTY_NAME));
    
         }
    
    @@ -197,6 +199,16 @@ public class FullScreenTextProperties extends TextProperties
    
         }
    
    +    public void setTextBorder (int v)
    +    {
    +
    +        super.setTextBorder (v);
    +
    +        this.setProperty (new IntegerProperty (Constants.FULL_SCREEN_EDITOR_TEXT_BORDER_PROPERTY_NAME,
    +                                               this.getTextBorder ()));
    +
    +    }
    +
         public void setFontFamily (String f)
         {
    
    diff --git a/src/com/quollwriter/ui/Landing.java b/src/com/quollwriter/ui/Landing.java
    index befe4f5..bf7d402 100644
    --- a/src/com/quollwriter/ui/Landing.java
    +++ b/src/com/quollwriter/ui/Landing.java
    @@ -26,6 +26,7 @@ import com.quollwriter.data.comparators.*;
     import com.quollwriter.data.editors.*;
     import com.quollwriter.editors.*;
     import com.quollwriter.ui.components.*;
    +import com.quollwriter.ui.panels.*;
     import com.quollwriter.text.*;
     import com.quollwriter.db.*;
     import com.quollwriter.ui.sidebars.*;
    @@ -33,6 +34,7 @@ import com.quollwriter.editors.*;
     import com.quollwriter.editors.ui.*;
     import com.quollwriter.editors.ui.sidebars.*;
     import com.quollwriter.achievements.ui.*;
    +import com.quollwriter.ui.charts.*;
    
     // TODO: Create a PopupFrame that supports popups.
    
    @@ -45,6 +47,7 @@ public class Landing extends AbstractViewer implements ProjectInfoChangedListene
    
            public static final String MAIN_CARD = "main";
            public static final String OPTIONS_CARD = "options";
    +       public static final String STATS_CARD = "stats";
            public static final String NO_PROJECTS_CARD = "noprojects";
            public static final String ACHIEVEMENTS_CARD = "achievements";
    
    @@ -78,6 +81,7 @@ public class Landing extends AbstractViewer implements ProjectInfoChangedListene
         private ImportTransferHandlerOverlay   importOverlay = null;
            private Notification findProjectsNotification = null;
            private Options options = null;
    +       private StatisticsPanel statsPanel = null;
            private String currentCard = null;
            private PropertyChangedListener statusesChangedListener = null;
    
    @@ -3316,7 +3320,17 @@ public class Landing extends AbstractViewer implements ProjectInfoChangedListene
                                                 }));
    
                    popup.addSeparator ();
    -
    +
    +        popup.add (this.createMenuItem ("Statistics",
    +                                        Constants.CHART_ICON_NAME,
    +                                        AbstractProjectViewer.SHOW_STATISTICS_ACTION));
    +
    +        popup.add (this.createMenuItem ("Targets",
    +                                                                               Constants.TARGET_ICON_NAME,
    +                                                                               ProjectViewer.SHOW_TARGETS_ACTION));
    +
    +               popup.addSeparator ();
    +
                    JMenu m = new JMenu (Environment.replaceObjectNames ("Sort {Projects} by"));
                    m.setIcon (Environment.getIcon (Constants.SORT_ICON_NAME,
                                                                                    Constants.ICON_MENU));
    @@ -3437,11 +3451,133 @@ public class Landing extends AbstractViewer implements ProjectInfoChangedListene
            }
    
            @Override
    +       public boolean viewStatistics ()
    +                                                       throws GeneralException
    +       {
    +
    +               final Landing _this = this;
    +
    +               if (this.statsPanel != null)
    +               {
    +
    +                       this.showCard (STATS_CARD);
    +
    +                       return true;
    +
    +               }
    +
    +               try
    +               {
    +
    +                       this.statsPanel = new StatisticsPanel (this,
    +                                                                                                  new SessionWordCountChart (this),
    +                                                                                                  new SessionTimeChart (this));
    +
    +                       this.statsPanel.init ();
    +
    +                       JButton close = UIUtils.createButton (Constants.CLOSE_ICON_NAME,
    +                                                                                                 Constants.ICON_MENU,
    +                                                                                                 "Click to close",
    +                                                                                                 new ActionAdapter ()
    +                       {
    +
    +                               public void actionPerformed (ActionEvent ev)
    +                               {
    +
    +                                       try
    +                                       {
    +
    +                                               _this.statsPanel = null;
    +
    +                                               _this.showProjects ();
    +
    +                                       } catch (Exception e) {
    +
    +                                               Environment.logError ("Unable to show projects",
    +                                                                                         e);
    +
    +                                               _this.showMainCard ();
    +
    +                                       }
    +
    +                               }
    +
    +                       });
    +
    +                       java.util.List<JButton> buts = new ArrayList ();
    +                       buts.add (close);
    +
    +                       this.statsPanel.getHeader ().setControls (UIUtils.createButtonBar (buts));
    +
    +                       this.cards.add (this.statsPanel, STATS_CARD);
    +
    +                       this.statsPanel.showChart (SessionWordCountChart.CHART_TYPE);
    +
    +                       return this.viewStatistics ();
    +
    +               } catch (Exception e) {
    +
    +                       Environment.logError ("Unable to view the statistics",
    +                                                                 e);
    +
    +                       UIUtils.showErrorMessage (this,
    +                                                                         "Unable to view the statistics");
    +
    +                       return false;
    +
    +               }
    +
    +       }
    +
    +       @Override
    +       public boolean showChart (String chartType)
    +                                          throws GeneralException
    +       {
    +
    +               try
    +               {
    +
    +                       if (this.viewStatistics ())
    +                       {
    +
    +                               this.statsPanel.showChart (chartType);
    +
    +                               return true;
    +
    +                       }
    +
    +               } catch (Exception e) {
    +
    +                       Environment.logError ("Unable to view the chart: " +
    +                                                                 chartType,
    +                                                                 e);
    +
    +                       UIUtils.showErrorMessage (this,
    +                                                                         "Unable to view the chart");
    +
    +               }
    +
    +               return false;
    +
    +       }
    +
    +       @Override
            public boolean showOptions (String section)
            {
    
                    final Landing _this = this;
    
    +               if (this.options != null)
    +               {
    +
    +                       this.showCard (OPTIONS_CARD);
    +
    +                       this.options.showSection (section);
    +
    +                       return true;
    +
    +               }
    +
                    try
                    {
    
    @@ -3504,9 +3640,7 @@ public class Landing extends AbstractViewer implements ProjectInfoChangedListene
    
                            this.cards.add (this.options, OPTIONS_CARD);
    
    -                       this.showCard (OPTIONS_CARD);
    -
    -                       this.options.showSection (section);
    +                       return this.showOptions (section);
    
                    } catch (Exception e) {
    
    @@ -3519,8 +3653,6 @@ public class Landing extends AbstractViewer implements ProjectInfoChangedListene
                            return false;
    
                    }
    -
    -               return true;
    
            }
    
    @@ -3617,7 +3749,7 @@ public class Landing extends AbstractViewer implements ProjectInfoChangedListene
                                                            pi.setNoCredentials (true);
    
                                                    } catch (Exception ee) {
    -
    +
                                                            if (ObjectManager.isEncryptionException (ee))
                                                            {
    
    @@ -4216,5 +4348,22 @@ public class Landing extends AbstractViewer implements ProjectInfoChangedListene
                    super.handleHTMLPanelAction (v);
    
            }
    +
    +       /**
    +        * Display the targets for the project.
    +        *
    +        */
    +       public void viewTargets ()
    +                      throws GeneralException
    +       {
    +
    +        TargetsSideBar t = new TargetsSideBar (this);
    +
    +        this.addSideBar ("targets",
    +                         t);
    +
    +        this.showSideBar ("targets");
    +
    +       }
    
     }
    \ No newline at end of file
    diff --git a/src/com/quollwriter/ui/NamedObjectPreviewPopup.java b/src/com/quollwriter/ui/NamedObjectPreviewPopup.java
    index 9eac62d..cd63876 100644
    --- a/src/com/quollwriter/ui/NamedObjectPreviewPopup.java
    +++ b/src/com/quollwriter/ui/NamedObjectPreviewPopup.java
    @@ -269,4 +269,20 @@ public class NamedObjectPreviewPopup extends Box
    
         }
    
    +    public static JComponent getObjectPreviewPanel (NamedObject obj)
    +    {
    +
    +        if (obj instanceof Chapter)
    +        {
    +
    +            Chapter c = (Chapter) obj;
    +
    +
    +
    +        }
    +
    +        return null;
    +
    +    }
    +
     }
    \ No newline at end of file
    diff --git a/src/com/quollwriter/ui/Notification.java b/src/com/quollwriter/ui/Notification.java
    index 235478a..4b889bb 100644
    --- a/src/com/quollwriter/ui/Notification.java
    +++ b/src/com/quollwriter/ui/Notification.java
    @@ -23,6 +23,7 @@ public class Notification extends Box implements ActionListener
         private JButton cancel = null;
         private JComponent content = null;
         private ActionListener onRemove = null;
    +    private JComponent contentBox = null;
    
         public Notification (JComponent              comp,
                              String                  iconType,
    @@ -58,8 +59,14 @@ public class Notification extends Box implements ActionListener
             b.add (ip);
             b.add (Box.createHorizontalStrut (10));
    
    -        b.add (comp);
    -
    +        this.contentBox = new Box (BoxLayout.X_AXIS);
    +        this.contentBox.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        this.contentBox.setAlignmentY (Component.TOP_ALIGNMENT);
    +
    +        b.add (this.contentBox);
    +
    +        this.contentBox.add (comp);
    +
             final ActionAdapter removeNotification = new ActionAdapter ()
             {
    
    @@ -107,6 +114,16 @@ public class Notification extends Box implements ActionListener
    
         }
    
    +    public void setContent (JComponent c)
    +    {
    +
    +        this.contentBox.removeAll ();
    +        this.contentBox.add (c);
    +
    +        this.content = c;
    +
    +    }
    +
         public JComponent getContent ()
         {
    
    @@ -167,7 +184,6 @@ public class Notification extends Box implements ActionListener
                                      onRemove);
    
         }
    -
    
         public static Notification createMessageNotification (AbstractProjectViewer viewer,
                                                               String                message,
    diff --git a/src/com/quollwriter/ui/ProjectEvent.java b/src/com/quollwriter/ui/ProjectEvent.java
    index dec78e6..86dbad2 100644
    --- a/src/com/quollwriter/ui/ProjectEvent.java
    +++ b/src/com/quollwriter/ui/ProjectEvent.java
    @@ -36,6 +36,7 @@ public class ProjectEvent extends EventObject
         public static final String TIPS = "tips";
         public static final String TABS = "tabs";
         public static final String WHATS_NEW = "whatsnew";
    +    public static final String STATISTICS = "statistics";
    
         public static final String CHANGE_BACKGROUND = "changebackground";
         public static final String CHANGE_LANGUAGE = "changelanguage";
    @@ -83,6 +84,7 @@ public class ProjectEvent extends EventObject
         public static final String CHANGE_BG_OPACITY = "changebgopacity";
         public static final String CHANGE_LINE_INDENT = "changelineindent";
         public static final String CHANGE_HIGHLIGHT_WRITING_LINE = "changehighlightwritingline";
    +    public static final String CHANGE_TEXT_BORDER = "changetextborder";
    
         private String type = null;
         private String action = null;
    diff --git a/src/com/quollwriter/ui/ProjectTextProperties.java b/src/com/quollwriter/ui/ProjectTextProperties.java
    index 23de1bf..48dbd94 100644
    --- a/src/com/quollwriter/ui/ProjectTextProperties.java
    +++ b/src/com/quollwriter/ui/ProjectTextProperties.java
    @@ -31,7 +31,8 @@ public class ProjectTextProperties extends TextProperties
                                Color.black,
                                UIUtils.getComponentColor (),
                                UIUtils.getColor (props.getProperty (Constants.EDITOR_WRITING_LINE_COLOR_PROPERTY_NAME)),
    -                           props.getPropertyAsBoolean (Constants.EDITOR_HIGHLIGHT_WRITING_LINE_PROPERTY_NAME));
    +                           props.getPropertyAsBoolean (Constants.EDITOR_HIGHLIGHT_WRITING_LINE_PROPERTY_NAME),
    +                           props.getPropertyAsInt (Constants.EDITOR_TEXT_BORDER_PROPERTY_NAME));
    
         }
    
    @@ -199,6 +200,16 @@ public class ProjectTextProperties extends TextProperties
    
         }
    
    +    public void setTextBorder (int v)
    +    {
    +
    +        super.setTextBorder (v);
    +
    +        this.setProperty (new IntegerProperty (Constants.EDITOR_TEXT_BORDER_PROPERTY_NAME,
    +                                              this.getTextBorder ()));
    +
    +    }
    +
         private void setProperty (AbstractProperty prop)
         {
    
    diff --git a/src/com/quollwriter/ui/ProjectViewer.java b/src/com/quollwriter/ui/ProjectViewer.java
    index 896767c..c73b680 100644
    --- a/src/com/quollwriter/ui/ProjectViewer.java
    +++ b/src/com/quollwriter/ui/ProjectViewer.java
    @@ -91,7 +91,6 @@ public class ProjectViewer extends AbstractProjectViewer
         public static final int NEW_NOTE_TYPE_ACTION = 127; // "newNoteType"
         public static final int MANAGE_ITEM_TYPES_ACTION = 128; // "manageItemTypes"
         public static final int NEW_ITEM_TYPE_ACTION = 129; // "newItemType"
    -       public static final int SHOW_TARGETS_ACTION = 130;
    
         private Date            sessionStart = new Date ();
         private ProjectSideBar  sideBar = null;
    @@ -148,19 +147,24 @@ public class ProjectViewer extends AbstractProjectViewer
                            public void actionPerformed (ActionEvent ev)
                            {
    
    +                               _this.importOverlay.setDisplayText ("Drop the file to begin the import");
    +
                                    File f = (File) ev.getSource ();
    
                     QuollPanel qp = _this.getCurrentlyVisibleTab ();
    
    -                               if (qp.getForObject () instanceof Asset)
    +                               if (qp instanceof ProjectObjectQuollPanel)
                                    {
    
    -                                       _this.importOverlay.setDisplayText (String.format ("Drop the file to add it to %s's {documents}.",
    -                                                                                                                                          qp.getForObject ().getName ()));
    -
    -                               } else {
    +                                       ProjectObjectQuollPanel pqp = (ProjectObjectQuollPanel) qp;
    
    -                                       _this.importOverlay.setDisplayText ("Drop the file to begin the import");
    +                                       if (pqp.getForObject () instanceof Asset)
    +                                       {
    +
    +                                               _this.importOverlay.setDisplayText (String.format ("Drop the file to add it to %s's {documents}.",
    +                                                                                                                                                  pqp.getForObject ().getName ()));
    +
    +                                       }
    
                                    }
    
    @@ -228,11 +232,18 @@ public class ProjectViewer extends AbstractProjectViewer
    
                     QuollPanel qp = _this.getCurrentlyVisibleTab ();
    
    -                               if (qp.getForObject () instanceof Asset)
    -                               {
    -
    -                                       return true;
    -
    +                               if (qp instanceof ProjectObjectQuollPanel)
    +                               {
    +
    +                                       ProjectObjectQuollPanel pqp = (ProjectObjectQuollPanel) qp;
    +
    +                                       if (pqp.getForObject () instanceof Asset)
    +                                       {
    +
    +                                               return true;
    +
    +                                       }
    +
                                    }
    
                     return ImportProject.isSupportedFileType (f);
    @@ -360,11 +371,11 @@ public class ProjectViewer extends AbstractProjectViewer
    
             }
    
    -        if (parent instanceof QuollPanel)
    +        if (parent instanceof ProjectObjectQuollPanel)
             {
    
                 // Holy moly!
    -            pv = (ProjectViewer) ((QuollPanel) parent).getProjectViewer ();
    +            pv = (ProjectViewer) ((ProjectObjectQuollPanel) parent).getProjectViewer ();
    
             }
    
    @@ -464,11 +475,11 @@ public class ProjectViewer extends AbstractProjectViewer
             titlePopup.add (this.createMenuItem ("Statistics",
                                                  Constants.CHART_ICON_NAME,
                                                  AbstractProjectViewer.SHOW_STATISTICS_ACTION));
    -/*
    +
             titlePopup.add (this.createMenuItem ("Targets",
    -                                             Constants.CHART_ICON_NAME,
    +                                             Constants.TARGET_ICON_NAME,
                                                  ProjectViewer.SHOW_TARGETS_ACTION));
    -*/
    +
             // Create Project Snapshot
             titlePopup.add (this.createMenuItem ("Create a Backup",
                                                  Constants.SNAPSHOT_ICON_NAME,
    @@ -694,37 +705,6 @@ public class ProjectViewer extends AbstractProjectViewer
                 };
    
             }
    -/*
    -        if (name == ProjectViewer.SHOW_TARGETS_ACTION)
    -        {
    -
    -            return new ActionAdapter ()
    -            {
    -
    -                public void actionPerformed (ActionEvent ev)
    -                {
    -
    -                    try
    -                    {
    -
    -                        pv.viewTargets ();
    -
    -                    } catch (Exception e) {
    -
    -                        Environment.logError ("Unable to view targets",
    -                                              e);
    -
    -                        UIUtils.showErrorMessage (pv,
    -                                                  "Unable to view targets.");
    -
    -                    }
    -
    -                }
    -
    -            };
    -
    -        }
    -       */
    
             if (name == ProjectViewer.NEW_NOTE_TYPE_ACTION)
             {
    @@ -1696,7 +1676,7 @@ public class ProjectViewer extends AbstractProjectViewer
                                             c);
    
                 qep.init ();
    -
    +
             } catch (Exception e)
             {
    
    @@ -1866,10 +1846,10 @@ public class ProjectViewer extends AbstractProjectViewer
    
             }
    
    -        if (d.getObjectType ().equals (Project.WORDCOUNTS_OBJECT_TYPE))
    +        if (d.getObjectType ().equals (StatisticsPanel.OLD_WORD_COUNT_PANEL_ID))
             {
    
    -            return this.viewWordCountHistory ();
    +            return this.viewStatistics ();
    
             }
    
    @@ -2219,8 +2199,8 @@ public class ProjectViewer extends AbstractProjectViewer
    
         }
    
    -    protected void addNameChangeListener (final NamedObject n,
    -                                          final QuollPanel  qp)
    +    protected void addNameChangeListener (final NamedObject             n,
    +                                          final ProjectObjectQuollPanel qp)
         {
    
             final ProjectViewer _this = this;
    @@ -2289,25 +2269,7 @@ public class ProjectViewer extends AbstractProjectViewer
             this.viewWordCloud ();
    
         }
    -
    -       /**
    -        * Display the targets for the project.
    -        *
    -        */
    -       /*
    -       public void viewTargets ()
    -                      throws GeneralException
    -       {
    -
    -        TargetsSideBar t = new TargetsSideBar (this);
    -
    -        this.addSideBar ("targets",
    -                         t);
    -
    -        this.showSideBar ("targets");
    -
    -       }
    -*/
    +
         /**
          * This is a top-level action so it can handle showing the user a message, it returns a boolean to indicate
          * whether the chapter information is viewed.
    diff --git a/src/com/quollwriter/ui/QuollChart.java b/src/com/quollwriter/ui/QuollChart.java
    index f5a675f..ed6bba0 100644
    --- a/src/com/quollwriter/ui/QuollChart.java
    +++ b/src/com/quollwriter/ui/QuollChart.java
    @@ -14,12 +14,16 @@ public interface QuollChart
    
         public String getType ();
    
    -    public JComponent getControls ();
    +    public JComponent getControls (boolean update)
    +                            throws GeneralException;
    
    -    public JFreeChart getChart ();
    +    public JFreeChart getChart (boolean update)
    +                         throws GeneralException;
    
    -    public void init (AbstractProjectViewer pv,
    -                      WordCountPanel        wcp)
    -                      throws                GeneralException;
    +    public JComponent getDetail (boolean update)
    +                          throws GeneralException;
    +
    +    public void init (StatisticsPanel wcp)
    +               throws GeneralException;
    
     }
    \ No newline at end of file
    diff --git a/src/com/quollwriter/ui/QuollPanel.java b/src/com/quollwriter/ui/QuollPanel.java
    index 4288817..6098526 100644
    --- a/src/com/quollwriter/ui/QuollPanel.java
    +++ b/src/com/quollwriter/ui/QuollPanel.java
    @@ -29,9 +29,9 @@ import com.quollwriter.events.*;
    
     import com.quollwriter.ui.actionHandlers.*;
    
    -public abstract class QuollPanel extends JRootPane /*Box*/ implements Stateful,
    -                                                                      MouseListener,
    -                                                                      PopupsSupported
    +public abstract class QuollPanel<E extends AbstractViewer> extends JRootPane /*Box*/ implements Stateful,
    +                                                                                                MouseListener,
    +                                                                                                PopupsSupported
     {
    
         public static final int UNSAVED_CHANGES_ACTION_EVENT = 0;
    @@ -41,24 +41,24 @@ public abstract class QuollPanel extends JRootPane /*Box*/ implements Stateful,
         public static final String HAS_CHANGES_COMMAND = "hasChanges";
         public static final String NO_CHANGES_COMMAND = "noChanges";
    
    -    protected AbstractProjectViewer projectViewer = null;
    +    protected E viewer = null;
    
         protected Box                                   content = null;
    -    protected NamedObject                           obj = null;
    +    //protected NamedObject                           obj = null;
         private java.util.List                          actionListeners = new ArrayList ();
         private java.util.List<PropertyChangedListener> propertyChangedListeners = new ArrayList ();
         private boolean                                 hasUnsavedChanges = false;
         private JToolBar                                toolBar = null;
         private boolean                                 readyForUse = false;
    
    -    public QuollPanel(AbstractProjectViewer pv,
    -                      NamedObject           obj)
    +    public QuollPanel (E viewer)
    +                      //NamedObject           obj)
         {
    
             // super (BoxLayout.PAGE_AXIS);
    
    -        this.projectViewer = pv;
    -        this.obj = obj;
    +        this.viewer = viewer;
    +        //this.obj = obj;
    
             this.setOpaque (false);
             this.setBackground (null);
    @@ -72,6 +72,13 @@ public abstract class QuollPanel extends JRootPane /*Box*/ implements Stateful,
    
         }
    
    +    public E getViewer ()
    +    {
    +
    +        return this.viewer;
    +
    +    }
    +
         public boolean isReadyForUse ()
         {
    
    @@ -86,6 +93,8 @@ public abstract class QuollPanel extends JRootPane /*Box*/ implements Stateful,
    
         }
    
    +    public abstract String getPanelId ();
    +
         public abstract void close ();
    
         public abstract void init ()
    @@ -96,9 +105,6 @@ public abstract class QuollPanel extends JRootPane /*Box*/ implements Stateful,
         public abstract void setState (Map<String, String> s,
                                        boolean             hasFocus);
    
    -    public abstract boolean saveUnsavedChanges ()
    -                                         throws Exception;
    -
         public abstract String getIconType ();
    
         public abstract String getTitle ();
    @@ -111,7 +117,7 @@ public abstract class QuollPanel extends JRootPane /*Box*/ implements Stateful,
    
         public abstract List<Component> getTopLevelComponents ();
    
    -    public abstract <T extends NamedObject> void refresh (T n);
    +    //public abstract <T extends NamedObject> void refresh (T n);
    
         @Override
         public void remove (Component c)
    @@ -190,7 +196,7 @@ public abstract class QuollPanel extends JRootPane /*Box*/ implements Stateful,
             }
    
         }
    -
    +/*
         public java.util.List<PropertyChangedListener> getObjectPropertyChangedListeners ()
         {
    
    @@ -238,7 +244,7 @@ public abstract class QuollPanel extends JRootPane /*Box*/ implements Stateful,
                                                    "chapterSaved"));
    
         }
    -
    +*/
         public void removeActionListener (ActionListener a)
         {
    
    @@ -335,14 +341,14 @@ public abstract class QuollPanel extends JRootPane /*Box*/ implements Stateful,
             return tb;
    
         }
    -
    +    /*
         public String getPanelId ()
         {
    
             return this.obj.getObjectReference ().asString ();
    
         }
    -
    +*/
         public void setToolBarButtonIcon (String actionCommand,
                                           String toolTipText,
                                           String icon)
    @@ -396,7 +402,7 @@ public abstract class QuollPanel extends JRootPane /*Box*/ implements Stateful,
             return null;
    
         }
    -
    +/*
         public boolean hasUnsavedChanges ()
         {
    
    @@ -414,7 +420,7 @@ public abstract class QuollPanel extends JRootPane /*Box*/ implements Stateful,
                                                    (hasChanges ? QuollPanel.HAS_CHANGES_COMMAND : QuollPanel.NO_CHANGES_COMMAND)));
    
         }
    -
    +*/
         @Override
         public void removePopup (Component c)
         {
    @@ -702,12 +708,12 @@ public abstract class QuollPanel extends JRootPane /*Box*/ implements Stateful,
             }
    
         }
    -
    +/*
         public AbstractProjectViewer getProjectViewer ()
         {
    
             return this.projectViewer;
    
         }
    -
    +*/
     }
    diff --git a/src/com/quollwriter/ui/Targets.java b/src/com/quollwriter/ui/Targets.java
    new file mode 100644
    index 0000000..65b94c6
    --- /dev/null
    +++ b/src/com/quollwriter/ui/Targets.java
    @@ -0,0 +1,1219 @@
    +package com.quollwriter.ui;
    +
    +import java.awt.Dimension;
    +import java.awt.Component;
    +import java.awt.event.*;
    +import java.util.*;
    +
    +import javax.swing.*;
    +import javax.swing.event.*;
    +import javax.swing.border.*;
    +
    +import com.jgoodies.forms.builder.*;
    +import com.jgoodies.forms.factories.*;
    +import com.jgoodies.forms.layout.*;
    +
    +import com.quollwriter.*;
    +import com.quollwriter.ui.*;
    +import com.quollwriter.data.*;
    +import com.quollwriter.ui.charts.*;
    +
    +import com.quollwriter.ui.components.Accordion;
    +import com.quollwriter.ui.components.Header;
    +import com.quollwriter.ui.components.QPopup;
    +
    +public class Targets<E extends AbstractViewer> extends Accordion
    +{
    +
    +    private E viewer = null;
    +    private JLabel chaptersOverDisplay = null;
    +    private JLabel readabilityOverDisplay = null;
    +
    +    public Targets (E v)
    +    {
    +
    +        super (BoxLayout.Y_AXIS);
    +
    +        this.viewer = v;
    +
    +    }
    +
    +    public void init ()
    +    {
    +
    +        final Targets _this = this;
    +
    +        final TargetsData userTargets = Environment.getUserTargets ();
    +
    +        FormLayout   fl = new FormLayout ("right:55px, 5px, [p,80px], 5px, p:grow",
    +                                          "p, 6px, p, 6px, p, 6px, p");
    +        PanelBuilder pb = new PanelBuilder (fl);
    +
    +        CellConstraints cc = new CellConstraints ();
    +
    +        int r = 1;
    +
    +        pb.addLabel ("Session",
    +                    cc.xy (1,
    +                           r));
    +
    +        int t = userTargets.getMySessionWriting ();
    +
    +        SpinnerNumberModel ssm = new SpinnerNumberModel (t,
    +                                                         0,
    +                                                         100000,
    +                                                         10);
    +
    +        final JSpinner ssp = new JSpinner (ssm);
    +
    +        ssp.addChangeListener (new ChangeListener ()
    +        {
    +
    +            @Override
    +            public void stateChanged (ChangeEvent ev)
    +            {
    +
    +                Number n = (Number) ssp.getValue ();
    +
    +                userTargets.setMySessionWriting (n.intValue ());
    +
    +                Environment.saveUserTargets ();
    +
    +            }
    +
    +        });
    +
    +        pb.add (ssp,
    +               cc.xy (3,
    +                      r));
    +        pb.addLabel ("words",
    +                     cc.xy (5,
    +                            r));
    +
    +        r += 2;
    +
    +        pb.addLabel ("Daily",
    +                    cc.xy (1,
    +                           r));
    +
    +        t = userTargets.getMyDailyWriting ();
    +
    +        SpinnerNumberModel dsm = new SpinnerNumberModel (t,
    +                                                         0,
    +                                                         100000,
    +                                                         10);
    +
    +        final JSpinner dsp = new JSpinner (dsm);
    +
    +        dsp.addChangeListener (new ChangeListener ()
    +        {
    +
    +            @Override
    +            public void stateChanged (ChangeEvent ev)
    +            {
    +
    +                Number n = (Number) dsp.getValue ();
    +
    +                userTargets.setMyDailyWriting (n.intValue ());
    +
    +                Environment.saveUserTargets ();
    +
    +            }
    +
    +        });
    +
    +        pb.add (dsp,
    +               cc.xy (3,
    +                      r));
    +        pb.addLabel ("words",
    +                     cc.xy (5,
    +                            r));
    +
    +        r += 2;
    +
    +        pb.addLabel ("Weekly",
    +                    cc.xy (1,
    +                           r));
    +
    +        t = userTargets.getMyWeeklyWriting ();
    +
    +        SpinnerNumberModel wsm = new SpinnerNumberModel (t,
    +                                                         0,
    +                                                         100000,
    +                                                         50);
    +
    +        final JSpinner wsp = new JSpinner (wsm);
    +
    +        wsp.addChangeListener (new ChangeListener ()
    +        {
    +
    +            @Override
    +            public void stateChanged (ChangeEvent ev)
    +            {
    +
    +                Number n = (Number) wsp.getValue ();
    +
    +                userTargets.setMyWeeklyWriting (n.intValue ());
    +
    +                Environment.saveUserTargets ();
    +
    +            }
    +
    +        });
    +
    +        pb.add (wsp,
    +                cc.xy (3,
    +                       r));
    +        pb.addLabel ("words",
    +                     cc.xy (5,
    +                            r));
    +
    +        r += 2;
    +
    +        pb.addLabel ("Monthly",
    +                    cc.xy (1,
    +                           r));
    +
    +        t = userTargets.getMyMonthlyWriting ();
    +
    +        SpinnerNumberModel msm = new SpinnerNumberModel (t,
    +                                                         0,
    +                                                         100000,
    +                                                         100);
    +
    +        final JSpinner msp = new JSpinner (msm);
    +
    +        msp.addChangeListener (new ChangeListener ()
    +        {
    +
    +            @Override
    +            public void stateChanged (ChangeEvent ev)
    +            {
    +
    +                Number n = (Number) msp.getValue ();
    +
    +                userTargets.setMyMonthlyWriting (n.intValue ());
    +
    +                Environment.saveUserTargets ();
    +
    +            }
    +
    +        });
    +
    +        pb.add (msp,
    +                cc.xy (3,
    +                       r));
    +        pb.addLabel ("words",
    +                     cc.xy (5,
    +                            r));
    +
    +        JPanel p = pb.getPanel ();
    +        p.setOpaque (false);
    +        p.setAlignmentX (Component.LEFT_ALIGNMENT);
    +
    +        OptionsBox wcb = new OptionsBox (this.viewer);
    +        wcb.setBorder (UIUtils.createPadding (10, 5, 10, 0));
    +
    +        wcb.addMain (p);
    +
    +        final JCheckBox sessWarn = UIUtils.createCheckBox ("Show a message when a target is reached");
    +
    +        wcb.addMain (sessWarn);
    +
    +        sessWarn.setSelected (userTargets.isShowMessageWhenSessionTargetReached ());
    +
    +        sessWarn.addActionListener (new ActionListener ()
    +        {
    +
    +            @Override
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                userTargets.setShowMessageWhenSessionTargetReached (sessWarn.isSelected ());
    +
    +                Environment.saveUserTargets ();
    +
    +            }
    +
    +        });
    +
    +        final JLabel history = UIUtils.createClickableLabel ("View Detail",
    +                                                             Environment.getIcon ("chart",
    +                                                                                  Constants.ICON_MENU),
    +                                                             new ActionListener ()
    +                                                             {
    +
    +                                                                @Override
    +                                                                public void actionPerformed (ActionEvent ev)
    +                                                                {
    +
    +                                                                    try
    +                                                                    {
    +
    +                                                                        _this.viewer.showChart (SessionWordCountChart.CHART_TYPE);
    +
    +                                                                    } catch (Exception e) {
    +
    +                                                                        Environment.logError ("Unable to show session word counts",
    +                                                                                              e);
    +
    +                                                                        UIUtils.showErrorMessage (_this.viewer,
    +                                                                                                  "Unable to show chart.");
    +
    +                                                                    }
    +
    +                                                                }
    +
    +                                                             });
    +
    +        wcb.addMain (history);
    +
    +        Accordion.Item wo = this.add (this.createHeader ("My Writing",
    +                                                        Constants.EDIT_ICON_NAME),
    +                                       null,
    +                                       wcb,
    +                                       UIUtils.createHelpTextPane ("Set yourself daily/weekly/session writing targets.",
    +                                                                   this.viewer));
    +
    +        // Chapter Word Counts
    +
    +        if (this.viewer instanceof AbstractProjectViewer)
    +        {
    +
    +            final AbstractProjectViewer pv = (AbstractProjectViewer) this.viewer;
    +
    +            final TargetsData projTargets = pv.getProjectTargets ();
    +
    +            fl = new FormLayout ("right:55px, 5px, [p,80px], 5px, p:grow",
    +                                 "p");
    +
    +            pb = new PanelBuilder (fl);
    +
    +            cc = new CellConstraints ();
    +
    +            r = 1;
    +
    +            pb.addLabel ("Maximum",
    +                         cc.xy (1,
    +                                r));
    +
    +            SpinnerNumberModel mwc = new SpinnerNumberModel (projTargets.getMaxChapterCount (),
    +                                                             0,
    +                                                             1000000,
    +                                                             50);
    +
    +            final JSpinner mwsp = new JSpinner (mwc);
    +/*
    +            ((JSpinner.DefaultEditor) mwsp.getEditor ()).getTextField ().addKeyListener (new KeyAdapter ()
    +            {
    +
    +                @Override
    +                public void keyReleased (KeyEvent ev)
    +                {
    +
    +                    System.out.println ("GOT: " + mwsp.getValue ());
    +
    +                }
    +
    +            });
    +  */
    +            mwsp.addChangeListener (new ChangeListener ()
    +            {
    +
    +                @Override
    +                public void stateChanged (ChangeEvent ev)
    +                {
    +
    +                    Number n = (Number) mwsp.getValue ();
    +
    +                    projTargets.setMaxChapterCount (n.intValue ());
    +
    +                    pv.saveProjectTargets ();
    +
    +                    _this.update ();
    +
    +                }
    +
    +            });
    +
    +            pb.add (mwsp,
    +                   cc.xy (3,
    +                          r));
    +            pb.addLabel ("words",
    +                         cc.xy (5,
    +                                r));
    +
    +            p = pb.getPanel ();
    +            p.setOpaque (false);
    +            p.setAlignmentX (Component.LEFT_ALIGNMENT);
    +
    +            wcb = new OptionsBox (this.viewer);
    +            wcb.setBorder (UIUtils.createPadding (10, 5, 10, 0));
    +
    +            final JCheckBox warn = UIUtils.createCheckBox ("Show a warning when a {chapter} exceeds the maximum");
    +
    +            warn.setSelected (projTargets.isShowMessageWhenMaxChapterCountExceeded ());
    +
    +            warn.addActionListener (new ActionListener ()
    +            {
    +
    +                @Override
    +                public void actionPerformed (ActionEvent ev)
    +                {
    +
    +                    projTargets.setShowMessageWhenMaxChapterCountExceeded (warn.isSelected ());
    +
    +                    pv.saveProjectTargets ();
    +
    +                }
    +
    +            });
    +
    +            wcb.addMain (p);
    +
    +            wcb.addMain (warn);
    +
    +            this.chaptersOverDisplay = UIUtils.createClickableLabel (null,
    +                                                                        Environment.getIcon (Constants.ERROR_ICON_NAME,
    +                                                                                             Constants.ICON_CLICKABLE_LABEL),
    +                                                     new ActionListener ()
    +                                                     {
    +
    +                                                        @Override
    +                                                        public void actionPerformed (ActionEvent ev)
    +                                                        {
    +
    +                                                            Targets.showChaptersOverWordTarget ((AbstractProjectViewer) _this.viewer,
    +                                                                                                _this.chaptersOverDisplay);
    +
    +                                                        }
    +
    +                                                     });
    +
    +
    +            wcb.addMain (this.chaptersOverDisplay);
    +
    +            final JLabel wchistory = UIUtils.createClickableLabel ("View Detail",
    +                                                                   Environment.getIcon ("chart",
    +                                                                                        Constants.ICON_MENU),
    +                                                                   new ActionListener ()
    +                                                                   {
    +
    +                                                                        @Override
    +                                                                        public void actionPerformed (ActionEvent ev)
    +                                                                        {
    +
    +                                                                            try
    +                                                                            {
    +
    +                                                                                _this.viewer.showChart (PerChapterWordCountsChart.CHART_TYPE);
    +
    +                                                                            } catch (Exception e) {
    +
    +                                                                                Environment.logError ("Unable to show per chapter word counts",
    +                                                                                                      e);
    +
    +                                                                                UIUtils.showErrorMessage (_this.viewer,
    +                                                                                                          "Unable to show chart.");
    +
    +                                                                            }
    +
    +                                                                        }
    +
    +                                                                   });
    +
    +            wcb.addMain (wchistory);
    +
    +            Accordion.Item wc = this.add (this.createHeader ("{Chapter} Word Count",
    +                                                            Chapter.OBJECT_TYPE),
    +                                           null,
    +                                           wcb,
    +                                           UIUtils.createHelpTextPane ("Specify the maximum number of words a chapter should have.",
    +                                                                       this.viewer));
    +
    +            fl = new FormLayout ("right:80px, 5px, [p,80px], 5px, p:grow",
    +                                 "p, 6px, p");
    +
    +            pb = new PanelBuilder (fl);
    +
    +            cc = new CellConstraints ();
    +
    +            r = 1;
    +
    +            pb.addLabel ("Flesch-Kincaid",
    +                         cc.xy (1,
    +                                r));
    +
    +            SpinnerNumberModel fkm = new SpinnerNumberModel (projTargets.getReadabilityFK (),
    +                                                             0,
    +                                                             30,
    +                                                             1);
    +
    +            final JSpinner fksp = new JSpinner (fkm);
    +
    +            fksp.addChangeListener (new ChangeListener ()
    +            {
    +
    +                @Override
    +                public void stateChanged (ChangeEvent ev)
    +                {
    +
    +                    Number n = (Number) fksp.getValue ();
    +
    +                    projTargets.setReadabilityFK (n.intValue ());
    +
    +                    pv.saveProjectTargets ();
    +
    +                    _this.update ();
    +
    +                }
    +
    +            });
    +
    +            pb.add (fksp,
    +                    cc.xy (3,
    +                           r));
    +
    +            r += 2;
    +
    +            pb.addLabel ("Gunning Fog",
    +                         cc.xy (1,
    +                                r));
    +
    +            SpinnerNumberModel gfm = new SpinnerNumberModel (projTargets.getReadabilityGF (),
    +                                                             0,
    +                                                             20,
    +                                                             1);
    +
    +            final JSpinner gfsp = new JSpinner (gfm);
    +
    +            gfsp.addChangeListener (new ChangeListener ()
    +            {
    +
    +                @Override
    +                public void stateChanged (ChangeEvent ev)
    +                {
    +
    +                    Number n = (Number) gfsp.getValue ();
    +
    +                    projTargets.setReadabilityGF (n.intValue ());
    +
    +                    pv.saveProjectTargets ();
    +
    +                    _this.update ();
    +
    +                }
    +
    +            });
    +
    +            pb.add (gfsp,
    +                    cc.xy (3,
    +                           r));
    +
    +            p = pb.getPanel ();
    +            p.setOpaque (false);
    +            p.setAlignmentX (Component.LEFT_ALIGNMENT);
    +
    +            OptionsBox rb = new OptionsBox (this.viewer);
    +            rb.setBorder (UIUtils.createPadding (10, 5, 10, 0));
    +
    +            rb.addMain (p);
    +
    +            this.readabilityOverDisplay = UIUtils.createClickableLabel (null,
    +                                                                     Environment.getIcon (Constants.ERROR_ICON_NAME,
    +                                                                                          Constants.ICON_CLICKABLE_LABEL),
    +                                                     new ActionListener ()
    +                                                     {
    +
    +                                                        @Override
    +                                                        public void actionPerformed (ActionEvent ev)
    +                                                        {
    +
    +                                                            Targets.showChaptersOverReadabilityTarget ((AbstractProjectViewer) _this.viewer,
    +                                                                                                       _this.readabilityOverDisplay);
    +
    +                                                        }
    +
    +                                                     });
    +
    +            rb.addMain (this.readabilityOverDisplay);
    +
    +            final JLabel rhistory = UIUtils.createClickableLabel ("View Detail",
    +                                                                  Environment.getIcon ("chart",
    +                                                                                       Constants.ICON_MENU),
    +                                                                   new ActionListener ()
    +                                                                   {
    +
    +                                                                        @Override
    +                                                                        public void actionPerformed (ActionEvent ev)
    +                                                                        {
    +
    +                                                                            try
    +                                                                            {
    +
    +                                                                                _this.viewer.showChart (ReadabilityIndicesChart.CHART_TYPE);
    +
    +                                                                            } catch (Exception e) {
    +
    +                                                                                Environment.logError ("Unable to show readability chart",
    +                                                                                                      e);
    +
    +                                                                                UIUtils.showErrorMessage (_this.viewer,
    +                                                                                                          "Unable to show chart.");
    +
    +                                                                            }
    +
    +                                                                        }
    +
    +                                                                   });
    +
    +            rb.addMain (rhistory);
    +
    +            Accordion.Item ri = this.add (this.createHeader ("Readability",
    +                                                            Constants.PROBLEM_FINDER_ICON_NAME),
    +                                          null,
    +                                          rb,
    +                                          null);
    +
    +            this.checkReadability ();
    +            this.checkChapters ();
    +
    +            this.viewer.schedule (new TimerTask ()
    +            {
    +
    +                @Override
    +                public void run ()
    +                {
    +
    +                    _this.update ();
    +
    +                }
    +
    +            },
    +            1 * 1000,
    +            2 * 1000);
    +
    +        }
    +
    +    }
    +
    +    public static void showChaptersOverWordTarget (final AbstractProjectViewer viewer,
    +                                                   final JComponent            showPopupAt)
    +    {
    +
    +        Set<Chapter> chaps = Targets.getChaptersOverWordTarget (viewer);
    +
    +        if (chaps.size () == 0)
    +        {
    +
    +            return;
    +
    +        }
    +
    +        TargetsData projTargets = viewer.getProjectTargets ();
    +
    +        int tcc = projTargets.getMaxChapterCount ();
    +
    +        String cols = "right:max(40px;p), 6px, right:max(40px;p), 6px, p:grow";
    +
    +        StringBuilder rb = new StringBuilder ();
    +
    +        for (int i = 0; i < chaps.size (); i++)
    +        {
    +
    +            rb.append ("top:p");
    +
    +            if (i < chaps.size () - 1)
    +            {
    +
    +                rb.append (", 6px, ");
    +
    +            }
    +
    +        }
    +
    +        String rows = rb.toString ();
    +
    +        FormLayout   fl = new FormLayout (cols,
    +                                          rows);
    +        PanelBuilder b = new PanelBuilder (fl);
    +        b.border (Borders.DIALOG);
    +
    +        CellConstraints cc = new CellConstraints ();
    +
    +        int r = 1;
    +
    +        boolean hasOver25 = false;
    +
    +        for (Chapter c : chaps)
    +        {
    +
    +            final Chapter _c = c;
    +
    +            JLabel l = UIUtils.createClickableLabel (c.getName (),
    +                                                     null,
    +                                                     new ActionListener ()
    +                                                     {
    +
    +                                                        @Override
    +                                                        public void actionPerformed (ActionEvent ev)
    +                                                        {
    +
    +                                                            viewer.viewObject (_c);
    +
    +                                                        }
    +
    +                                                     });
    +
    +            l.setToolTipText (String.format ("Click to view the {%s}",
    +                                             Chapter.OBJECT_TYPE));
    +
    +            ChapterCounts count = viewer.getChapterCounts (c);
    +
    +            int diff = count.wordCount - tcc;
    +
    +            int perc = Environment.getPercent (diff, tcc);
    +
    +            JLabel diffl = null;
    +
    +            if (perc >= 25)
    +            {
    +
    +                diffl = UIUtils.createErrorLabel (String.format ("+%s",
    +                                                                 Environment.formatNumber (count.wordCount - tcc)));
    +
    +                diffl.setIcon (null);
    +
    +                hasOver25 = true;
    +
    +            } else {
    +
    +                diffl = UIUtils.createLabel (String.format ("+%s",
    +                                                            Environment.formatNumber (count.wordCount - tcc)));
    +
    +            }
    +
    +            b.add (diffl,
    +                   cc.xy (5, r));
    +
    +            b.addLabel (String.format ("%s",
    +                                       Environment.formatNumber (count.wordCount)),
    +                        cc.xy (3, r));
    +
    +            b.add (l,
    +                   cc.xy (1, r));
    +
    +            r += 2;
    +
    +        }
    +
    +        JPanel p = b.getPanel ();
    +        p.setOpaque (false);
    +        p.setBorder (UIUtils.createPadding (5, 5, 10, 10));
    +        p.setAlignmentX (Component.LEFT_ALIGNMENT);
    +
    +        Box bb = new Box (BoxLayout.Y_AXIS);
    +
    +        if (hasOver25)
    +        {
    +
    +            JTextPane helpT = UIUtils.createHelpTextPane ("{Chapters} in red are 25% over the target, consider splitting them into two.",
    +                                                          viewer);
    +
    +            bb.add (helpT);
    +
    +        }
    +
    +        bb.add (p);
    +
    +        JButton cb = UIUtils.createButton ("Close",
    +                                           null);
    +
    +        JButton[] buts = { cb };
    +
    +        JComponent bs = UIUtils.createButtonBar2 (buts,
    +                                                  Component.CENTER_ALIGNMENT);
    +        bs.setAlignmentX (Component.LEFT_ALIGNMENT);
    +
    +        bb.add (bs);
    +
    +        bb.setBorder (UIUtils.createPadding (10, 5, 10, 5));
    +
    +        QPopup popup = UIUtils.createPopup ("{Chapters} over target word count",
    +                                            Constants.WORDCOUNT_ICON_NAME,
    +                                            bb,
    +                                            true,
    +                                            null);
    +
    +        cb.addActionListener (popup.getCloseAction ());
    +        popup.setRemoveOnClose (true);
    +
    +        viewer.showPopupAt (popup,
    +                            showPopupAt,
    +                            true);
    +
    +        popup.setDraggable (viewer);
    +
    +    }
    +
    +    public static void showChaptersOverReadabilityTarget (final AbstractProjectViewer viewer,
    +                                                          final JComponent            showPopupAt)
    +    {
    +
    +        Set<Chapter> chaps = Targets.getChaptersOverReadabilityTarget (viewer);
    +
    +        if (chaps.size () == 0)
    +        {
    +
    +            return;
    +
    +        }
    +
    +        TargetsData projTargets = viewer.getProjectTargets ();
    +
    +        int tcc = projTargets.getMaxChapterCount ();
    +        int tfk = projTargets.getReadabilityFK ();
    +        int tgf = projTargets.getReadabilityGF ();
    +
    +        // FK over, FK, GF over, GF, chapter
    +        String cols = "max(150px;p), 6px, right:max(40px;p), 6px, right:max(40px;p), 6px, right:max(40px;p), 6px, right:max(40px;p)";
    +
    +        StringBuilder rb = new StringBuilder ("top:p, 6px, ");
    +
    +        for (int i = 0; i < chaps.size (); i++)
    +        {
    +
    +            rb.append ("top:p");
    +
    +            if (i < chaps.size () - 1)
    +            {
    +
    +                rb.append (", 6px, ");
    +
    +            }
    +
    +        }
    +
    +        String rows = rb.toString ();
    +
    +        FormLayout   fl = new FormLayout (cols,
    +                                          rows);
    +        PanelBuilder b = new PanelBuilder (fl);
    +        b.border (Borders.DIALOG);
    +
    +        CellConstraints cc = new CellConstraints ();
    +
    +        int r = 1;
    +
    +        b.addLabel ("FK",
    +                    cc.xy (3, r));
    +
    +        b.addLabel ("GF",
    +                    cc.xy (7, r));
    +
    +        r += 2;
    +
    +        for (Chapter c : chaps)
    +        {
    +
    +            final Chapter _c = c;
    +
    +            JLabel l = UIUtils.createClickableLabel (c.getName (),
    +                                                     null,
    +                                                     new ActionListener ()
    +                                                     {
    +
    +                                                        @Override
    +                                                        public void actionPerformed (ActionEvent ev)
    +                                                        {
    +
    +                                                            viewer.viewObject (_c);
    +
    +                                                        }
    +
    +                                                     });
    +
    +            l.setToolTipText (String.format ("Click to view the {%s}",
    +                                             Chapter.OBJECT_TYPE));
    +
    +            ReadabilityIndices ri = viewer.getReadabilityIndices (c);
    +
    +            float fk = ri.getFleschKincaidGradeLevel ();
    +            float gf = ri.getGunningFogIndex ();
    +
    +            float diffFK = fk - tfk;
    +            float diffGF = gf - tgf;
    +
    +            JLabel diffFKl = null;
    +
    +            if (diffFK > 0)
    +            {
    +
    +                diffFKl = UIUtils.createLabel (String.format ("+%s",
    +                                                              Environment.formatNumber (diffFK)));
    +
    +            } else {
    +
    +                diffFKl = UIUtils.createLabel ("-");
    +
    +
    +            }
    +
    +            JLabel diffGFl = null;
    +
    +            if (diffGF > 0)
    +            {
    +
    +                diffGFl = UIUtils.createLabel (String.format ("+%s",
    +                                                              Environment.formatNumber (diffGF)));
    +
    +            } else {
    +
    +                diffGFl = UIUtils.createLabel ("-");
    +
    +
    +            }
    +
    +            b.add (diffFKl,
    +                   cc.xy (5, r));
    +
    +            b.addLabel (String.format ("%s",
    +                                       Environment.formatNumber (fk)),
    +                        cc.xy (3, r));
    +
    +            b.add (diffGFl,
    +                   cc.xy (9, r));
    +
    +            b.addLabel (String.format ("%s",
    +                                       Environment.formatNumber (gf)),
    +                        cc.xy (7, r));
    +
    +            b.add (l,
    +                   cc.xy (1, r));
    +
    +            r += 2;
    +
    +        }
    +
    +        JPanel p = b.getPanel ();
    +        p.setOpaque (false);
    +        p.setBorder (UIUtils.createPadding (10, 15, 15, 10));
    +        p.setAlignmentX (Component.LEFT_ALIGNMENT);
    +
    +        Box bb = new Box (BoxLayout.Y_AXIS);
    +
    +        bb.add (p);
    +
    +        JButton cb = UIUtils.createButton ("Close",
    +                                           null);
    +
    +        JButton[] buts = { cb };
    +
    +        JComponent bs = UIUtils.createButtonBar2 (buts,
    +                                                  Component.CENTER_ALIGNMENT);
    +        bs.setAlignmentX (Component.LEFT_ALIGNMENT);
    +
    +        bb.add (bs);
    +
    +        bb.setBorder (UIUtils.createPadding (10, 5, 10, 5));
    +
    +        QPopup popup = UIUtils.createPopup ("{Chapters} over readability target",
    +                                            Constants.PROBLEM_FINDER_ICON_NAME,
    +                                            bb,
    +                                            true,
    +                                            null);
    +
    +        cb.addActionListener (popup.getCloseAction ());
    +        popup.setRemoveOnClose (true);
    +
    +        viewer.showPopupAt (popup,
    +                            showPopupAt,
    +                            true);
    +
    +        popup.setDraggable (viewer);
    +
    +    }
    +
    +    private void update ()
    +    {
    +
    +        this.checkChapters ();
    +        this.checkReadability ();
    +
    +    }
    +
    +    private void checkReadability ()
    +    {
    +
    +        final AbstractProjectViewer pv = (AbstractProjectViewer) this.viewer;
    +
    +        if (pv.getProject () == null)
    +        {
    +
    +            // Closing down.
    +            return;
    +
    +        }
    +
    +        final TargetsData projTargets = pv.getProjectTargets ();
    +
    +        final Targets _this = this;
    +
    +        int tgf = projTargets.getReadabilityGF ();
    +        int tfk = projTargets.getReadabilityFK ();
    +
    +        int cc = 0;
    +
    +        if ((tgf > 0)
    +            ||
    +            (tfk > 0)
    +           )
    +        {
    +
    +            for (Book book : pv.getProject ().getBooks ())
    +            {
    +
    +                for (Chapter c : book.getChapters ())
    +                {
    +
    +                    ReadabilityIndices ri = pv.getReadabilityIndices (c);
    +
    +                    float fk = ri.getFleschKincaidGradeLevel ();
    +                    float gf = ri.getGunningFogIndex ();
    +
    +                    if ((tfk > 0)
    +                        &&
    +                        (ri.getFleschKincaidGradeLevel () > tfk)
    +                       )
    +                    {
    +
    +                        cc++;
    +
    +                        continue;
    +
    +                    }
    +
    +                    if ((tgf > 0)
    +                        &&
    +                        (ri.getGunningFogIndex () > tgf)
    +                       )
    +                    {
    +
    +                        cc++;
    +
    +                        continue;
    +
    +                    }
    +
    +                }
    +
    +            }
    +
    +        }
    +
    +        final int _cc = cc;
    +
    +        UIUtils.doLater (new ActionListener ()
    +        {
    +
    +            @Override
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                _this.readabilityOverDisplay.setVisible (_cc > 0);
    +
    +                if (_cc > 0)
    +                {
    +
    +                    _this.readabilityOverDisplay.setText (String.format ("%s {%s%s} exceed%s the target, click to view %s.",
    +                                                                         Environment.formatNumber (_cc),
    +                                                                         Chapter.OBJECT_TYPE,
    +                                                                         (_cc > 1 ? "s" : ""),
    +                                                                         (_cc > 1 ? "" : "s"),
    +                                                                         (_cc > 1 ? "them" : "it")));
    +
    +
    +                }
    +
    +            }
    +
    +        });
    +
    +    }
    +
    +    public static Set<Chapter> getChaptersOverWordTarget (AbstractProjectViewer viewer)
    +    {
    +
    +        Set<Chapter> chaps = new LinkedHashSet ();
    +
    +        if (viewer.getProject () == null)
    +        {
    +
    +            // Closing down.
    +            return chaps;
    +
    +        }
    +
    +        TargetsData projTargets = viewer.getProjectTargets ();
    +
    +        int tcc = projTargets.getMaxChapterCount ();
    +
    +        if (tcc > 0)
    +        {
    +
    +            for (Book book : viewer.getProject ().getBooks ())
    +            {
    +
    +                for (Chapter c : book.getChapters ())
    +                {
    +
    +                    ChapterCounts count = viewer.getChapterCounts (c);
    +
    +                    if (count.wordCount > tcc)
    +                    {
    +
    +                        chaps.add (c);
    +
    +                    }
    +
    +                }
    +
    +            }
    +
    +        }
    +
    +        return chaps;
    +
    +    }
    +
    +    public static Set<Chapter> getChaptersOverReadabilityTarget (AbstractProjectViewer viewer)
    +    {
    +
    +        Set<Chapter> chaps = new LinkedHashSet ();
    +
    +        if (viewer.getProject () == null)
    +        {
    +
    +            // Closing down.
    +            return chaps;
    +
    +        }
    +
    +        TargetsData projTargets = viewer.getProjectTargets ();
    +
    +        int tFK = projTargets.getReadabilityFK ();
    +        int tGF = projTargets.getReadabilityGF ();
    +
    +        if ((tFK > 0)
    +            ||
    +            (tGF > 0)
    +           )
    +        {
    +
    +            for (Book book : viewer.getProject ().getBooks ())
    +            {
    +
    +                for (Chapter c : book.getChapters ())
    +                {
    +
    +                    ReadabilityIndices ri = viewer.getReadabilityIndices (c);
    +
    +                    float fk = ri.getFleschKincaidGradeLevel ();
    +                    float gf = ri.getGunningFogIndex ();
    +
    +                    if ((tFK > 0)
    +                        &&
    +                        (ri.getFleschKincaidGradeLevel () > tFK)
    +                       )
    +                    {
    +
    +                        chaps.add (c);
    +
    +                        continue;
    +
    +                    }
    +
    +                    if ((tGF > 0)
    +                        &&
    +                        (ri.getGunningFogIndex () > tGF)
    +                       )
    +                    {
    +
    +                        chaps.add (c);
    +
    +                        continue;
    +
    +                    }
    +
    +                }
    +
    +            }
    +
    +        }
    +
    +        return chaps;
    +
    +    }
    +
    +    private void checkChapters ()
    +    {
    +
    +        final AbstractProjectViewer pv = (AbstractProjectViewer) this.viewer;
    +
    +        final TargetsData projTargets = pv.getProjectTargets ();
    +
    +        if (projTargets == null)
    +        {
    +
    +            return;
    +
    +        }
    +
    +        final Targets _this = this;
    +
    +        final int cc = Targets.getChaptersOverWordTarget (pv).size ();
    +
    +        UIUtils.doLater (new ActionListener ()
    +        {
    +
    +            @Override
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                _this.chaptersOverDisplay.setVisible (cc > 0);
    +
    +                if (cc > 0)
    +                {
    +
    +                    _this.chaptersOverDisplay.setText (String.format ("%s {%s%s} exceed%s the target, click to view %s.",
    +                                                                      Environment.formatNumber (cc),
    +                                                                      Chapter.OBJECT_TYPE,
    +                                                                      (cc > 1 ? "s" : ""),
    +                                                                      (cc > 1 ? "" : "s"),
    +                                                                      (cc > 1 ? "them" : "it")));
    +
    +
    +                }
    +
    +            }
    +
    +        });
    +
    +    }
    +
    +    private Header createHeader (String title,
    +                                 String iconType)
    +    {
    +
    +        Header h = UIUtils.createHeader (Environment.replaceObjectNames (title),
    +                                         Constants.SUB_PANEL_TITLE,
    +                                         iconType,
    +                                         null);
    +
    +        h.setBorder (UIUtils.createBottomLineWithPadding (0, 0, 3, 0));
    +
    +        return h;
    +
    +    }
    +
    +}
    \ No newline at end of file
    diff --git a/src/com/quollwriter/ui/TextPropertiesEditPanel.java b/src/com/quollwriter/ui/TextPropertiesEditPanel.java
    index cd940d9..df13aee 100644
    --- a/src/com/quollwriter/ui/TextPropertiesEditPanel.java
    +++ b/src/com/quollwriter/ui/TextPropertiesEditPanel.java
    @@ -30,7 +30,7 @@ import com.quollwriter.ui.components.TextProperties;
     public class TextPropertiesEditPanel extends Box
     {
    
    -    private AbstractProjectViewer projectViewer = null;
    +    private AbstractViewer viewer = null;
         private TextProperties textProps = null;
         private String eventType = null;
         private boolean showColorSelectors = false;
    @@ -46,21 +46,22 @@ public class TextPropertiesEditPanel extends Box
         private JPanel               textcolorSwatch = null;
         private JPanel               bgcolorSwatch = null;
         private JPanel               writingLineHighlightColorSwatch = null;
    +    private JSlider    textBorder = null;
    
         private Map<String, QPopup>  popups = new HashMap ();
    
    -    public TextPropertiesEditPanel (AbstractProjectViewer pv,
    -                                    TextProperties        props,
    -                                    String                eventType,
    -                                    boolean               showColorSelectors,
    -                                    PopupsSupported       popupParent)
    +    public TextPropertiesEditPanel (AbstractViewer  pv,
    +                                    TextProperties  props,
    +                                    String          eventType,
    +                                    boolean         showColorSelectors,
    +                                    PopupsSupported popupParent)
         {
    
             super (BoxLayout.Y_AXIS);
    
             this.textProps = props;
             this.eventType = eventType;
    -        this.projectViewer = pv;
    +        this.viewer = pv;
             this.showColorSelectors = showColorSelectors;
             this.popupParent = popupParent;
    
    @@ -93,7 +94,7 @@ public class TextPropertiesEditPanel extends Box
    
         }
    
    -    public void init ()
    +    public void init_old ()
         {
    
             final TextPropertiesEditPanel _this = this;
    @@ -124,8 +125,8 @@ public class TextPropertiesEditPanel extends Box
                 public void actionPerformed (ActionEvent ev)
                 {
    
    -                _this.projectViewer.fireProjectEvent (_this.eventType,
    -                                                      ProjectEvent.CHANGE_FONT);
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_FONT);
    
                 }
    
    @@ -150,8 +151,8 @@ public class TextPropertiesEditPanel extends Box
                 public void actionPerformed (ActionEvent ev)
                 {
    
    -                _this.projectViewer.fireProjectEvent (_this.eventType,
    -                                                      ProjectEvent.CHANGE_FONT_SIZE);
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_FONT_SIZE);
    
                 }
    
    @@ -176,8 +177,8 @@ public class TextPropertiesEditPanel extends Box
                 public void actionPerformed (ActionEvent ev)
                 {
    
    -                _this.projectViewer.fireProjectEvent (_this.eventType,
    -                                                      ProjectEvent.CHANGE_ALIGNMENT);
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_ALIGNMENT);
    
                 }
    
    @@ -202,8 +203,8 @@ public class TextPropertiesEditPanel extends Box
                 public void actionPerformed (ActionEvent ev)
                 {
    
    -                _this.projectViewer.fireProjectEvent (_this.eventType,
    -                                                      ProjectEvent.CHANGE_LINE_SPACING);
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_LINE_SPACING);
    
                 }
    
    @@ -228,8 +229,8 @@ public class TextPropertiesEditPanel extends Box
    
                     _this.textProps.setFirstLineIndent (_this.indent.isSelected ());
    
    -                _this.projectViewer.fireProjectEvent (_this.eventType,
    -                                                      ProjectEvent.CHANGE_LINE_INDENT);
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_LINE_INDENT);
    
                 }
    
    @@ -253,8 +254,8 @@ public class TextPropertiesEditPanel extends Box
    
                     _this.textProps.setHighlightWritingLine (_this.highlightWritingLine.isSelected ());
    
    -                _this.projectViewer.fireProjectEvent (_this.eventType,
    -                                                      ProjectEvent.CHANGE_HIGHLIGHT_WRITING_LINE);
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_HIGHLIGHT_WRITING_LINE);
    
                 }
    
    @@ -280,7 +281,7 @@ public class TextPropertiesEditPanel extends Box
                 public void mouseReleased (MouseEvent ev)
                 {
    
    -                String colors = _this.projectViewer.getProject ().getProperty (Constants.COLOR_SWATCHES_PROPERTY_NAME);
    +                String colors = Environment.getUserProperties ().getProperty (Constants.COLOR_SWATCHES_PROPERTY_NAME);
    
                     Color writingLineColor = _this.textProps.getWritingLineColor ();
    
    @@ -369,7 +370,7 @@ public class TextPropertiesEditPanel extends Box
                     public void mouseReleased (MouseEvent ev)
                     {
    
    -                    String colors = _this.projectViewer.getProject ().getProperty (Constants.COLOR_SWATCHES_PROPERTY_NAME);
    +                    String colors = Environment.getUserProperties ().getProperty (Constants.COLOR_SWATCHES_PROPERTY_NAME);
    
                         Color textcolor = _this.textProps.getTextColor ();
    
    @@ -394,8 +395,8 @@ public class TextPropertiesEditPanel extends Box
    
                                                                                  bgcolorSwatch.setBackground (_this.textProps.getBackgroundColor ());
    
    -                                                                             _this.projectViewer.fireProjectEvent (_this.eventType,
    -                                                                                                                   ProjectEvent.CHANGE_FONT_COLOR);
    +                                                                             _this.viewer.fireProjectEvent (_this.eventType,
    +                                                                                                            ProjectEvent.CHANGE_FONT_COLOR);
    
                                                                              }
    
    @@ -456,7 +457,7 @@ public class TextPropertiesEditPanel extends Box
                     public void mouseReleased (MouseEvent ev)
                     {
    
    -                    String colors = _this.projectViewer.getProject ().getProperty (Constants.COLOR_SWATCHES_PROPERTY_NAME);
    +                    String colors = Environment.getUserProperties ().getProperty (Constants.COLOR_SWATCHES_PROPERTY_NAME);
    
                         Color bgcolor = _this.textProps.getBackgroundColor ();
    
    @@ -484,8 +485,8 @@ public class TextPropertiesEditPanel extends Box
                                                                                 bgcolorSwatch.setBackground (c);
                                                                                 textcolorSwatch.setBackground (_this.textProps.getTextColor ());
    
    -                                                                            _this.projectViewer.fireProjectEvent (_this.eventType,
    -                                                                                                                  ProjectEvent.CHANGE_BG_COLOR);
    +                                                                            _this.viewer.fireProjectEvent (_this.eventType,
    +                                                                                                           ProjectEvent.CHANGE_BG_COLOR);
    
                                                                             }
    
    @@ -576,4 +577,481 @@ public class TextPropertiesEditPanel extends Box
    
         }
    
    +    private void addItem (String     label,
    +                          JComponent comp,
    +                          JComponent addTo)
    +    {
    +
    +        if (label != null)
    +        {
    +
    +            addTo.add (UIUtils.createLabel (label));
    +
    +        }
    +
    +        if (comp != null)
    +        {
    +
    +            Box b = new Box (BoxLayout.X_AXIS);
    +
    +            b.setAlignmentX (JComponent.LEFT_ALIGNMENT);
    +
    +            b.setBorder (UIUtils.createPadding ((label != null ? 5 : 0), 10, 10, 0));
    +
    +            comp.setAlignmentX (JComponent.LEFT_ALIGNMENT);
    +
    +            b.add (comp);
    +
    +            addTo.add (b);
    +
    +        }
    +
    +    }
    +
    +    public void init ()
    +    {
    +
    +        final TextPropertiesEditPanel _this = this;
    +
    +        Box layout = new Box (BoxLayout.Y_AXIS);
    +
    +        layout.setBorder (UIUtils.createPadding (5, 5, 5, 5));
    +
    +        this.fonts = UIUtils.getFontsComboBox (this.textProps.getFontFamily (),
    +                                               this.textProps);
    +
    +        this.fonts.addActionListener (new ActionAdapter ()
    +        {
    +
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_FONT);
    +
    +            }
    +
    +        });
    +
    +        this.addItem ("Font",
    +                      this.fonts,
    +                      layout);
    +
    +        this.sizes = UIUtils.getFontSizesComboBox (this.textProps.getFontSize (),
    +                                                   this.textProps);
    +
    +        this.sizes.addActionListener (new ActionAdapter ()
    +        {
    +
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_FONT_SIZE);
    +
    +            }
    +
    +        });
    +
    +        this.addItem ("Size",
    +                      this.sizes,
    +                      layout);
    +
    +        this.align = UIUtils.getAlignmentComboBox (this.textProps.getAlignment (),
    +                                                   this.textProps);
    +
    +        this.align.addActionListener (new ActionAdapter ()
    +        {
    +
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_ALIGNMENT);
    +
    +            }
    +
    +        });
    +
    +        this.addItem ("Alignment",
    +                      this.align,
    +                      layout);
    +
    +        this.line = UIUtils.getLineSpacingComboBox (this.textProps.getLineSpacing (),
    +                                                    this.textProps);
    +
    +        this.line.addActionListener (new ActionAdapter ()
    +        {
    +
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_LINE_SPACING);
    +
    +            }
    +
    +        });
    +
    +        this.addItem ("Line Spacing",
    +                      this.line,
    +                      layout);
    +
    +        this.textBorder = new JSlider (SwingConstants.HORIZONTAL,
    +                                       0,
    +                                       15,
    +                                       0);
    +        this.textBorder.setToolTipText ("Drag to change the size of the border between the edge of the writing area and the text");
    +        this.textBorder.addChangeListener (new ChangeAdapter ()
    +        {
    +
    +            public void stateChanged (ChangeEvent ev)
    +            {
    +
    +                _this.textProps.setTextBorder (_this.textBorder.getValue () * 5);
    +
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_TEXT_BORDER);
    +
    +
    +            }
    +
    +        });
    +
    +        textBorder.setOpaque (false);
    +        textBorder.setMaximumSize (new Dimension (150, 20));
    +
    +        this.addItem ("Text Border Width",
    +                      textBorder,
    +                      layout);
    +
    +        this.indent = new JCheckBox ("<html>Indent the first line of each paragraph</html>");
    +        this.indent.setVerticalTextPosition (SwingConstants.TOP);
    +        this.indent.setOpaque (false);
    +        this.indent.setSelected (this.textProps.getFirstLineIndent ());
    +
    +        this.indent.addActionListener (new ActionAdapter ()
    +        {
    +
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                _this.textProps.setFirstLineIndent (_this.indent.isSelected ());
    +
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_LINE_INDENT);
    +
    +            }
    +
    +        });
    +
    +        this.addItem (null,
    +                      this.indent,
    +                      layout);
    +
    +        this.highlightWritingLine = new JCheckBox ("Highlight the writing line");
    +        this.highlightWritingLine.setOpaque (false);
    +        this.highlightWritingLine.setSelected (this.textProps.isHighlightWritingLine ());
    +
    +        this.highlightWritingLine.addActionListener (new ActionAdapter ()
    +        {
    +
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                _this.textProps.setHighlightWritingLine (_this.highlightWritingLine.isSelected ());
    +
    +                _this.viewer.fireProjectEvent (_this.eventType,
    +                                               ProjectEvent.CHANGE_HIGHLIGHT_WRITING_LINE);
    +
    +            }
    +
    +        });
    +
    +        this.addItem (null,
    +                      this.highlightWritingLine,
    +                      layout);
    +
    +        this.writingLineHighlightColorSwatch = QColorChooser.getSwatch (_this.textProps.getWritingLineColor ());
    +
    +        UIUtils.setAsButton (this.writingLineHighlightColorSwatch);
    +
    +        this.writingLineHighlightColorSwatch.addMouseListener (new MouseAdapter ()
    +        {
    +
    +            public void mouseReleased (MouseEvent ev)
    +            {
    +
    +                String colors = Environment.getUserProperties ().getProperty (Constants.COLOR_SWATCHES_PROPERTY_NAME);
    +
    +                Color writingLineColor = _this.textProps.getWritingLineColor ();
    +
    +                QPopup popup = _this.popups.get ("writingline");
    +
    +                if (popup == null)
    +                {
    +
    +                    popup = QColorChooser.getColorChooserPopup (colors,
    +                                                                writingLineColor,
    +                                                                new ChangeAdapter ()
    +                                                                {
    +
    +                                                                    public void stateChanged (ChangeEvent ev)
    +                                                                    {
    +
    +                                                                        Color c = (Color) ev.getSource ();
    +
    +                                                                        _this.writingLineHighlightColorSwatch.setBackground (c);
    +
    +                                                                        _this.textProps.setWritingLineColor (c);
    +
    +                                                                    }
    +
    +                                                                },
    +                                                                new ActionAdapter ()
    +                                                                {
    +
    +                                                                    public void actionPerformed (ActionEvent ev)
    +                                                                    {
    +
    +                                                                        QPopup p = _this.popups.remove ("writingline");
    +
    +                                                                        p.removeFromParent ();
    +
    +                                                                    }
    +
    +                                                                });
    +
    +                    _this.popups.put ("writingline",
    +                                      popup);
    +
    +                }
    +
    +                int x = ev.getXOnScreen ();
    +                int y = ev.getYOnScreen ();
    +
    +                Dimension d = Toolkit.getDefaultToolkit ().getScreenSize ();
    +
    +                if ((y + popup.getPreferredSize ().height) > d.height)
    +                {
    +
    +                    y -= popup.getPreferredSize ().height;
    +
    +                }
    +
    +                _this.popupParent.showPopupAt (popup,
    +                                               _this.writingLineHighlightColorSwatch,
    +                                               true);
    +
    +            }
    +
    +        });
    +
    +        this.addItem ("Highlight line",
    +                      this.writingLineHighlightColorSwatch,
    +                      layout);
    +
    +        if (this.showColorSelectors)
    +        {
    +
    +            this.textcolorSwatch = QColorChooser.getSwatch (this.textProps.getTextColor ());
    +            UIUtils.setAsButton (this.textcolorSwatch);
    +            this.bgcolorSwatch = QColorChooser.getSwatch (this.textProps.getBackgroundColor ());
    +            UIUtils.setAsButton (this.bgcolorSwatch);
    +
    +            this.textcolorSwatch.addMouseListener (new MouseAdapter ()
    +            {
    +
    +                public void mouseReleased (MouseEvent ev)
    +                {
    +
    +                    String colors = Environment.getUserProperties ().getProperty (Constants.COLOR_SWATCHES_PROPERTY_NAME);
    +
    +                    Color textcolor = _this.textProps.getTextColor ();
    +
    +                    QPopup popup = _this.popups.get ("textcolor");
    +
    +                    if (popup == null)
    +                    {
    +
    +                        popup = QColorChooser.getColorChooserPopup (colors,
    +                                                                    textcolor,
    +                                                                    new ChangeAdapter ()
    +                                                                    {
    +
    +                                                                         public void stateChanged (ChangeEvent ev)
    +                                                                         {
    +
    +                                                                             Color c = (Color) ev.getSource ();
    +
    +                                                                             _this.textProps.setTextColor (c);
    +
    +                                                                             textcolorSwatch.setBackground (c);
    +
    +                                                                             bgcolorSwatch.setBackground (_this.textProps.getBackgroundColor ());
    +
    +                                                                             _this.viewer.fireProjectEvent (_this.eventType,
    +                                                                                                            ProjectEvent.CHANGE_FONT_COLOR);
    +
    +                                                                         }
    +
    +                                                                     },
    +                                                                    new ActionAdapter ()
    +                                                                    {
    +
    +                                                                        public void actionPerformed (ActionEvent ev)
    +                                                                        {
    +
    +                                                                            QPopup p = _this.popups.remove ("textcolor");
    +
    +                                                                            p.removeFromParent ();
    +
    +                                                                        }
    +
    +                                                                    });
    +
    +                        _this.popups.put ("textcolor",
    +                                          popup);
    +
    +                    }
    +
    +                    int x = ev.getXOnScreen ();
    +                    int y = ev.getYOnScreen ();
    +
    +                    Dimension d = Toolkit.getDefaultToolkit ().getScreenSize ();
    +
    +                    if ((y + popup.getPreferredSize ().height) > d.height)
    +                    {
    +
    +                        y -= popup.getPreferredSize ().height;
    +
    +                    }
    +
    +                    _this.popupParent.showPopupAt (popup,
    +                                                   _this.textcolorSwatch,
    +                                                   true);
    +                                                   //new Point (x, y));
    +
    +                }
    +
    +            });
    +
    +            this.addItem ("Text",
    +                          this.textcolorSwatch,
    +                          layout);
    +
    +            bgcolorSwatch.addMouseListener (new MouseAdapter ()
    +            {
    +
    +                public void mouseReleased (MouseEvent ev)
    +                {
    +
    +                    String colors = Environment.getUserProperties ().getProperty (Constants.COLOR_SWATCHES_PROPERTY_NAME);
    +
    +                    Color bgcolor = _this.textProps.getBackgroundColor ();
    +
    +                    QPopup popup = _this.popups.get ("bgcolor");
    +
    +                    if (popup == null)
    +                    {
    +
    +                        popup = QColorChooser.getColorChooserPopup (colors,
    +                                                                    bgcolor,
    +                                                                    new ChangeAdapter ()
    +                                                                    {
    +
    +                                                                        public void stateChanged (ChangeEvent ev)
    +                                                                        {
    +
    +                                                                            Color c = (Color) ev.getSource ();
    +
    +                                                                            _this.textProps.setBackgroundColor (c);
    +
    +                                                                            //_this.fsf.setBackgroundColor (c);
    +
    +                                                                            //_this.sizeBoxWrapper.setBackground (c);
    +
    +                                                                            bgcolorSwatch.setBackground (c);
    +                                                                            textcolorSwatch.setBackground (_this.textProps.getTextColor ());
    +
    +                                                                            _this.viewer.fireProjectEvent (_this.eventType,
    +                                                                                                           ProjectEvent.CHANGE_BG_COLOR);
    +
    +                                                                        }
    +
    +                                                                    },
    +                                                                     new ActionAdapter ()
    +                                                                     {
    +
    +                                                                        public void actionPerformed (ActionEvent ev)
    +                                                                        {
    +
    +                                                                          QPopup p = _this.popups.remove ("bgcolor");
    +
    +                                                                          p.removeFromParent ();
    +
    +                                                                        }
    +
    +                                                                    });
    +
    +                        _this.popups.put ("bgcolor",
    +                                          popup);
    +
    +                    }
    +
    +                    int x = ev.getXOnScreen ();
    +                    int y = ev.getYOnScreen ();
    +
    +                    Dimension d = Toolkit.getDefaultToolkit ().getScreenSize ();
    +
    +                    if ((y + popup.getPreferredSize ().height) > d.height)
    +                    {
    +
    +                        y -= popup.getPreferredSize ().height;
    +
    +                    }
    +
    +                    _this.popupParent.showPopupAt (popup,
    +                                                   new Point (x, y),
    +                                                   true);
    +
    +                }
    +
    +            });
    +
    +            this.addItem ("Background",
    +                          this.bgcolorSwatch,
    +                          layout);
    +
    +            //this.fsf.setFontColor (this.fullScreenTextProperties.getTextColor ());
    +
    +            //this.fsf.setBackgroundColor (this.fullScreenTextProperties.getBackgroundColor ());
    +
    +            final JLabel reset = UIUtils.createClickableLabel ("Reset to defaults",
    +                                                               null);
    +
    +            reset.setToolTipText ("Click to reset the text properties to their default values");
    +
    +            reset.addMouseListener (new MouseAdapter ()
    +            {
    +
    +                public void mouseReleased (MouseEvent ev)
    +                {
    +
    +                    _this.textProps.resetToDefaults ();
    +
    +                }
    +
    +            });
    +
    +            this.addItem (null,
    +                          reset,
    +                          layout);
    +
    +        }
    +
    +        this.add (layout);
    +
    +    }
    +
     }
    diff --git a/src/com/quollwriter/ui/Tips.java b/src/com/quollwriter/ui/Tips.java
    index 8935853..d317a34 100644
    --- a/src/com/quollwriter/ui/Tips.java
    +++ b/src/com/quollwriter/ui/Tips.java
    @@ -241,7 +241,7 @@ public class Tips
                                 if (c.equals ("chaptertab"))
                                 {
    
    -                                v = (qp.getForObject () instanceof Chapter);
    +                                v = (((ProjectObjectQuollPanel) qp).getForObject () instanceof Chapter);
    
                                 }
    
    diff --git a/src/com/quollwriter/ui/UIUtils.java b/src/com/quollwriter/ui/UIUtils.java
    index 45efa1b..738abd2 100644
    --- a/src/com/quollwriter/ui/UIUtils.java
    +++ b/src/com/quollwriter/ui/UIUtils.java
    @@ -100,6 +100,11 @@ public class UIUtils
         private static int DEFAULT_POPUP_WIDTH = 450;
         public static int DEFAULT_SCROLL_BY_AMOUNT = 20;
    
    +    public static final Point defaultLeftCornerShowPopupAt = new Point (10, 10);
    +
    +    // Deliberately null so that the center of the window is found when the popup is shown.
    +    public static final Point defaultCenterShowPopupAt = null;
    +
         public static Font headerFont = null;
    
         public static final Border textFieldSpacing = new EmptyBorder (3,
    @@ -1193,6 +1198,15 @@ public class UIUtils
         public static JCheckBox createCheckBox (String text)
         {
    
    +        return UIUtils.createCheckBox (text,
    +                                       null);
    +
    +    }
    +
    +    public static JCheckBox createCheckBox (String         text,
    +                                            ActionListener onClick)
    +    {
    +
             JCheckBox b = new JCheckBox ()
             {
    
    @@ -1211,6 +1225,16 @@ public class UIUtils
             b.setBackground (null);
             b.setOpaque (false);
    
    +        if (onClick != null)
    +        {
    +
    +            b.addActionListener (onClick);
    +
    +        }
    +
    +        b.setVerticalTextPosition (SwingConstants.TOP);
    +        b.setVerticalAlignment (SwingConstants.TOP);
    +
             return b;
    
         }
    @@ -2160,7 +2184,7 @@ public class UIUtils
             if (parent instanceof QuollPanel)
             {
    
    -            UIUtils.showErrorMessage ((PopupsSupported) ((QuollPanel) parent).getProjectViewer (),
    +            UIUtils.showErrorMessage ((PopupsSupported) ((QuollPanel) parent).getViewer (),
                                           message);
    
                 return;
    @@ -2259,7 +2283,7 @@ public class UIUtils
             });
    
         }
    -
    +
         public static void showMessage (final PopupsSupported parent,
                                         final String          title,
                                         final Component       message,
    @@ -2267,6 +2291,23 @@ public class UIUtils
                                         final ActionListener  onConfirm)
         {
    
    +        UIUtils.showMessage (parent,
    +                             title,
    +                             message,
    +                             confirmButtonLabel,
    +                             onConfirm,
    +                             null);
    +
    +    }
    +
    +    public static void showMessage (final PopupsSupported parent,
    +                                    final String          title,
    +                                    final Component       message,
    +                                    final String          confirmButtonLabel,
    +                                    final ActionListener  onConfirm,
    +                                    final Point           showAt)
    +    {
    +
             if (parent == null)
             {
    
    @@ -2319,8 +2360,8 @@ public class UIUtils
                                                         content.getPreferredSize ().height));
    
                     parent.showPopupAt (ep,
    -                                    UIUtils.getCenterShowPosition ((Component) parent,
    -                                                                   ep),
    +                                    (showAt != null ? showAt : UIUtils.getCenterShowPosition ((Component) parent,
    +                                                                                              ep)),
                                         false);
                     ep.setDraggable ((Component) parent);
    
    @@ -2337,6 +2378,23 @@ public class UIUtils
                                         final ActionListener  onConfirm)
         {
    
    +        UIUtils.showMessage (parent,
    +                             title,
    +                             message,
    +                             confirmButtonLabel,
    +                             onConfirm,
    +                             null);
    +
    +    }
    +
    +    public static void showMessage (final PopupsSupported parent,
    +                                    final String          title,
    +                                    final String          message,
    +                                    final String          confirmButtonLabel,
    +                                    final ActionListener  onConfirm,
    +                                    final Point           showAt)
    +    {
    +
             AbstractProjectViewer pv = null;
    
             if (parent instanceof AbstractProjectViewer)
    @@ -2357,7 +2415,8 @@ public class UIUtils
                                  title,
                                  m,
                                  confirmButtonLabel,
    -                             onConfirm);
    +                             onConfirm,
    +                             showAt);
    
         }
    
    @@ -2369,9 +2428,23 @@ public class UIUtils
             UIUtils.showMessage (parent,
                                  title,
                                  message,
    -                             null,
                                  null);
    
    +    }
    +
    +    public static void showMessage (PopupsSupported parent,
    +                                    String          title,
    +                                    String          message,
    +                                    Point           showAt)
    +    {
    +
    +        UIUtils.showMessage (parent,
    +                             title,
    +                             message,
    +                             null,
    +                             null,
    +                             showAt);
    +
         }
    
         public static void showMessage (AbstractViewer parent,
    @@ -2423,7 +2496,7 @@ public class UIUtils
             if (parent instanceof QuollPanel)
             {
    
    -            UIUtils.showMessage ((PopupsSupported) ((QuollPanel) parent).getProjectViewer (),
    +            UIUtils.showMessage ((PopupsSupported) ((QuollPanel) parent).getViewer (),
                                      title,
                                      message,
                                      confirmButtonLabel,
    @@ -2573,6 +2646,15 @@ public class UIUtils
                 public void setText (String t)
                 {
    
    +                if (t == null)
    +                {
    +
    +                    super.setText ("");
    +
    +                    return;
    +
    +                }
    +
                     super.setText (String.format ("<html><i>%s</i></html>",
                                                   Environment.replaceObjectNames (t)));
    
    @@ -2628,6 +2710,15 @@ public class UIUtils
    
                 }
    
    +            @Override
    +            public void setToolTipText (String t)
    +            {
    +
    +                super.setText (String.format ("%s",
    +                                              Environment.replaceObjectNames (t)));
    +
    +            }
    +
             };
    
             err.setText (message);
    @@ -2642,6 +2733,38 @@ public class UIUtils
    
         }
    
    +    public static JLabel createLabel (String message)
    +    {
    +
    +        JLabel err = new JLabel ()
    +        {
    +
    +            @Override
    +            public void setText (String t)
    +            {
    +
    +                super.setText (String.format ("<html>%s</html>",
    +                                              Environment.replaceObjectNames (t)));
    +
    +            }
    +
    +            @Override
    +            public void setToolTipText (String t)
    +            {
    +
    +                super.setToolTipText (Environment.replaceObjectNames (t));
    +
    +            }
    +
    +        };
    +
    +        err.setText (message);
    +        err.setAlignmentX (Component.LEFT_ALIGNMENT);
    +
    +        return err;
    +
    +    }
    +
         public static void createPopupMenuLabels (Map labels)
         {
    
    @@ -4634,7 +4757,7 @@ public class UIUtils
             if (parent instanceof QuollPanel)
             {
    
    -            return ((QuollPanel) parent).getProjectViewer ();
    +            return ((QuollPanel) parent).getViewer ();
    
             }
    
    @@ -4964,10 +5087,10 @@ public class UIUtils
    
         }
    
    -    public static JTextPane createObjectDescriptionViewPane (final StringWithMarkup      description,
    -                                                             final NamedObject           n,
    -                                                             final AbstractProjectViewer pv,
    -                                                             final QuollPanel            qp)
    +    public static JTextPane createObjectDescriptionViewPane (final StringWithMarkup        description,
    +                                                             final NamedObject             n,
    +                                                             final AbstractProjectViewer   pv,
    +                                                             final ProjectObjectQuollPanel qp)
         {
    
             // TODO: Markup to html?
    @@ -4978,10 +5101,10 @@ public class UIUtils
    
         }
    
    -    public static JTextPane createObjectDescriptionViewPane (final String                description,
    -                                                             final NamedObject           n,
    -                                                             final AbstractProjectViewer pv,
    -                                                             final QuollPanel            qp)
    +    public static JTextPane createObjectDescriptionViewPane (final String                  description,
    +                                                             final NamedObject             n,
    +                                                             final AbstractProjectViewer   pv,
    +                                                             final ProjectObjectQuollPanel qp)
         {
    
             HTMLEditorKit kit = new HTMLEditorKit ();
    @@ -5601,39 +5724,17 @@ public class UIUtils
    
         }
    
    -    public static JLabel createClickableLabel (final String         title,
    -                                               final Icon           icon,
    -                                               final ActionListener onClick)
    +    public static void makeClickable (final JLabel l,
    +                                      final ActionListener onClick)
         {
    
    -        final JLabel l = new JLabel (null,
    -                                     icon,
    -                                     SwingConstants.LEFT)
    -        {
    -
    -            @Override
    -            public void setText (String t)
    -            {
    -
    -                super.setText (String.format ("<html>%s</html>",
    -                                              Environment.replaceObjectNames (t)));
    -
    -            }
    -
    -        };
    -
    -        l.setText (title);
    -        l.setForeground (UIUtils.getColor (Constants.HTML_LINK_COLOR));
    -        l.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));
    -        l.setVerticalAlignment (SwingConstants.TOP);
    -        l.setVerticalTextPosition (SwingConstants.TOP);
             l.addMouseListener (new MouseEventHandler ()
             {
    
                 @Override
                 public void handlePress (MouseEvent ev)
                 {
    -
    +
                     if (onClick != null)
                     {
    
    @@ -5678,7 +5779,97 @@ public class UIUtils
                 }
     */
             });
    +
    +        l.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));
    +
    +    }
    +
    +    public static JLabel createClickableLabel (final String         title,
    +                                               final Icon           icon,
    +                                               final ActionListener onClick)
    +    {
    
    +        final JLabel l = new JLabel (null,
    +                                     icon,
    +                                     SwingConstants.LEFT)
    +        {
    +
    +            @Override
    +            public void setText (String t)
    +            {
    +
    +                super.setText (String.format ("<html>%s</html>",
    +                                              Environment.replaceObjectNames (t)));
    +
    +            }
    +
    +            @Override
    +            public void setToolTipText (String t)
    +            {
    +
    +                super.setToolTipText (String.format ("%s",
    +                                                     Environment.replaceObjectNames (t)));
    +
    +            }
    +
    +        };
    +
    +        l.setText (title);
    +        l.setForeground (UIUtils.getColor (Constants.HTML_LINK_COLOR));
    +        l.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));
    +        l.setVerticalAlignment (SwingConstants.TOP);
    +        l.setVerticalTextPosition (SwingConstants.TOP);
    +        UIUtils.makeClickable (l,
    +                               onClick);
    +
    +        return l;
    +
    +    }
    +
    +    public static JLabel createLabel (final String         title,
    +                                      final Icon           icon,
    +                                      final ActionListener onClick)
    +    {
    +
    +        final JLabel l = new JLabel (null,
    +                                     icon,
    +                                     SwingConstants.LEFT)
    +        {
    +
    +            @Override
    +            public void setText (String t)
    +            {
    +
    +                super.setText (String.format ("<html>%s</html>",
    +                                              Environment.replaceObjectNames (t)));
    +
    +            }
    +
    +            @Override
    +            public void setToolTipText (String t)
    +            {
    +
    +                super.setToolTipText (String.format ("%s",
    +                                                     Environment.replaceObjectNames (t)));
    +
    +            }
    +
    +        };
    +
    +        l.setText (title);
    +
    +        if (onClick != null)
    +        {
    +
    +            l.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));
    +            UIUtils.makeClickable (l,
    +                                   onClick);
    +
    +        }
    +
    +        l.setVerticalAlignment (SwingConstants.TOP);
    +        l.setVerticalTextPosition (SwingConstants.TOP);
    +
             return l;
    
         }
    @@ -6438,7 +6629,7 @@ public class UIUtils
         public static int getSplitPaneDividerSize ()
         {
    
    -        return 7;
    +        return 2;
    
         }
    
    diff --git a/src/com/quollwriter/ui/WarmupsViewer.java b/src/com/quollwriter/ui/WarmupsViewer.java
    index aa8c981..95a7dec 100644
    --- a/src/com/quollwriter/ui/WarmupsViewer.java
    +++ b/src/com/quollwriter/ui/WarmupsViewer.java
    @@ -765,9 +765,9 @@ public class WarmupsViewer extends AbstractProjectViewer
    
             });
    
    -        final QuollPanel qpp = wep;
    +        final QuollPanel _wep = wep;
    
    -        qpp.addObjectPropertyChangedListener (new PropertyChangedListener ()
    +        wep.addObjectPropertyChangedListener (new PropertyChangedListener ()
             {
    
                 @Override
    @@ -777,36 +777,18 @@ public class WarmupsViewer extends AbstractProjectViewer
                     if (ev.getChangeType ().equals (NamedObject.NAME))
                     {
    
    -                    _this.setTabHeaderTitle (qpp,
    -                                             qpp.getTitle ());
    +                    _this.setTabHeaderTitle (_wep,
    +                                             _wep.getTitle ());
    
                         _this.informTreeOfNodeChange (c,
    -                                                  _this.getWarmupsTree ());//c.getObjectType ()));
    +                                                  _this.getWarmupsTree ());
    
                     }
    
                 }
    
             });
    -            /*
    -        c.addPropertyChangedListener (new PropertyChangedListener ()
    -        {
    -
    -            public void propertyChanged (PropertyChangedEvent ev)
    -            {
    
    -                if (ev.getChangeType ().equals (NamedObject.NAME))
    -                {
    -
    -                    th.setTitle (qpp.getTitle ());
    -                    _this.getWarmupsTree ().repaint ();
    -
    -                }
    -
    -            }
    -
    -        });
    -*/
             // Open the tab :)
             return this.editWarmup (w);
    
    diff --git a/src/com/quollwriter/ui/charts/AbstractQuollChart.java b/src/com/quollwriter/ui/charts/AbstractQuollChart.java
    new file mode 100644
    index 0000000..d5867cb
    --- /dev/null
    +++ b/src/com/quollwriter/ui/charts/AbstractQuollChart.java
    @@ -0,0 +1,106 @@
    +package com.quollwriter.ui.charts;
    +
    +import javax.swing.*;
    +
    +import org.jfree.chart.*;
    +
    +import com.quollwriter.*;
    +import com.quollwriter.ui.*;
    +import com.quollwriter.ui.panels.*;
    +
    +public abstract class AbstractQuollChart<E extends AbstractViewer> implements QuollChart
    +{
    +
    +    protected E viewer = null;
    +    protected StatisticsPanel parent = null;
    +
    +    public AbstractQuollChart (E viewer)
    +    {
    +
    +        this.viewer = viewer;
    +
    +    }
    +
    +    public void updateChart ()
    +    {
    +
    +        JFreeChart ch = null;
    +        JComponent det = null;
    +
    +        try
    +        {
    +
    +            ch = this.getChart (true);
    +
    +            det = this.getDetail (true);
    +
    +        } catch (Exception e) {
    +
    +            Environment.logError ("Unable to create chart",
    +                                  e);
    +
    +            UIUtils.showErrorMessage (this.viewer,
    +                                      "Unable to show chart.");
    +
    +            return;
    +
    +        }
    +
    +        this.parent.updateChart (ch,
    +                                 det);
    +
    +    }
    +
    +    public void init (StatisticsPanel wcp)
    +               throws GeneralException
    +    {
    +
    +        this.parent = wcp;
    +
    +    }
    +
    +    public JLabel createDetailLabel (JLabel l)
    +    {
    +
    +        l.setIcon (Environment.getIcon (Constants.BULLET_ICON_NAME,
    +                                        Constants.ICON_MENU));
    +
    +        l.setVerticalAlignment (SwingConstants.TOP);
    +        l.setVerticalTextPosition (SwingConstants.TOP);
    +
    +        return l;
    +
    +    }
    +
    +    public JLabel createWarningLabel (JLabel l)
    +    {
    +
    +        l.setIcon (Environment.getIcon (Constants.ERROR_ICON_NAME,
    +                                        Constants.ICON_MENU));
    +
    +        l.setVerticalAlignment (SwingConstants.TOP);
    +        l.setVerticalTextPosition (SwingConstants.TOP);
    +
    +        return l;
    +
    +    }
    +
    +    public JLabel createDetailLabel (String text)
    +    {
    +
    +        JLabel l = UIUtils.createLabel (text);
    +
    +        return this.createDetailLabel (l);
    +
    +    }
    +
    +    public JLabel createWarningLabel (String text)
    +    {
    +
    +        JLabel l = UIUtils.createLabel (text);
    +
    +        return this.createWarningLabel (l);
    +
    +    }
    +
    +}
    \ No newline at end of file
    diff --git a/src/com/quollwriter/ui/charts/AllWordCountsChart.java b/src/com/quollwriter/ui/charts/AllWordCountsChart.java
    index 828804a..77ed043 100644
    --- a/src/com/quollwriter/ui/charts/AllWordCountsChart.java
    +++ b/src/com/quollwriter/ui/charts/AllWordCountsChart.java
    @@ -1,6 +1,7 @@
     package com.quollwriter.ui.charts;
    
     import java.awt.Component;
    +import java.awt.Font;
     import java.awt.event.*;
    
     import java.util.*;
    @@ -10,6 +11,9 @@ import javax.swing.*;
     import org.jfree.chart.*;
     import org.jfree.ui.*;
     import org.jfree.data.time.*;
    +import org.jfree.chart.plot.*;
    +import org.jfree.chart.labels.*;
    +import org.jfree.chart.axis.*;
    
     import com.quollwriter.ui.*;
     import com.quollwriter.ui.panels.*;
    @@ -19,38 +23,33 @@ import com.quollwriter.db.*;
     import com.quollwriter.ui.components.ActionAdapter;
     import com.quollwriter.ui.components.Header;
    
    -public class AllWordCountsChart implements QuollChart
    +public class AllWordCountsChart extends AbstractQuollChart<AbstractProjectViewer>
     {
    
         public static final String CHART_TYPE = "all-word-count";
         public static final String CHART_TITLE = "Total Word Count";
    
    -    private AbstractProjectViewer projectViewer = null;
    -    private WordCountPanel wcp = null;
    -
         private JComboBox      displayB = null;
    
         private JFreeChart chart = null;
         private JComponent controls = null;
    
    -    public AllWordCountsChart ()
    +    public AllWordCountsChart (AbstractProjectViewer pv)
         {
    
    +        super (pv);
    +
         }
    -
    -    public void init (AbstractProjectViewer pv,
    -                      WordCountPanel        wcp)
    -                      throws                GeneralException
    +
    +    public void init (StatisticsPanel wcp)
    +               throws GeneralException
         {
    
    -        this.projectViewer = pv;
    -        this.wcp = wcp;
    -
    +        super.init (wcp);
    +
             this.createControls ();
    
    -        this.createChart ();
    -
    -    }
    +    }
    
         private void createControls ()
         {
    @@ -66,10 +65,11 @@ public class AllWordCountsChart implements QuollChart
             b.add (h);
    
             Vector displayItems = new Vector ();
    -        displayItems.add ("Past 7 days");
    -        displayItems.add ("Past 30 days");
    -        displayItems.add ("Past 3 months");
    -        displayItems.add ("All time");
    +        displayItems.add ("This week");
    +        displayItems.add ("Last week");
    +        displayItems.add ("This month");
    +        displayItems.add ("Last month");
    +        displayItems.add ("All time");
    
             b.add (Box.createVerticalStrut (5));
    
    @@ -78,22 +78,20 @@ public class AllWordCountsChart implements QuollChart
             this.displayB.setMaximumSize (displayB.getPreferredSize ());
             this.displayB.setAlignmentY (Component.TOP_ALIGNMENT);
    
    +        this.displayB.setSelectedIndex (0);
    +
             this.displayB.addActionListener (new ActionAdapter ()
             {
    
                 public void actionPerformed (ActionEvent ev)
                 {
    -
    -                _this.createChart ();
    
    -                _this.wcp.updateChart (_this.chart);
    +                _this.updateChart ();
    
                 }
    
             });
    
    -        this.displayB.setSelectedIndex (0);
    -
             Box db = new Box (BoxLayout.X_AXIS);
             db.setAlignmentX (Component.LEFT_ALIGNMENT);
             db.setAlignmentY (Component.TOP_ALIGNMENT);
    @@ -117,29 +115,117 @@ public class AllWordCountsChart implements QuollChart
         private void createChart ()
         {
    
    -        int days = 0;
    +        int days = -1;
    
    -        if (displayB.getSelectedIndex () == 0)
    +        Date minDate = null;
    +        Date maxDate = new Date ();
    +
    +        // This week.
    +        if (this.displayB.getSelectedIndex () == 0)
             {
    
    -            days = -7;
    +            // Work out how many days there have been this week.
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            days = gc.get (Calendar.DAY_OF_WEEK) - gc.getFirstDayOfWeek ();
    +
    +            if (days < 0)
    +            {
    +
    +                days -= 7;
    +
    +            }
    +
    +            gc.add (Calendar.DATE,
    +                    -1 * days);
    +
    +            minDate = gc.getTime ();
    +
    +            days++;
    +
    +        }
    +
    +        // Last week
    +        if (this.displayB.getSelectedIndex () == 1)
    +        {
    
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            days = gc.get (Calendar.DAY_OF_WEEK) - gc.getFirstDayOfWeek ();
    +
    +            if (days < 0)
    +            {
    +
    +                days -= 7;
    +
    +            }
    +
    +            gc.add (Calendar.DATE,
    +                    (-1 * days) - 1);
    +
    +            maxDate = gc.getTime ();
    +
    +            days += 7;
    +
    +            gc.add (Calendar.DATE,
    +                    -6);
    +
    +            minDate = gc.getTime ();
    +
    +            days++;
    +
             }
    
    -        if (displayB.getSelectedIndex () == 1)
    +        // This month.
    +        if (this.displayB.getSelectedIndex () == 2)
             {
    
    -            days = -30;
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            days = gc.get (Calendar.DATE);
    +
    +            gc.set (Calendar.DATE,
    +                    1);
    +
    +            minDate = gc.getTime ();
    
    +            days++;
    +
             }
    
    -        if (displayB.getSelectedIndex () == 2)
    +        // Last month.
    +        if (this.displayB.getSelectedIndex () == 3)
             {
    
    -            days = -90;
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            gc.add (Calendar.MONTH,
    +                    -1);
    +
    +            days = gc.getActualMaximum (Calendar.DATE);
    +
    +            gc.set (Calendar.DATE,
    +                    days);
    +
    +            maxDate = gc.getTime ();
    +
    +            gc.set (Calendar.DATE,
    +                    1);
    +
    +            minDate = gc.getTime ();
    
    +            days++;
    +
             }
    
    +        // All time
    +        if (this.displayB.getSelectedIndex () == 4)
    +        {
    +
    +            days = 1;
    +
    +        }
    +
             final TimeSeriesCollection tsc = new TimeSeriesCollection ();
    
             try
    @@ -147,11 +233,11 @@ public class AllWordCountsChart implements QuollChart
    
                 TimeSeries ts = new TimeSeries ("Date");
    
    -            ProjectDataHandler pdh = (ProjectDataHandler) this.projectViewer.getDataHandler (Project.class);
    +            ProjectDataHandler pdh = (ProjectDataHandler) this.viewer.getDataHandler (Project.class);
    
                 // Get all the word counts for the project.
    -            List<WordCount> wordCounts = pdh.getWordCounts (this.projectViewer.getProject (),
    -                                                            days);
    +            List<WordCount> wordCounts = pdh.getWordCounts (this.viewer.getProject (),
    +                                                            0);
    
                 for (WordCount wc : wordCounts)
                 {
    @@ -175,7 +261,7 @@ public class AllWordCountsChart implements QuollChart
                 Environment.logError ("Unable to get word counts",
                                       e);
    
    -            UIUtils.showErrorMessage (this.wcp,
    +            UIUtils.showErrorMessage (this.parent,
                                           "Unable to word counts");
    
                 return;
    @@ -185,6 +271,42 @@ public class AllWordCountsChart implements QuollChart
             this.chart = QuollChartUtils.createTimeSeriesChart ("Date",
                                                                 "Word Count",
                                                                 tsc);
    +
    +        this.chart.setBackgroundPaint (UIUtils.getComponentColor ());
    +
    +        XYPlot plot = (XYPlot) this.chart.getPlot ();
    +
    +        PeriodAxis axis = (PeriodAxis) plot.getDomainAxis ();
    +
    +        if (minDate != null)
    +        {
    +
    +            axis.setLowerBound (minDate.getTime ());
    +
    +            axis.setUpperBound (maxDate.getTime ());
    +
    +        }
    +
    +        plot.setBackgroundPaint (UIUtils.getComponentColor ());
    +        plot.setDomainGridlinePaint (Environment.getBorderColor ());
    +        plot.setRangeGridlinePaint (Environment.getBorderColor ());
    +        plot.setAxisOffset (new RectangleInsets (5D,
    +                                                 5D,
    +                                                 5D,
    +                                                 5D));
    +
    +        Font f = QuollChartUtils.getLabelFont ();
    +
    +        plot.setDomainCrosshairVisible (true);
    +        plot.setRangeCrosshairVisible (true);
    +        plot.setDomainGridlinePaint (UIUtils.getColor ("#cfcfcf"));
    +        plot.setRangeGridlinePaint (UIUtils.getColor ("#cfcfcf"));
    +        plot.getDomainAxis ().setLabelFont (f);
    +        plot.getDomainAxis ().setTickLabelFont (f);
    +        plot.getRangeAxis ().setLabelFont (f);
    +        plot.getRangeAxis ().setTickLabelFont (f);
    +
    +        this.chart.removeLegend ();
    
         }
    
    @@ -202,20 +324,55 @@ public class AllWordCountsChart implements QuollChart
    
         }
    
    -    public JComponent getControls ()
    +    public JComponent getControls (boolean update)
         {
    
    +        if (update)
    +        {
    +
    +            this.controls = null;
    +
    +        }
    +
    +        if (this.controls == null)
    +        {
    +
    +            this.createControls ();
    +
    +        }
    +
             return this.controls;
    
         }
    
    -    public JFreeChart getChart ()
    +    public JFreeChart getChart (boolean update)
         {
    
    +        if (update)
    +        {
    +
    +            this.chart = null;
    +
    +        }
    +
    +        if (this.chart == null)
    +        {
    +
    +            this.createChart ();
    +
    +        }
    +
             return this.chart;
    
         }
    
    +    public JComponent getDetail (boolean update)
    +    {
    +
    +        return null;
    +
    +    }
    +
         public String toString ()
         {
    
    diff --git a/src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java b/src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java
    index de9d3ae..81b27d5 100644
    --- a/src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java
    +++ b/src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java
    @@ -2,6 +2,7 @@ package com.quollwriter.ui.charts;
    
     import java.awt.Component;
     import java.awt.Dimension;
    +import java.awt.Font;
     import java.awt.event.*;
    
     import java.util.*;
    @@ -14,6 +15,11 @@ import javax.swing.event.*;
     import org.jfree.chart.*;
     import org.jfree.ui.*;
     import org.jfree.data.time.*;
    +import org.jfree.chart.plot.*;
    +import org.jfree.chart.labels.*;
    +import org.jfree.chart.axis.*;
    +import org.jfree.data.category.*;
    +import org.jfree.chart.renderer.category.*;
    
     import com.quollwriter.*;
     import com.quollwriter.data.*;
    @@ -24,39 +30,39 @@ import com.quollwriter.db.*;
     import com.quollwriter.ui.renderers.*;
     import com.quollwriter.ui.components.Header;
     import com.quollwriter.ui.components.ActionAdapter;
    +import com.quollwriter.ui.components.FormItem;
    
    -public class PerChapterWordCountsChart implements QuollChart
    +public class PerChapterWordCountsChart extends AbstractQuollChart<AbstractProjectViewer>
     {
    
         public static final String CHART_TYPE = "per-chapter-word-counts";
         public static final String CHART_TITLE = "{Chapter} Word Counts";
    -
    -    private AbstractProjectViewer projectViewer = null;
    -    private WordCountPanel wcp = null;
    -
    +
         private JFreeChart chart = null;
    +    private JComponent detail = null;
         private JComponent controls = null;
         private JComboBox      displayB = null;
         private JTree          chapters = null;
    +    private JCheckBox          showAvg = null;
    +    private JCheckBox          showTarget = null;
    +    private JComponent opts = null;
    
    -    public PerChapterWordCountsChart ()
    +    public PerChapterWordCountsChart (AbstractProjectViewer pv)
         {
    
    +        super (pv);
    +
         }
    -
    -    public void init (AbstractProjectViewer pv,
    -                      WordCountPanel        wcp)
    -                      throws                GeneralException
    +
    +    public void init (StatisticsPanel wcp)
    +               throws GeneralException
         {
    
    -        this.projectViewer = pv;
    -        this.wcp = wcp;
    -
    -        this.createControls ();
    +        super.init (wcp);
    
    -        this.createChart ();
    +        this.createControls ();
    
    -    }
    +    }
    
         private void createControls ()
         {
    @@ -66,6 +72,88 @@ public class PerChapterWordCountsChart implements QuollChart
             Box b = new Box (BoxLayout.Y_AXIS);
             b.setOpaque (false);
    
    +        this.showAvg = UIUtils.createCheckBox ("Show Average",
    +                                               new ActionListener ()
    +                                               {
    +
    +                                                    @Override
    +                                                    public void actionPerformed (ActionEvent ev)
    +                                                    {
    +
    +                                                        _this.updateChart ();
    +
    +                                                    }
    +
    +                                               });
    +
    +        this.showTarget = UIUtils.createCheckBox ("Show Target",
    +                                                  new ActionListener ()
    +                                                  {
    +
    +                                                    @Override
    +                                                    public void actionPerformed (ActionEvent ev)
    +                                                    {
    +
    +                                                        TargetsData targets = _this.viewer.getProjectTargets ();
    +
    +                                                        if (targets.getMaxChapterCount () == 0)
    +                                                        {
    +
    +                                                            UIUtils.createQuestionPopup (_this.viewer,
    +                                                                                         "Set up Target",
    +                                                                                         Constants.TARGET_ICON_NAME,
    +                                                                                         "You currently have no {chapter} word count target set up.<br /><br />Would you like to set the target now?<br /><br />Note: Targets can be accessed at any time from the {Project} menu.",
    +                                                                                         "Yes, show me",
    +                                                                                         "No, not now",
    +                                                                                         new ActionListener ()
    +                                                                                         {
    +
    +                                                                                            @Override public void actionPerformed (ActionEvent ev)
    +                                                                                            {
    +
    +                                                                                                try
    +                                                                                                {
    +
    +                                                                                                    _this.viewer.viewTargets ();
    +
    +                                                                                                } catch (Exception e) {
    +
    +                                                                                                    UIUtils.showErrorMessage (_this.viewer,
    +                                                                                                                              "Unable to show targets.");
    +
    +                                                                                                    Environment.logError ("Unable to show targets",
    +                                                                                                                          e);
    +
    +                                                                                                }
    +
    +                                                                                            }
    +
    +                                                                                         },
    +                                                                                         null,
    +                                                                                         null,
    +                                                                                         null);
    +
    +                                                            _this.showTarget.setSelected (false);
    +
    +                                                            return;
    +
    +                                                        }
    +
    +                                                        _this.updateChart ();
    +
    +                                                    }
    +
    +                                                  });
    +
    +        this.opts = new Box (BoxLayout.Y_AXIS);
    +
    +        b.add (this.opts);
    +
    +        this.opts.setBorder (UIUtils.createPadding (0, 10, 0, 0));
    +
    +        this.opts.add (this.showAvg);
    +        this.opts.add (this.showTarget);
    +
             Header h = UIUtils.createBoldSubHeader (Environment.replaceObjectNames ("For"),
                                                     null);
             h.setAlignmentY (Component.TOP_ALIGNMENT);
    @@ -73,10 +161,12 @@ public class PerChapterWordCountsChart implements QuollChart
             b.add (h);
    
             Vector displayItems = new Vector ();
    -        displayItems.add ("Past 7 days");
    -        displayItems.add ("Past 30 days");
    -        displayItems.add ("Past 3 months");
    -        displayItems.add ("All time");
    +        displayItems.add ("Now");
    +        displayItems.add ("This week");
    +        displayItems.add ("Last week");
    +        displayItems.add ("This month");
    +        displayItems.add ("Last month");
    +        displayItems.add ("All time");
    
             b.add (Box.createVerticalStrut (5));
    
    @@ -92,6 +182,8 @@ public class PerChapterWordCountsChart implements QuollChart
                 public void actionPerformed (ActionEvent ev)
                 {
    
    +                _this.opts.setVisible (_this.displayB.getSelectedIndex () == 0);
    +
                     _this.updateChart ();
    
                 }
    @@ -118,10 +210,11 @@ public class PerChapterWordCountsChart implements QuollChart
    
             b.add (h);
    
    -        this.chapters = new JTree (UIUtils.createTree (this.projectViewer.getProject ().getBook (0),
    +        this.chapters = UIUtils.createTree ();
    +        this.chapters.setModel (new DefaultTreeModel (UIUtils.createTree (this.viewer.getProject ().getBook (0),
                                                            new ArrayList (), /* exclude */
    -                                                       this.projectViewer.getProject ().getBook (0).getChapters (), /* init */
    -                                                       true));
    +                                                       this.viewer.getProject ().getBook (0).getChapters (), /* init */
    +                                                       true)));
    
             this.chapters.getModel ().addTreeModelListener (new TreeModelAdapter ()
             {
    @@ -144,74 +237,383 @@ public class PerChapterWordCountsChart implements QuollChart
             this.chapters.setCellRenderer (rend);
             UIUtils.addSelectableListener (this.chapters);
    
    -        this.chapters.setOpaque (true);
    +        this.chapters.setOpaque (false);
    
             this.chapters.setRootVisible (false);
             this.chapters.setShowsRootHandles (false);
    -        this.chapters.setScrollsOnExpand (true);
    -        this.chapters.setMaximumSize (new Dimension (Short.MAX_VALUE,
    -                                                     Short.MAX_VALUE));
    -        this.chapters.setBorder (new EmptyBorder (0, 5, 0, 0));
    -
    +        this.chapters.setBorder (UIUtils.createPadding (0, 5, 0, 0));
    +
             // Never toggle.
             this.chapters.setToggleClickCount (-1);
    
    +        this.chapters.setMaximumSize (this.chapters.getPreferredSize ());
    +        this.chapters.setAlignmentX (Component.LEFT_ALIGNMENT);
    +
             b.add (this.chapters);
    
             this.controls = b;
    
         }
    +
    +    private void createChart ()
    +                       throws GeneralException
    +    {
    +
    +        if (this.displayB.getSelectedIndex () == 0)
    +        {
    +
    +            this.createCurrentChart ();
    +
    +            return;
    +
    +        }
    +
    +        this.createHistoryChart ();
    +
    +    }
    
    -    private void updateChart ()
    +    private void createCurrentChart ()
    +                              throws GeneralException
         {
    +
    +        final PerChapterWordCountsChart _this = this;
    +
    +        ChapterDataHandler dh = (ChapterDataHandler) this.viewer.getDataHandler (Chapter.class);
    +
    +        Set<Chapter> selected = new HashSet ();
    +
    +        UIUtils.getSelectedObjects ((DefaultMutableTreeNode) this.chapters.getModel ().getRoot (),
    +                                    selected);
    
    +        int chapterCount = 0;
    +        int totalWords = 0;
    +        int maxWords = 0;
    +        Chapter maxChap = null;
    +
    +        final DefaultCategoryDataset ds = new DefaultCategoryDataset ();
    +
             try
             {
    +
    +            for (Book book : this.viewer.getProject ().getBooks ())
    +            {
    +
    +                for (Chapter c : book.getChapters ())
    +                {
    +
    +                    if (!selected.contains (c))
    +                    {
    +
    +                        continue;
    +
    +                    }
    +
    +                    ChapterCounts cc = this.viewer.getChapterCounts (c);
    +
    +                    chapterCount++;
    +                    totalWords += cc.wordCount;
    +
    +                    if (cc.wordCount > maxWords)
    +                    {
    +
    +                        maxChap = c;
    +                        maxWords = cc.wordCount;
    +
    +                    }
    +
    +                    ds.addValue (cc.wordCount,
    +                                 "Chapters",
    +                                 c.getName ());
    +
    +                }
    +
    +            }
    +
    +        } catch (Exception e)
    +        {
    +
    +            Environment.logError ("Unable to get word counts",
    +                                  e);
    +
    +            UIUtils.showErrorMessage (this.parent,
    +                                      "Unable to show word counts");
    +
    +            return;
    +
    +        }
    +
    +        this.chart = QuollChartUtils.createBarChart (Environment.getObjectTypeNamePlural (Chapter.OBJECT_TYPE),
    +                                                     "Word Count",
    +                                                     ds);
    
    -            this.createChart ();
    +        this.chart.setBackgroundPaint (UIUtils.getComponentColor ());
    +        this.chart.removeLegend ();
    +
    +        CategoryPlot plot = (CategoryPlot) this.chart.getPlot ();
    +
    +        final CategoryAxis domainAxis = plot.getDomainAxis();
    +        domainAxis.setCategoryLabelPositions (CategoryLabelPositions.STANDARD);//CategoryLabelPositions.createUpRotationLabelPositions (Math.PI / 0.5));
    +
    +        plot.setOrientation (PlotOrientation.HORIZONTAL);
    +        plot.setRangeAxisLocation (AxisLocation.BOTTOM_OR_LEFT);
    +
    +        QuollChartUtils.customizePlot (plot);
    +
    +        CategoryToolTipGenerator ttgen = new StandardCategoryToolTipGenerator ()
    +        {
    +
    +            public String generateToolTip (CategoryDataset dataset,
    +                                           int             row,
    +                                           int             column)
    +            {
    +
    +                DefaultCategoryDataset dsc = (DefaultCategoryDataset) dataset;
    +
    +                Number n = dsc.getValue (row,
    +                                         column);
    +
    +                StringBuilder b = new StringBuilder ();
    +
    +                b.append (Environment.formatNumber (n.intValue ()));
    +                b.append (" words ");
    +
    +                return b.toString ();
    +
    +            }
    +
    +        };
    
    -        } catch (Exception e) {
    +        ((CategoryItemRenderer) plot.getRenderer ()).setSeriesToolTipGenerator (0,
    +                                                                                ttgen);
    
    -            Environment.logError ("Unable to create chart",
    -                                  e);
    +        TargetsData ptargs = this.viewer.getProjectTargets ();
    +
    +        int targetWords = ptargs.getMaxChapterCount ();
    +
    +        double avgWords = totalWords / chapterCount;
    +
    +        double diffAvgWords = avgWords - targetWords;
    +
    +        if (this.showAvg.isSelected ())
    +        {
    +
    +            String tgf = "";
    +
    +            if (targetWords > 0)
    +            {
    +
    +                tgf = String.format (", %s%s target",
    +                                     (diffAvgWords < 0 ? "" : "+"),
    +                                     Environment.formatNumber ((long) diffAvgWords));
    +
    +            }
    +
    +            plot.addRangeMarker (QuollChartUtils.createMarker (String.format ("Avg %s%s",
    +                                                                              Environment.formatNumber ((long) avgWords),
    +                                                                              tgf),
    +                                                               avgWords,
    +                                                               1,
    +                                                               org.jfree.ui.RectangleAnchor.TOP_RIGHT));
    +
    +        }
    +
    +        if (this.showTarget.isSelected ())
    +        {
    +
    +            if (targetWords > 0)
    +            {
    +
    +                plot.addRangeMarker (QuollChartUtils.createMarker (String.format ("Target %s",
    +                                                                                  Environment.formatNumber (targetWords)),
    +                                                                   targetWords,
    +                                                                   -1,
    +                                                                   org.jfree.ui.RectangleAnchor.BOTTOM_LEFT));
    +
    +            }
    +
    +        }
    +
    +        int over = 0;
    +
    +        for (Chapter c : selected)
    +        {
    +
    +            ChapterCounts cc = this.viewer.getChapterCounts (c);
    +
    +            if (cc.wordCount > targetWords)
    +            {
    +
    +                over++;
    +
    +            }
    
    -            UIUtils.showErrorMessage (this.projectViewer,
    -                                      "Unable to show chart, please contact Quoll Writer support for assistance.");
    +        }
    +
    +        //((NumberAxis) plot.getRangeAxis ()).setAutoRangeIncludesZero (true);
    +
    +        Set<JComponent> items = new LinkedHashSet ();
    +
    +        if ((targetWords > 0)
    +            &&
    +            (over > 0)
    +           )
    +        {
    +
    +            String t = String.format ("%s {Chapter%s} over target word count",
    +                                      Environment.formatNumber (over),
    +                                      (over == 1 ? "" : "s"));
    +
    +            // TODO: Fix this nonsense.
    +            ActionListener _null = null;
    +
    +            final JLabel l = this.createWarningLabel (UIUtils.createClickableLabel (t,
    +                                                                                    null,
    +                                                                                    _null));
    +
    +            UIUtils.makeClickable (l,
    +                                   new ActionListener ()
    +            {
    +
    +               @Override
    +               public void actionPerformed (ActionEvent ev)
    +               {
    +
    +                   Targets.showChaptersOverWordTarget (_this.viewer,
    +                                                       l);
    +
    +               }
    +
    +            });
    +
    +            l.setToolTipText ("Click to view the " + t);
    +
    +            items.add (l);
    
             }
    
    -        this.wcp.updateChart (this.chart);
    +        items.add (this.createDetailLabel (String.format ("%s - Average word count",
    +                                                          Environment.formatNumber ((long) avgWords))));
    
    +        this.detail = QuollChartUtils.createDetailPanel (items);
    +
         }
    
    -    private void createChart ()
    -                       throws GeneralException
    +    private void createHistoryChart ()
    +                              throws GeneralException
         {
    
    -        int days = 0;
    -
    -        if (this.displayB.getSelectedIndex () == 0)
    +        int days = -1;
    +
    +        Date minDate = null;
    +        Date maxDate = new Date ();
    +
    +        // This week.
    +        if (this.displayB.getSelectedIndex () == 1)
             {
    
    -            days = -7;
    +            // Work out how many days there have been this week.
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            days = gc.get (Calendar.DAY_OF_WEEK) - gc.getFirstDayOfWeek ();
    +
    +            if (days < 0)
    +            {
    +
    +                days -= 7;
    +
    +            }
    +
    +            gc.add (Calendar.DATE,
    +                    -1 * days);
    +
    +            minDate = gc.getTime ();
    +
    +            days++;
    +
    +        }
    +
    +        // Last week
    +        if (this.displayB.getSelectedIndex () == 2)
    +        {
    
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            days = gc.get (Calendar.DAY_OF_WEEK) - gc.getFirstDayOfWeek ();
    +
    +            if (days < 0)
    +            {
    +
    +                days -= 7;
    +
    +            }
    +
    +            gc.add (Calendar.DATE,
    +                    (-1 * days) - 1);
    +
    +            maxDate = gc.getTime ();
    +
    +            days += 7;
    +
    +            gc.add (Calendar.DATE,
    +                    -6);
    +
    +            minDate = gc.getTime ();
    +
    +            days++;
    +
             }
    
    -        if (this.displayB.getSelectedIndex () == 1)
    +        // This month.
    +        if (this.displayB.getSelectedIndex () == 3)
             {
    
    -            days = -30;
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            days = gc.get (Calendar.DATE);
    +
    +            gc.set (Calendar.DATE,
    +                    1);
    +
    +            minDate = gc.getTime ();
    
    +            days++;
    +
             }
    
    -        if (this.displayB.getSelectedIndex () == 2)
    +        // Last month.
    +        if (this.displayB.getSelectedIndex () == 4)
             {
    
    -            days = -90;
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            gc.add (Calendar.MONTH,
    +                    -1);
    +
    +            days = gc.getActualMaximum (Calendar.DATE);
    +
    +            gc.set (Calendar.DATE,
    +                    days);
    +
    +            maxDate = gc.getTime ();
    +
    +            gc.set (Calendar.DATE,
    +                    1);
    +
    +            minDate = gc.getTime ();
    
    +            days++;
    +
             }
    
    -        ChapterDataHandler dh = (ChapterDataHandler) this.wcp.getProjectViewer ().getDataHandler (Chapter.class);
    +        // All time
    +        if (this.displayB.getSelectedIndex () == 5)
    +        {
    +
    +            days = 1;
    +
    +        }
    +
    +        ChapterDataHandler dh = (ChapterDataHandler) this.viewer.getDataHandler (Chapter.class);
    
             Set selected = new HashSet ();
    
    @@ -223,7 +625,7 @@ public class PerChapterWordCountsChart implements QuollChart
             try
             {
    
    -            for (Book book : this.wcp.getProjectViewer ().getProject ().getBooks ())
    +            for (Book book : this.viewer.getProject ().getBooks ())
                 {
    
                     for (Chapter c : book.getChapters ())
    @@ -240,7 +642,7 @@ public class PerChapterWordCountsChart implements QuollChart
    
                         // Get all the word counts for the chapter.
                         List<WordCount> wordCounts = dh.getWordCounts (c,
    -                                                                   days);
    +                                                                   0);// * days);
    
                         for (WordCount wc : wordCounts)
                         {
    @@ -269,8 +671,8 @@ public class PerChapterWordCountsChart implements QuollChart
                 Environment.logError ("Unable to get word counts",
                                       e);
    
    -            UIUtils.showErrorMessage (this.wcp,
    -                                      "Unable to word counts");
    +            UIUtils.showErrorMessage (this.parent,
    +                                      "Unable to show word counts");
    
                 return;
    
    @@ -279,6 +681,43 @@ public class PerChapterWordCountsChart implements QuollChart
             this.chart = QuollChartUtils.createTimeSeriesChart ("Date",
                                                                 "Word Count",
                                                                 tscc);
    +        this.chart.setBackgroundPaint (UIUtils.getComponentColor ());
    +
    +        XYPlot plot = (XYPlot) this.chart.getPlot ();
    +
    +        PeriodAxis axis = (PeriodAxis) plot.getDomainAxis ();
    +
    +        if (minDate != null)
    +        {
    +
    +            axis.setLowerBound (minDate.getTime ());
    +
    +            axis.setUpperBound (maxDate.getTime ());
    +
    +        }
    +
    +        plot.setBackgroundPaint (UIUtils.getComponentColor ());
    +        plot.setDomainGridlinePaint (Environment.getBorderColor ());
    +        plot.setRangeGridlinePaint (Environment.getBorderColor ());
    +        plot.setAxisOffset (new RectangleInsets (5D,
    +                                                 5D,
    +                                                 5D,
    +                                                 5D));
    +
    +        Font f = QuollChartUtils.getLabelFont ();
    +
    +        plot.setDomainCrosshairVisible (true);
    +        plot.setRangeCrosshairVisible (true);
    +        plot.setDomainGridlinePaint (UIUtils.getColor ("#cfcfcf"));
    +        plot.setRangeGridlinePaint (UIUtils.getColor ("#cfcfcf"));
    +        plot.getDomainAxis ().setLabelFont (f);
    +        plot.getDomainAxis ().setTickLabelFont (f);
    +        plot.getRangeAxis ().setLabelFont (f);
    +        plot.getRangeAxis ().setTickLabelFont (f);
    +
    +        //QuollChartUtils.customizePlot (xyplot);
    +
    +        this.detail = null;
    
         }
    
    @@ -296,20 +735,72 @@ public class PerChapterWordCountsChart implements QuollChart
    
         }
    
    -    public JComponent getControls ()
    +    public JComponent getControls (boolean update)
    +                            throws GeneralException
         {
    
    +        if (update)
    +        {
    +
    +            this.controls = null;
    +
    +        }
    +
    +        if (this.controls == null)
    +        {
    +
    +            this.createControls ();
    +
    +        }
    +
             return this.controls;
    
         }
    
    -    public JFreeChart getChart ()
    +    public JFreeChart getChart (boolean update)
    +                         throws GeneralException
         {
    
    +        if (update)
    +        {
    +
    +            this.chart = null;
    +
    +        }
    +
    +        if (this.chart == null)
    +        {
    +
    +            this.createChart ();
    +
    +        }
    +
             return this.chart;
    
         }
    
    +    public JComponent getDetail (boolean update)
    +                          throws GeneralException
    +    {
    +
    +        if (update)
    +        {
    +
    +            this.detail = null;
    +
    +        }
    +
    +        if (this.detail == null)
    +        {
    +
    +            this.createChart ();
    +
    +        }
    +
    +        return this.detail;
    +
    +    }
    +
         public String toString ()
         {
    
    diff --git a/src/com/quollwriter/ui/charts/QuollChartUtils.java b/src/com/quollwriter/ui/charts/QuollChartUtils.java
    index f77681a..984c0da 100644
    --- a/src/com/quollwriter/ui/charts/QuollChartUtils.java
    +++ b/src/com/quollwriter/ui/charts/QuollChartUtils.java
    @@ -1,16 +1,29 @@
     package com.quollwriter.ui.charts;
    
     import java.awt.Color;
    +import java.awt.Font;
    +import java.awt.Paint;
    +import java.awt.BasicStroke;
    +import java.awt.Dimension;
    +import java.awt.Component;
    
     import java.util.*;
    
     import java.text.*;
    
    +import javax.swing.*;
    +
    +import com.jgoodies.forms.builder.*;
    +import com.jgoodies.forms.factories.*;
    +import com.jgoodies.forms.layout.*;
    +
     import org.jfree.chart.*;
     import org.jfree.chart.axis.*;
     import org.jfree.chart.labels.*;
     import org.jfree.chart.plot.*;
    +import org.jfree.chart.renderer.*;
     import org.jfree.chart.renderer.xy.*;
    +import org.jfree.chart.renderer.category.*;
     import org.jfree.ui.*;
     import org.jfree.data.category.*;
     import org.jfree.data.time.*;
    @@ -18,13 +31,368 @@ import org.jfree.data.xy.XYDataset;
    
     import com.quollwriter.*;
     import com.quollwriter.ui.*;
    +import com.quollwriter.ui.components.FormItem;
    
     public class QuollChartUtils
     {
    
    -    public static JFreeChart createTimeSeriesChart (String               xAxisTitle,
    -                                                    String               yAxisTitle,
    -                                                    TimeSeriesCollection tsc)
    +    public static JComponent createDetailPanel (Set<JComponent> items)
    +    {
    +
    +        Box b = new Box (BoxLayout.Y_AXIS);
    +
    +        for (JComponent c : items)
    +        {
    +
    +            b.add (c);
    +
    +            c.setBorder (UIUtils.createPadding (0, 5, 5, 0));
    +
    +        }
    +
    +        b.setOpaque (false);
    +        b.setBorder (UIUtils.createPadding (0, 5, 5, 0));
    +        b.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        b.add (Box.createVerticalGlue ());
    +        b.setMaximumSize (new Dimension (Short.MAX_VALUE, Short.MAX_VALUE));
    +
    +        return b;
    +
    +    }
    +
    +    public static JComponent createDetailPanel (Set<FormItem> items,
    +                                                int           maxRows)
    +    {
    +
    +        String cols = "right:max(80px;p), 6px, p:grow";
    +
    +        StringBuilder rb = new StringBuilder ();
    +
    +        for (int i = 0; i < items.size (); i++)
    +        {
    +
    +            rb.append ("p");
    +
    +            if (i < items.size () - 1)
    +            {
    +
    +                rb.append (", 6px, ");
    +
    +            }
    +
    +        }
    +
    +        String rows = rb.toString ();
    +
    +        FormLayout   fl = new FormLayout (cols,
    +                                          rows);
    +        PanelBuilder b = new PanelBuilder (fl);
    +        b.border (Borders.DIALOG);
    +
    +        Box _b = new Box (BoxLayout.Y_AXIS);
    +
    +
    +
    +        CellConstraints cc = new CellConstraints ();
    +
    +        int r = 1;
    +
    +        for (FormItem i : items)
    +        {
    +
    +            _b.add (UIUtils.createLabel (i.label.toString ()));
    +
    +            ((JComponent) i.component).setBorder (UIUtils.createPadding (3, 10, 7, 0));
    +
    +            _b.add (i.component);
    +                /*
    +            b.add (i.component,
    +                   cc.xy (1, r));
    +
    +            if (i.label instanceof Component)
    +            {
    +
    +                b.add ((Component) i.label,
    +                       cc.xy (3, r));
    +
    +            } else {
    +
    +                b.addLabel ((String) i.label,
    +                            cc.xy (3, r));
    +
    +            }
    +
    +            r += 2;
    +        */
    +        }
    +
    +        JPanel p = b.getPanel ();
    +        _b.setOpaque (false);
    +        _b.setBorder (UIUtils.createPadding (0, 15, 15, 0));
    +    _b.setAlignmentX (Component.LEFT_ALIGNMENT);
    +
    +        return _b;
    +
    +    }
    +
    +    public static Font getLabelFont ()
    +    {
    +
    +        JLabel l = new JLabel ();
    +
    +        return l.getFont ().deriveFont (14f);
    +
    +    }
    +
    +    public static Paint getSeriesPaint (int ind)
    +    {
    +
    +        if (ind == 0)
    +        {
    +
    +            return UIUtils.getColor ("#D1DBBD");
    +
    +        }
    +
    +        if (ind == 1)
    +        {
    +
    +            return UIUtils.getColor ("#348AA7");
    +
    +        }
    +
    +        if (ind == -1)
    +        {
    +
    +            return UIUtils.getColor ("#ED7D3A");
    +
    +        }
    +
    +        return java.awt.Color.black;
    +
    +    }
    +
    +    public static void customizePlot (XYPlot plot)
    +    {
    +
    +        Font f = QuollChartUtils.getLabelFont ();
    +
    +        plot.setBackgroundPaint (UIUtils.getComponentColor ());
    +        plot.setDomainGridlinePaint (Environment.getBorderColor ());
    +        plot.setRangeGridlinePaint (Environment.getBorderColor ());
    +        plot.setAxisOffset (new RectangleInsets (5D,
    +                                                 5D,
    +                                                 5D,
    +                                                 5D));
    +
    +        plot.setDomainCrosshairVisible (true);
    +        plot.setRangeCrosshairVisible (true);
    +        plot.setDomainGridlinePaint (UIUtils.getColor ("#cfcfcf"));
    +        plot.setRangeGridlinePaint (UIUtils.getColor ("#cfcfcf"));
    +        plot.getDomainAxis ().setLabelFont (f);
    +        plot.getDomainAxis ().setTickLabelFont (f);
    +        plot.getRangeAxis ().setLabelFont (f);
    +        plot.getRangeAxis ().setTickLabelFont (f);
    +
    +        XYBarRenderer rend = new XYBarRenderer ();
    +        rend.setShadowVisible (false);
    +        rend.setDrawBarOutline (true);
    +
    +        QuollChartUtils.customizeSeriesPaints (rend);
    +
    +        rend.setBarPainter (new StandardXYBarPainter ());
    +
    +        plot.setRenderer (rend);
    +
    +    }
    +
    +    public static ValueMarker createMarker (String label,
    +                                            double value,
    +                                            int    series)
    +    {
    +
    +        return QuollChartUtils.createMarker (label,
    +                                             value,
    +                                             series,
    +                                             RectangleAnchor.TOP_LEFT);
    +
    +    }
    +
    +    public static ValueMarker createMarker (String          label,
    +                                            double          value,
    +                                            int             series,
    +                                            RectangleAnchor anchor)
    +    {
    +
    +        JLabel l = new JLabel (label);
    +        l.setFont (l.getFont ().deriveFont (14f));
    +
    +        Dimension s = l.getPreferredSize ();
    +
    +        ValueMarker m = new ValueMarker (value);
    +        m.setLabel (label);
    +        m.setLabelFont (l.getFont ());
    +
    +        if (anchor == RectangleAnchor.TOP_LEFT)
    +        {
    +
    +            m.setLabelOffset (new org.jfree.ui.RectangleInsets ((s.height / 2) + 3, (s.width / 2) + 5, 0, 0));
    +
    +        }
    +
    +        if (anchor == RectangleAnchor.TOP_RIGHT)
    +        {
    +
    +            m.setLabelOffset (new org.jfree.ui.RectangleInsets ((s.height / 2) + 3, -1 * ((s.width / 2) + 5), 0, 0));
    +
    +            // TOP_RIGHT doesn't work so change to TOP_LEFT and -1 the left value.
    +            anchor = RectangleAnchor.TOP_LEFT;
    +
    +        }
    +
    +        if (anchor == RectangleAnchor.BOTTOM_LEFT)
    +        {
    +
    +            m.setLabelOffset (new org.jfree.ui.RectangleInsets (0, (s.width / 2) + 5, (s.height / 2) + 3, 0));
    +
    +        }
    +
    +        if (anchor == RectangleAnchor.BOTTOM_RIGHT)
    +        {
    +
    +            m.setLabelOffset (new org.jfree.ui.RectangleInsets (0, -1 * ((s.width / 2) + 5), (s.height / 2) + 3, 0));
    +
    +            anchor = RectangleAnchor.BOTTOM_LEFT;
    +
    +        }
    +
    +        m.setPaint (QuollChartUtils.getSeriesPaint (series));
    +        m.setOutlinePaint (UIUtils.getInnerBorderColor ());
    +        m.setStroke (new BasicStroke (2));
    +        m.setOutlineStroke (new BasicStroke (1));
    +        m.setLabelAnchor (anchor);
    +
    +        return m;
    +
    +    }
    +
    +    private static void customizeSeriesPaints (AbstractRenderer rend)
    +    {
    +
    +        rend.setSeriesOutlinePaint (0, UIUtils.getBorderColor ());
    +        rend.setSeriesPaint (0, QuollChartUtils.getSeriesPaint (0));
    +
    +        rend.setSeriesOutlinePaint (1, UIUtils.getBorderColor ());
    +        rend.setSeriesPaint (1, QuollChartUtils.getSeriesPaint (1));
    +
    +    }
    +
    +    public static void customizePlot (CategoryPlot plot)
    +    {
    +
    +        Font f = QuollChartUtils.getLabelFont ();
    +
    +        plot.setBackgroundPaint (UIUtils.getComponentColor ());
    +        plot.setDomainGridlinePaint (Environment.getBorderColor ());
    +        plot.setRangeGridlinePaint (Environment.getBorderColor ());
    +        plot.setAxisOffset (new RectangleInsets (5D,
    +                                                 5D,
    +                                                 5D,
    +                                                 5D));
    +
    +        plot.setDomainCrosshairVisible (true);
    +        plot.setRangeCrosshairVisible (true);
    +        plot.setDomainGridlinePaint (UIUtils.getColor ("#cfcfcf"));
    +        plot.setRangeGridlinePaint (UIUtils.getColor ("#cfcfcf"));
    +        plot.getDomainAxis ().setLabelFont (f);
    +        plot.getDomainAxis ().setTickLabelFont (f);
    +        plot.getRangeAxis ().setLabelFont (f);
    +        plot.getRangeAxis ().setTickLabelFont (f);
    +
    +        BarRenderer rend = new BarRenderer ();
    +        rend.setShadowVisible (false);
    +        rend.setDrawBarOutline (true);
    +        rend.setItemMargin (0);
    +        rend.setBarPainter (new StandardBarPainter ());
    +
    +        QuollChartUtils.customizeSeriesPaints (rend);
    +
    +        plot.setRenderer (rend);
    +
    +    }
    +
    +    public static JFreeChart createBarChart (String          xAxisTitle,
    +                                             String          yAxisTitle,
    +                                             CategoryDataset ds)
    +    {
    +
    +        // Create the correct freechart.
    +        JFreeChart chart = ChartFactory.createBarChart (null,
    +                                                        xAxisTitle,
    +                                                        yAxisTitle,
    +                                                        ds,
    +                                                        PlotOrientation.VERTICAL,
    +                                                        true,
    +                                                        true,
    +                                                        true);
    +
    +        chart.setBackgroundPaint(Color.white);
    +
    +        // get a reference to the plot for further customisation...
    +        final CategoryPlot plot = chart.getCategoryPlot();
    +        plot.setBackgroundPaint (UIUtils.getComponentColor ());
    +        plot.setDomainGridlinePaint (Environment.getBorderColor ());
    +        plot.setRangeGridlinePaint (Environment.getBorderColor ());
    +        /*
    +        plot.setAxisOffset (new RectangleInsets (5D,
    +                                                 5D,
    +                                                 5D,
    +                                                 5D));
    +*/
    +        plot.setDomainCrosshairVisible (true);
    +        plot.setRangeCrosshairVisible (true);
    +        plot.setDomainGridlinePaint (UIUtils.getColor ("#cfcfcf"));
    +        plot.setRangeGridlinePaint (UIUtils.getColor ("#cfcfcf"));
    +
    +        // set the range axis to display integers only...
    +        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
    +        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
    +        rangeAxis.setNumberFormatOverride (Environment.getNumberFormatter ());
    +
    +        // disable bar outlines...
    +        final BarRenderer renderer = (BarRenderer) plot.getRenderer();
    +        renderer.setDrawBarOutline(false);
    +        renderer.setItemMargin (0);
    +        /*
    +        // set up gradient paints for series...
    +        final GradientPaint gp0 = new GradientPaint(
    +            0.0f, 0.0f, Color.blue,
    +            0.0f, 0.0f, Color.lightGray
    +        );
    +        final GradientPaint gp1 = new GradientPaint(
    +            0.0f, 0.0f, Color.green,
    +            0.0f, 0.0f, Color.lightGray
    +        );
    +        final GradientPaint gp2 = new GradientPaint(
    +            0.0f, 0.0f, Color.red,
    +            0.0f, 0.0f, Color.lightGray
    +        );
    +        renderer.setSeriesPaint(0, gp0);
    +        renderer.setSeriesPaint(1, gp1);
    +        renderer.setSeriesPaint(2, gp2);
    +*/
    +        final CategoryAxis domainAxis = plot.getDomainAxis();
    +        domainAxis.setCategoryLabelPositions(
    +            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / -0.6)
    +        );
    +
    +        return chart;
    +
    +    }
    +
    +    public static JFreeChart createTimeSeriesChart (String    xAxisTitle,
    +                                                    String    yAxisTitle,
    +                                                    XYDataset tsc)
         {
    
             // Create the correct freechart.
    @@ -37,13 +405,15 @@ public class QuollChartUtils
                                                                    true);
    
             XYPlot xyplot = (XYPlot) chart.getPlot ();
    -        xyplot.setBackgroundPaint (UIUtils.getColor ("#f0f6fc"));
    +        xyplot.setBackgroundPaint (UIUtils.getComponentColor ());
             xyplot.setDomainGridlinePaint (Environment.getBorderColor ());
             xyplot.setRangeGridlinePaint (Environment.getBorderColor ());
    +        /*
             xyplot.setAxisOffset (new RectangleInsets (5D,
                                                        5D,
                                                        5D,
                                                        5D));
    +                                                   */
             xyplot.setDomainCrosshairVisible (true);
             xyplot.setRangeCrosshairVisible (true);
             xyplot.setDomainGridlinePaint (UIUtils.getColor ("#cfcfcf"));
    diff --git a/src/com/quollwriter/ui/charts/ReadabilityIndicesChart.java b/src/com/quollwriter/ui/charts/ReadabilityIndicesChart.java
    new file mode 100644
    index 0000000..8188c9d
    --- /dev/null
    +++ b/src/com/quollwriter/ui/charts/ReadabilityIndicesChart.java
    @@ -0,0 +1,755 @@
    +package com.quollwriter.ui.charts;
    +
    +import java.awt.Component;
    +import java.awt.Dimension;
    +import java.awt.BasicStroke;
    +import java.awt.event.*;
    +
    +import java.util.*;
    +
    +import javax.swing.*;
    +import javax.swing.border.*;
    +import javax.swing.tree.*;
    +import javax.swing.event.*;
    +
    +import org.jfree.chart.*;
    +import org.jfree.ui.*;
    +import org.jfree.data.time.*;
    +import org.jfree.data.category.*;
    +import org.jfree.chart.axis.*;
    +import org.jfree.chart.plot.*;
    +
    +import com.quollwriter.*;
    +import com.quollwriter.data.*;
    +import com.quollwriter.ui.events.*;
    +import com.quollwriter.ui.*;
    +import com.quollwriter.ui.panels.*;
    +import com.quollwriter.db.*;
    +import com.quollwriter.ui.renderers.*;
    +import com.quollwriter.ui.components.Header;
    +import com.quollwriter.ui.components.ActionAdapter;
    +import com.quollwriter.ui.components.FormItem;
    +
    +public class ReadabilityIndicesChart extends AbstractQuollChart<AbstractProjectViewer>
    +{
    +
    +    public static final String CHART_TYPE = "readability-index";
    +    public static final String CHART_TITLE = "Readability";
    +
    +    private JFreeChart chart = null;
    +    private JComponent detail = null;
    +    private JComponent controls = null;
    +    private JCheckBox showGF = null;
    +    private JCheckBox showFK = null;
    +    private JTree          chapters = null;
    +    private JCheckBox          showAvg = null;
    +    private JCheckBox          showTargets = null;
    +
    +    public ReadabilityIndicesChart (AbstractProjectViewer pv)
    +    {
    +
    +        super (pv);
    +
    +    }
    +
    +    public void init (StatisticsPanel wcp)
    +               throws GeneralException
    +    {
    +
    +        super.init (wcp);
    +
    +        this.createControls ();
    +
    +    }
    +
    +    private void createControls ()
    +    {
    +
    +        final ReadabilityIndicesChart _this = this;
    +
    +        Box b = new Box (BoxLayout.Y_AXIS);
    +        b.setOpaque (false);
    +
    +        this.showGF = UIUtils.createCheckBox ("Show Gunning Fog",
    +                                               new ActionListener ()
    +                                               {
    +
    +                                                    @Override
    +                                                    public void actionPerformed (ActionEvent ev)
    +                                                    {
    +
    +                                                        _this.updateChart ();
    +
    +                                                    }
    +
    +                                               });
    +
    +        this.showGF.setSelected (true);
    +
    +        this.showGF.addActionListener (new ActionListener ()
    +        {
    +
    +            @Override
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                if (!_this.showGF.isSelected ())
    +                {
    +
    +                    _this.showFK.setSelected (true);
    +
    +                }
    +            }
    +
    +        });
    +
    +        this.showFK = UIUtils.createCheckBox ("Show Flesch-Kincaid",
    +                                               new ActionListener ()
    +                                               {
    +
    +                                                    @Override
    +                                                    public void actionPerformed (ActionEvent ev)
    +                                                    {
    +
    +                                                        _this.updateChart ();
    +
    +                                                    }
    +
    +                                               });
    +
    +        this.showFK.setSelected (true);
    +
    +        this.showFK.addActionListener (new ActionListener ()
    +        {
    +
    +            @Override
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                if (!_this.showFK.isSelected ())
    +                {
    +
    +                    _this.showGF.setSelected (true);
    +
    +                }
    +            }
    +
    +        });
    +
    +        this.showAvg = UIUtils.createCheckBox ("Show Average",
    +                                               new ActionListener ()
    +                                               {
    +
    +                                                    @Override
    +                                                    public void actionPerformed (ActionEvent ev)
    +                                                    {
    +
    +                                                        _this.updateChart ();
    +
    +                                                    }
    +
    +                                               });
    +
    +        this.showTargets = UIUtils.createCheckBox ("Show Targets",
    +                                                  new ActionListener ()
    +                                                  {
    +
    +                                                    @Override
    +                                                    public void actionPerformed (ActionEvent ev)
    +                                                    {
    +
    +                                                        TargetsData targets = _this.viewer.getProjectTargets ();
    +
    +                                                        if ((targets.getReadabilityGF () == 0)
    +                                                            &&
    +                                                            (targets.getReadabilityFK () == 0)
    +                                                           )
    +                                                        {
    +
    +                                                            UIUtils.createQuestionPopup (_this.viewer,
    +                                                                                         "Set up Targets",
    +                                                                                         Constants.TARGET_ICON_NAME,
    +                                                                                         "You currently have no readability targets set up.<br /><br />Would you like to set the targets now?<br /><br />Note: Targets can be accessed at any time from the {Project} menu.",
    +                                                                                         "Yes, show me",
    +                                                                                         "No, not now",
    +                                                                                         new ActionListener ()
    +                                                                                         {
    +
    +                                                                                            @Override public void actionPerformed (ActionEvent ev)
    +                                                                                            {
    +
    +                                                                                                try
    +                                                                                                {
    +
    +                                                                                                    _this.viewer.viewTargets ();
    +
    +                                                                                                } catch (Exception e) {
    +
    +                                                                                                    UIUtils.showErrorMessage (_this.viewer,
    +                                                                                                                              "Unable to show targets.");
    +
    +                                                                                                    Environment.logError ("Unable to show targets",
    +                                                                                                                          e);
    +
    +                                                                                                }
    +
    +                                                                                            }
    +
    +                                                                                         },
    +                                                                                         null,
    +                                                                                         null,
    +                                                                                         null);
    +
    +                                                            _this.showTargets.setSelected (false);
    +
    +                                                            return;
    +
    +                                                        }
    +
    +                                                        _this.updateChart ();
    +
    +                                                    }
    +
    +                                                  });
    +
    +        Box opts = new Box (BoxLayout.Y_AXIS);
    +
    +        b.add (opts);
    +
    +        opts.setBorder (UIUtils.createPadding (0, 10, 0, 0));
    +
    +        opts.add (this.showFK);
    +        opts.add (this.showGF);
    +        opts.add (this.showAvg);
    +        opts.add (this.showTargets);
    +
    +        b.add (Box.createVerticalStrut (10));
    +
    +        Header h = UIUtils.createBoldSubHeader (Environment.replaceObjectNames ("For these {Chapters}"),
    +                                                null);
    +        h.setOpaque (false);
    +        h.setAlignmentY (Component.TOP_ALIGNMENT);
    +
    +        b.add (h);
    +
    +        this.chapters = new JTree (UIUtils.createTree (this.viewer.getProject ().getBook (0),
    +                                                       new ArrayList (), /* exclude */
    +                                                       this.viewer.getProject ().getBook (0).getChapters (), /* init */
    +                                                       true));
    +
    +        this.chapters.setOpaque (false);
    +
    +        this.chapters.getModel ().addTreeModelListener (new TreeModelAdapter ()
    +        {
    +
    +            public void treeNodesChanged (TreeModelEvent ev)
    +            {
    +
    +                // Don't care what has changed, just trigger an update to the
    +                // chart.
    +                _this.updateChart ();
    +
    +            }
    +
    +        });
    +
    +        SelectableProjectTreeCellRenderer rend = new SelectableProjectTreeCellRenderer ();
    +
    +        rend.setShowIcons (false);
    +
    +        this.chapters.setCellRenderer (rend);
    +        UIUtils.addSelectableListener (this.chapters);
    +
    +        this.chapters.setRootVisible (false);
    +        this.chapters.setShowsRootHandles (false);
    +        this.chapters.setScrollsOnExpand (true);
    +        this.chapters.setBorder (UIUtils.createPadding (0, 5, 0, 0));
    +
    +        // Never toggle.
    +        this.chapters.setToggleClickCount (-1);
    +
    +        this.chapters.setAlignmentX (Component.LEFT_ALIGNMENT);
    +
    +        b.add (this.chapters);
    +
    +        this.controls = b;
    +
    +    }
    +
    +    private void createChart ()
    +                       throws GeneralException
    +    {
    +
    +        final ReadabilityIndicesChart _this = this;
    +
    +        ChapterDataHandler dh = (ChapterDataHandler) this.viewer.getDataHandler (Chapter.class);
    +
    +        Set<Chapter> selected = new HashSet ();
    +
    +        UIUtils.getSelectedObjects ((DefaultMutableTreeNode) this.chapters.getModel ().getRoot (),
    +                                    selected);
    +
    +        int chapterCount = 0;
    +        float totalFK = 0;
    +        float totalGF = 0;
    +        float maxFK = 0;
    +        float maxGF = 0;
    +        float showMax = 0;
    +
    +        final DefaultCategoryDataset ds = new DefaultCategoryDataset ();
    +
    +        try
    +        {
    +
    +            for (Book book : this.viewer.getProject ().getBooks ())
    +            {
    +
    +                for (Chapter c : book.getChapters ())
    +                {
    +
    +                    if (!selected.contains (c))
    +                    {
    +
    +                        continue;
    +
    +                    }
    +
    +                    ReadabilityIndices ri = this.viewer.getReadabilityIndices (c);
    +
    +                    float fk = ri.getFleschKincaidGradeLevel ();
    +                    float gf = ri.getGunningFogIndex ();
    +
    +                    chapterCount++;
    +                    totalFK += fk;
    +                    totalGF += gf;
    +
    +                    maxFK = Math.max (maxFK, fk);
    +                    maxGF = Math.max (maxGF, gf);
    +
    +                    if (this.showFK.isSelected ())
    +                    {
    +
    +                        ds.addValue (fk,
    +                                     "Flesch-Kincaid",
    +                                     c.getName ());
    +
    +                    }
    +
    +                    if (this.showGF.isSelected ())
    +                    {
    +
    +                        ds.addValue (gf,
    +                                     "Gunning Fog",
    +                                     c.getName ());
    +
    +                    }
    +
    +                }
    +
    +            }
    +
    +        } catch (Exception e)
    +        {
    +
    +            Environment.logError ("Unable to get word counts",
    +                                  e);
    +
    +            UIUtils.showErrorMessage (this.parent,
    +                                      "Unable to word counts");
    +
    +            return;
    +
    +        }
    +
    +        this.chart = QuollChartUtils.createBarChart (Environment.getObjectTypeNamePlural (Chapter.OBJECT_TYPE),
    +                                                     "Reading Level",
    +                                                     ds);
    +
    +        this.chart.setBackgroundPaint (UIUtils.getComponentColor ());
    +
    +        CategoryPlot plot = (CategoryPlot) this.chart.getPlot ();
    +
    +        QuollChartUtils.customizePlot (plot);
    +
    +        final CategoryAxis domainAxis = plot.getDomainAxis();
    +        domainAxis.setCategoryLabelPositions (CategoryLabelPositions.STANDARD);//CategoryLabelPositions.createUpRotationLabelPositions (Math.PI / 0.5));
    +
    +        plot.setOrientation (PlotOrientation.HORIZONTAL);
    +        plot.setRangeAxisLocation (AxisLocation.BOTTOM_OR_LEFT);
    +
    +        TargetsData ptargs = this.viewer.getProjectTargets ();
    +
    +        int targetGF = ptargs.getReadabilityGF ();
    +        int targetFK = ptargs.getReadabilityFK ();
    +
    +        double avgGF = totalGF / chapterCount;
    +        double avgFK = totalFK / chapterCount;
    +
    +        double diffAvgGF = avgGF - targetGF;
    +
    +        boolean showGF = this.showGF.isSelected ();
    +        boolean showFK = this.showFK.isSelected ();
    +
    +        if (this.showAvg.isSelected ())
    +        {
    +
    +            String tgf = "";
    +
    +            if ((targetGF > 0)
    +                &&
    +                (showGF)
    +               )
    +            {
    +
    +                tgf = String.format (", %s%s target",
    +                                     (diffAvgGF < 0 ? "" : "+"),
    +                                     Environment.formatNumber (diffAvgGF));
    +
    +            }
    +
    +            RectangleAnchor anch = RectangleAnchor.TOP_LEFT;
    +
    +            if (avgGF > avgFK)
    +            {
    +
    +                anch = RectangleAnchor.TOP_RIGHT;
    +
    +            }
    +
    +            plot.addRangeMarker (QuollChartUtils.createMarker (String.format ("Avg GF %s%s",
    +                                                                              Environment.formatNumber (avgGF),
    +                                                                              tgf),
    +                                                               avgGF,
    +                                                               1,
    +                                                               anch));
    +
    +            String tfk = "";
    +
    +            if ((targetFK > 0)
    +                &&
    +                (showFK)
    +               )
    +            {
    +
    +                double diffAvgFK = avgFK - targetFK;
    +
    +                tfk = String.format (", %s%s target",
    +                                     (diffAvgFK < 0 ? "" : "+"),
    +                                     Environment.formatNumber (diffAvgFK));
    +
    +            }
    +
    +            anch = RectangleAnchor.TOP_LEFT;
    +
    +            if (avgFK > avgGF)
    +            {
    +
    +                anch = RectangleAnchor.TOP_RIGHT;
    +
    +            }
    +
    +            plot.addRangeMarker (QuollChartUtils.createMarker (String.format ("Avg FK %s%s",
    +                                                                              Environment.formatNumber (avgFK),
    +                                                                              tfk),
    +                                                               avgFK,
    +                                                               0,
    +                                                               anch));
    +
    +        }
    +
    +        if (this.showTargets.isSelected ())
    +        {
    +
    +            RectangleAnchor anch = RectangleAnchor.BOTTOM_LEFT;
    +
    +            if (targetGF > targetFK)
    +            {
    +
    +                anch = RectangleAnchor.BOTTOM_RIGHT;
    +
    +            }
    +
    +            if ((targetGF > 0)
    +                &&
    +                (showGF)
    +               )
    +            {
    +
    +                plot.addRangeMarker (QuollChartUtils.createMarker (String.format ("GF Target %s",
    +                                                                                  Environment.formatNumber (targetGF)),
    +                                                                   targetGF,
    +                                                                   1,
    +                                                                   anch));
    +
    +            }
    +
    +            anch = RectangleAnchor.BOTTOM_LEFT;
    +
    +            if (targetFK > targetGF)
    +            {
    +
    +                anch = RectangleAnchor.BOTTOM_RIGHT;
    +
    +            }
    +
    +            if (targetGF > maxGF)
    +            {
    +
    +                showMax = targetGF + 1;
    +
    +            }
    +
    +            if ((targetFK > 0)
    +                &&
    +                (showFK)
    +               )
    +            {
    +
    +                plot.addRangeMarker (QuollChartUtils.createMarker (String.format ("FK Target %s",
    +                                                                                  Environment.formatNumber (targetFK)),
    +                                                                   targetFK,
    +                                                                   0,
    +                                                                   anch));
    +
    +            }
    +
    +            if ((targetFK > maxFK)
    +                &&
    +                (targetFK > showMax)
    +               )
    +            {
    +
    +                showMax = targetFK + 1;
    +
    +            }
    +
    +            if (showMax > 0)
    +            {
    +
    +                ((NumberAxis) plot.getRangeAxis()).setUpperBound (showMax);
    +
    +            }
    +
    +        }
    +
    +        int overGF = 0;
    +        int overFK = 0;
    +
    +        for (Chapter c : selected)
    +        {
    +
    +            ReadabilityIndices ri = this.viewer.getReadabilityIndices (c);
    +
    +            float fk = ri.getFleschKincaidGradeLevel ();
    +            float gf = ri.getGunningFogIndex ();
    +
    +            if (fk > targetFK)
    +            {
    +
    +                overFK++;
    +
    +            }
    +
    +            if (gf > targetGF)
    +            {
    +
    +                overGF++;
    +
    +            }
    +
    +        }
    +
    +        ((NumberAxis) plot.getRangeAxis ()).setAutoRangeIncludesZero (true);
    +
    +        Set<JComponent> items = new LinkedHashSet ();
    +
    +        if ((targetFK > 0)
    +            &&
    +            (overFK > 0)
    +            &&
    +            (showFK)
    +           )
    +        {
    +
    +            String t = String.format ("%s {Chapter%s} over target Flesch-Kincaid",
    +                                      Environment.formatNumber (overFK),
    +                                      (overFK == 1 ? "" : "s"));
    +
    +            // TODO: Fix this nonsense.
    +            ActionListener _null = null;
    +
    +            final JLabel l = this.createWarningLabel (UIUtils.createClickableLabel (t,
    +                                                                                    null,
    +                                                                                    _null));
    +
    +            UIUtils.makeClickable (l,
    +                                    new ActionListener ()
    +                                    {
    +
    +                                       @Override
    +                                       public void actionPerformed (ActionEvent ev)
    +                                       {
    +
    +                                           Targets.showChaptersOverReadabilityTarget (_this.viewer,
    +                                                                                      l);
    +
    +                                       }
    +
    +                                    });
    +
    +            l.setToolTipText ("Click to view the " + t);
    +
    +            items.add (l);
    +
    +        }
    +
    +        if ((targetGF > 0)
    +            &&
    +            (overGF > 0)
    +            &&
    +            (showGF)
    +           )
    +        {
    +
    +            String t = String.format ("%s {Chapter%s} over target Gunning Fog",
    +                                      Environment.formatNumber (overGF),
    +                                      (overGF == 1 ? "" : "s"));
    +
    +            // TODO: Fix this nonsense.
    +            ActionListener _null = null;
    +
    +            final JLabel l = this.createDetailLabel (UIUtils.createClickableLabel (t,
    +                                                                                   null,
    +                                                                                   _null));
    +
    +            l.setIcon (Environment.getIcon (Constants.ERROR_ICON_NAME,
    +                                            Constants.ICON_MENU));
    +
    +            UIUtils.makeClickable (l,
    +                                    new ActionListener ()
    +                                    {
    +
    +                                       @Override
    +                                       public void actionPerformed (ActionEvent ev)
    +                                       {
    +
    +                                           Targets.showChaptersOverReadabilityTarget (_this.viewer,
    +                                                                                      l);
    +
    +                                       }
    +
    +                                    });
    +
    +            l.setToolTipText ("Click to view the " + t);
    +
    +            items.add (l);
    +
    +        }
    +
    +        if (showFK)
    +        {
    +
    +            items.add (this.createDetailLabel (String.format ("%s - Average Flesch-Kincaid",
    +                                                              Environment.formatNumber (avgFK))));
    +
    +        }
    +
    +        if (showGF)
    +        {
    +
    +            items.add (this.createDetailLabel (String.format ("%s - Average Gunning Fog",
    +                                                              Environment.formatNumber (avgGF))));
    +
    +        }
    +
    +        this.detail = QuollChartUtils.createDetailPanel (items);
    +
    +    }
    +
    +    public String getTitle ()
    +    {
    +
    +        return CHART_TITLE;
    +
    +    }
    +
    +    public String getType ()
    +    {
    +
    +        return CHART_TYPE;
    +
    +    }
    +
    +    public JComponent getControls (boolean update)
    +    {
    +
    +        if (update)
    +        {
    +
    +            this.controls = null;
    +
    +        }
    +
    +        if (this.controls == null)
    +        {
    +
    +            this.createControls ();
    +
    +        }
    +
    +        return this.controls;
    +
    +    }
    +
    +    public JFreeChart getChart (boolean update)
    +                         throws GeneralException
    +    {
    +
    +        if (update)
    +        {
    +
    +            this.chart = null;
    +
    +        }
    +
    +        if (this.chart == null)
    +        {
    +
    +            this.createChart ();
    +
    +        }
    +
    +        return this.chart;
    +
    +    }
    +
    +    public JComponent getDetail (boolean update)
    +                          throws GeneralException
    +    {
    +
    +        if (update)
    +        {
    +
    +            this.detail = null;
    +
    +        }
    +
    +        if (this.detail == null)
    +        {
    +
    +            this.createChart ();
    +
    +        }
    +
    +        return this.detail;
    +
    +    }
    +
    +    public String toString ()
    +    {
    +
    +        return Environment.replaceObjectNames (this.getTitle ());
    +
    +    }
    +
    +}
    \ No newline at end of file
    diff --git a/src/com/quollwriter/ui/charts/SessionTimeChart.java b/src/com/quollwriter/ui/charts/SessionTimeChart.java
    new file mode 100644
    index 0000000..cbb837b
    --- /dev/null
    +++ b/src/com/quollwriter/ui/charts/SessionTimeChart.java
    @@ -0,0 +1,661 @@
    +package com.quollwriter.ui.charts;
    +
    +import java.awt.Component;
    +import java.awt.Dimension;
    +import java.awt.Font;
    +import java.awt.event.*;
    +
    +import java.text.*;
    +import java.util.*;
    +
    +import javax.swing.*;
    +import javax.swing.border.*;
    +import javax.swing.tree.*;
    +import javax.swing.event.*;
    +
    +import org.jfree.chart.*;
    +import org.jfree.chart.labels.StandardXYToolTipGenerator;
    +import org.jfree.chart.labels.XYToolTipGenerator;
    +import org.jfree.ui.*;
    +import org.jfree.data.time.*;
    +import org.jfree.data.xy.XYDataset;
    +import org.jfree.chart.renderer.xy.*;
    +import org.jfree.chart.axis.*;
    +import org.jfree.chart.plot.*;
    +
    +import com.quollwriter.*;
    +import com.quollwriter.data.*;
    +import com.quollwriter.ui.events.*;
    +import com.quollwriter.ui.*;
    +import com.quollwriter.ui.panels.*;
    +import com.quollwriter.db.*;
    +import com.quollwriter.ui.renderers.*;
    +import com.quollwriter.ui.components.Header;
    +import com.quollwriter.ui.components.ActionAdapter;
    +import com.quollwriter.ui.components.FormItem;
    +
    +public class SessionTimeChart extends AbstractQuollChart<AbstractViewer>
    +{
    +
    +    public static final String CHART_TYPE = "session-time";
    +    public static final String CHART_TITLE = "Session Length";
    +
    +    private JFreeChart chart = null;
    +    private JComponent controls = null;
    +    private JComboBox      displayB = null;
    +    private JCheckBox          showAvg = null;
    +    private JCheckBox          showZeroWordCount = null;
    +    private JComponent detail = null;
    +
    +    public SessionTimeChart (AbstractViewer v)
    +    {
    +
    +        super (v);
    +
    +    }
    +
    +    public void init (StatisticsPanel wcp)
    +               throws GeneralException
    +    {
    +
    +        super.init (wcp);
    +
    +        this.createControls ();
    +
    +    }
    +
    +    private void createControls ()
    +    {
    +
    +        final SessionTimeChart _this = this;
    +
    +        Box b = new Box (BoxLayout.Y_AXIS);
    +        b.setOpaque (false);
    +
    +        Header h = UIUtils.createBoldSubHeader (Environment.replaceObjectNames ("For"),
    +                                                null);
    +        h.setAlignmentY (Component.TOP_ALIGNMENT);
    +
    +        b.add (h);
    +
    +        Vector displayItems = new Vector ();
    +        displayItems.add ("This week");
    +        displayItems.add ("Last week");
    +        displayItems.add ("This month");
    +        displayItems.add ("Last month");
    +        displayItems.add ("All time");
    +
    +        b.add (Box.createVerticalStrut (5));
    +
    +        this.displayB = new JComboBox (displayItems);
    +        this.displayB.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        this.displayB.setMaximumSize (displayB.getPreferredSize ());
    +
    +        this.displayB.setAlignmentY (Component.TOP_ALIGNMENT);
    +
    +        this.displayB.addActionListener (new ActionAdapter ()
    +        {
    +
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                _this.updateChart ();
    +
    +            }
    +
    +        });
    +
    +        Box db = new Box (BoxLayout.X_AXIS);
    +        db.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        db.setAlignmentY (Component.TOP_ALIGNMENT);
    +
    +        db.add (Box.createHorizontalStrut (5));
    +
    +        db.add (this.displayB);
    +        db.setMaximumSize (db.getPreferredSize ());
    +
    +        b.add (db);
    +
    +        b.add (Box.createVerticalStrut (10));
    +
    +        this.showAvg = UIUtils.createCheckBox ("Show Average",
    +                                               new ActionListener ()
    +                                               {
    +
    +                                                    @Override
    +                                                    public void actionPerformed (ActionEvent ev)
    +                                                    {
    +
    +                                                        _this.updateChart ();
    +
    +                                                    }
    +
    +                                               });
    +
    +        this.showZeroWordCount = UIUtils.createCheckBox ("Show zero word count sessions",
    +                                                  new ActionListener ()
    +                                                  {
    +
    +                                                    @Override
    +                                                    public void actionPerformed (ActionEvent ev)
    +                                                    {
    +
    +                                                        _this.updateChart ();
    +
    +                                                    }
    +
    +                                                  });
    +
    +        Box opts = new Box (BoxLayout.Y_AXIS);
    +
    +        b.add (opts);
    +
    +        opts.setBorder (UIUtils.createPadding (0, 10, 0, 0));
    +
    +        opts.add (this.showAvg);
    +        opts.add (this.showZeroWordCount);
    +
    +        this.controls = b;
    +
    +    }
    +
    +    private void createChart ()
    +                       throws GeneralException
    +    {
    +
    +        int days = -1;
    +
    +        Date minDate = null;
    +        Date maxDate = new Date ();
    +
    +        // This week.
    +        if (this.displayB.getSelectedIndex () == 0)
    +        {
    +
    +            // Work out how many days there have been this week.
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            days = gc.get (Calendar.DAY_OF_WEEK) - gc.getFirstDayOfWeek ();
    +
    +            if (days < 0)
    +            {
    +
    +                days -= 7;
    +
    +            }
    +
    +            gc.add (Calendar.DATE,
    +                    -1 * days);
    +
    +            minDate = gc.getTime ();
    +
    +        }
    +
    +        // Last week
    +        if (this.displayB.getSelectedIndex () == 1)
    +        {
    +
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            days = gc.get (Calendar.DAY_OF_WEEK) - gc.getFirstDayOfWeek ();
    +
    +            if (days < 0)
    +            {
    +
    +                days -= 7;
    +
    +            }
    +
    +            gc.add (Calendar.DATE,
    +                    (-1 * days) - 1);
    +
    +            maxDate = gc.getTime ();
    +
    +            days += 7;
    +
    +            gc.add (Calendar.DATE,
    +                    -6);
    +
    +            minDate = gc.getTime ();
    +
    +        }
    +
    +        // This month.
    +        if (this.displayB.getSelectedIndex () == 2)
    +        {
    +
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            days = gc.get (Calendar.DATE);
    +
    +            gc.set (Calendar.DATE,
    +                    1);
    +
    +            minDate = gc.getTime ();
    +
    +        }
    +
    +        // Last month.
    +        if (this.displayB.getSelectedIndex () == 3)
    +        {
    +
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            gc.add (Calendar.MONTH,
    +                    -1);
    +
    +            days = gc.getActualMaximum (Calendar.DATE);
    +
    +            gc.set (Calendar.DATE,
    +                    days);
    +
    +            maxDate = gc.getTime ();
    +
    +            gc.set (Calendar.DATE,
    +                    1);
    +
    +            minDate = gc.getTime ();
    +
    +        }
    +
    +        // All time
    +        if (this.displayB.getSelectedIndex () == 4)
    +        {
    +
    +            days = -1;
    +
    +        }
    +
    +        long avg = 0;
    +        long total = 0;
    +        long sessions = 0;
    +        long max = 0;
    +        Date maxSessStart = null;
    +        long zeroSessions = 0;
    +        long zeroSessionsTime = 0;
    +        long longSessions = 0;
    +        long totalWords = 0;
    +
    +        final TimePeriodValuesCollection ds = new TimePeriodValuesCollection ();
    +
    +        try
    +        {
    +
    +            TimePeriodValues vals = new TimePeriodValues ("Sessions");
    +
    +            for (Session s : Environment.getSessions (days))
    +            {
    +
    +                int wc = s.getWordCount ();
    +
    +                if ((!this.showZeroWordCount.isSelected ())
    +                    &&
    +                    (wc == 0)
    +                   )
    +                {
    +
    +                    continue;
    +
    +                }
    +
    +                long time = s.getEnd ().getTime () - s.getStart ().getTime ();
    +
    +                if (time < 60 * 1000)
    +                {
    +
    +                    continue;
    +
    +                }
    +
    +                if (wc == 0)
    +                {
    +
    +                    zeroSessions++;
    +                    zeroSessionsTime += time;
    +
    +                }
    +
    +                totalWords += wc;
    +
    +                total += time;
    +
    +                if ((time > 1 * 60 * 60 * 1000)
    +                    &&
    +                    (wc > 0)
    +                   )
    +                {
    +
    +                    longSessions++;
    +
    +                }
    +
    +                if (time > max)
    +                {
    +
    +                    max = time;
    +                    maxSessStart = s.getStart ();
    +
    +                }
    +
    +                sessions++;
    +
    +                vals.add (new SimpleTimePeriod (s.getStart (),
    +                                                s.getEnd ()),
    +                          time);
    +
    +            }
    +
    +            ds.addSeries (vals);
    +
    +        } catch (Exception e)
    +        {
    +
    +            Environment.logError ("Unable to get sessions",
    +                                  e);
    +
    +            UIUtils.showErrorMessage (this.parent,
    +                                      "Unable to show sessions");
    +
    +            return;
    +
    +        }
    +
    +        avg = total / sessions;
    +
    +        this.chart = QuollChartUtils.createTimeSeriesChart ("Date",
    +                                                            "Duration",
    +                                                            ds);
    +
    +        this.chart.removeLegend ();
    +
    +        this.chart.setBackgroundPaint (UIUtils.getComponentColor ());
    +
    +        XYPlot xyplot = (XYPlot) this.chart.getPlot ();
    +
    +        PeriodAxis axis = (PeriodAxis) xyplot.getDomainAxis ();
    +
    +        if (minDate != null)
    +        {
    +
    +            axis.setLowerBound (minDate.getTime ());
    +
    +            axis.setUpperBound (maxDate.getTime ());
    +
    +        }
    +
    +        QuollChartUtils.customizePlot (xyplot);
    +
    +        if (this.showAvg.isSelected ())
    +        {
    +
    +            xyplot.addRangeMarker (QuollChartUtils.createMarker (String.format ("Avg %s",
    +                                                                                Utils.formatAsDuration (avg)),
    +                                                                 avg,
    +                                                                 0));
    +
    +        }
    +
    +        ((NumberAxis) xyplot.getRangeAxis ()).setAutoRangeIncludesZero (true);
    +
    +        ((NumberAxis) xyplot.getRangeAxis ()).setNumberFormatOverride (new NumberFormat ()
    +        {
    +
    +            @Override
    +            public StringBuffer format (double        number,
    +                                        StringBuffer  toAppendTo,
    +                                        FieldPosition pos)
    +            {
    +
    +                return new StringBuffer (Utils.formatAsDuration (number));
    +
    +            }
    +
    +            @Override
    +            public StringBuffer format (long          number,
    +                                        StringBuffer  toAppendTo,
    +                                        FieldPosition pos)
    +            {
    +
    +                return new StringBuffer (Utils.formatAsDuration (number));
    +
    +            }
    +
    +            @Override
    +            public Number parse(String source, ParsePosition parsePosition) {
    +                return null;
    +            }
    +
    +        });
    +
    +        long min = 60 * 1000;
    +        long hour = 60 * min;
    +        long day = 24 * hour;
    +
    +        // Default 5 min tick.
    +        long tick = 5 * min;
    +
    +        if (max > (hour))
    +        {
    +
    +            tick = 20 * min;
    +
    +        }
    +
    +        if (max > (3 * hour))
    +        {
    +
    +            tick = 30 * min;
    +
    +        }
    +
    +        if (max > (6 * hour))
    +        {
    +
    +            tick = hour;
    +
    +        }
    +
    +        if (max > (12 * hour))
    +        {
    +
    +            tick = 2 * hour;
    +
    +        }
    +
    +        if (max > (day))
    +        {
    +
    +            tick = 3 * hour;
    +
    +        }
    +
    +        if (max > (2 * day))
    +        {
    +
    +            tick = 6 * hour;
    +
    +        }
    +
    +        if (max > (3 * day))
    +        {
    +
    +            tick = 12 * hour;
    +
    +        }
    +
    +        if (max > (5 * day))
    +        {
    +
    +            tick = day;
    +
    +        }
    +
    +        ((NumberAxis) xyplot.getRangeAxis ()).setTickUnit (new NumberTickUnit (tick)
    +        {
    +
    +            @Override
    +            public String valueToString (double number)
    +            {
    +
    +                return Utils.formatAsDuration (number);
    +
    +            }
    +
    +        });
    +
    +        final SimpleDateFormat dateFormat = new SimpleDateFormat ("hh:mm a, EEE, dd MMM yyyy");
    +
    +        XYToolTipGenerator ttgen = new StandardXYToolTipGenerator ()
    +        {
    +
    +            public String generateToolTip (XYDataset dataset,
    +                                           int       series,
    +                                           int       item)
    +            {
    +
    +                TimePeriodValuesCollection tsc = (TimePeriodValuesCollection) dataset;
    +
    +                TimePeriodValues ts = tsc.getSeries (series);
    +
    +                Number n = ts.getValue (item);
    +
    +                StringBuilder b = new StringBuilder ();
    +
    +                b.append (dateFormat.format (ts.getTimePeriod (item).getStart ()));
    +                b.append (", ");
    +
    +                b.append (Utils.formatAsDuration (n.intValue ()));
    +
    +                return b.toString ();
    +
    +            }
    +
    +        };
    +
    +        ((XYBarRenderer) xyplot.getRenderer ()).setSeriesToolTipGenerator (0,
    +                                                                           ttgen);
    +
    +        Set<JComponent> items = new LinkedHashSet ();
    +
    +        items.add (this.createDetailLabel (String.format ("%s - Session%s",
    +                                                          Environment.formatNumber (sessions),
    +                                                          (sessions == 1 ? "" : "s"))));
    +
    +        items.add (this.createDetailLabel (String.format ("%s - Session%s over 1 hour",
    +                                                          Environment.formatNumber (longSessions),
    +                                                          (longSessions == 1 ? "" : "s"))));
    +
    +        items.add (this.createDetailLabel (String.format ("%s - Words total",
    +                                                          Environment.formatNumber (totalWords))));
    +
    +        items.add (this.createDetailLabel (String.format ("%s - Total session time",
    +                                                          Utils.formatAsDuration (total))));
    +
    +        items.add (this.createDetailLabel (String.format ("%s - Average session length",
    +                                                          Utils.formatAsDuration (total / sessions))));
    +
    +        items.add (this.createDetailLabel (String.format ("%s, %s - Longest session",
    +                                                          Utils.formatAsDuration (max),
    +                                                          Environment.formatDateTime (maxSessStart))));
    +
    +        if (this.showZeroWordCount.isSelected ())
    +        {
    +
    +            items.add (this.createDetailLabel (String.format ("%s, %s - Zero word count sessions",
    +                                                              Environment.formatNumber (zeroSessions),
    +                                                              Utils.formatAsDuration (zeroSessionsTime))));
    +
    +        }
    +
    +        this.detail = QuollChartUtils.createDetailPanel (items);
    +
    +    }
    +
    +    public String getTitle ()
    +    {
    +
    +        return CHART_TITLE;
    +
    +    }
    +
    +    public String getType ()
    +    {
    +
    +        return CHART_TYPE;
    +
    +    }
    +
    +    public JComponent getControls (boolean update)
    +                            throws GeneralException
    +    {
    +
    +        if (update)
    +        {
    +
    +            this.controls = null;
    +
    +        }
    +
    +        if (this.controls == null)
    +        {
    +
    +            this.createControls ();
    +
    +        }
    +
    +        return this.controls;
    +
    +    }
    +
    +    public JFreeChart getChart (boolean update)
    +                         throws GeneralException
    +    {
    +
    +        if (update)
    +        {
    +
    +            this.chart = null;
    +
    +        }
    +
    +        if (this.chart == null)
    +        {
    +
    +            this.createChart ();
    +
    +        }
    +
    +        return this.chart;
    +
    +    }
    +
    +    public JComponent getDetail (boolean update)
    +                          throws GeneralException
    +    {
    +
    +        if (update)
    +        {
    +
    +            this.chart = null;
    +
    +        }
    +
    +        if (this.chart == null)
    +        {
    +
    +            this.createChart ();
    +
    +        }
    +
    +        return this.detail;
    +
    +    }
    +
    +    public String toString ()
    +    {
    +
    +        return Environment.replaceObjectNames (this.getTitle ());
    +
    +    }
    +
    +}
    \ No newline at end of file
    diff --git a/src/com/quollwriter/ui/charts/SessionWordCountChart.java b/src/com/quollwriter/ui/charts/SessionWordCountChart.java
    new file mode 100644
    index 0000000..a27bdb9
    --- /dev/null
    +++ b/src/com/quollwriter/ui/charts/SessionWordCountChart.java
    @@ -0,0 +1,630 @@
    +package com.quollwriter.ui.charts;
    +
    +import java.awt.Component;
    +import java.awt.Dimension;
    +import java.awt.Font;
    +import java.awt.event.*;
    +
    +import java.text.*;
    +import java.util.*;
    +
    +import javax.swing.*;
    +import javax.swing.border.*;
    +import javax.swing.tree.*;
    +import javax.swing.event.*;
    +
    +import org.jfree.chart.*;
    +import org.jfree.ui.*;
    +import org.jfree.chart.labels.StandardXYToolTipGenerator;
    +import org.jfree.chart.labels.XYToolTipGenerator;
    +import org.jfree.data.time.*;
    +import org.jfree.data.xy.XYDataset;
    +import org.jfree.chart.renderer.xy.*;
    +import org.jfree.chart.axis.*;
    +import org.jfree.chart.plot.*;
    +
    +import com.quollwriter.*;
    +import com.quollwriter.data.*;
    +import com.quollwriter.ui.events.*;
    +import com.quollwriter.ui.*;
    +import com.quollwriter.ui.panels.*;
    +import com.quollwriter.db.*;
    +import com.quollwriter.ui.renderers.*;
    +import com.quollwriter.ui.components.Header;
    +import com.quollwriter.ui.components.ActionAdapter;
    +import com.quollwriter.ui.components.FormItem;
    +
    +public class SessionWordCountChart extends AbstractQuollChart<AbstractViewer>
    +{
    +
    +    public static final String CHART_TYPE = "session-word-count";
    +    public static final String CHART_TITLE = "Session Word Count";
    +
    +    private JFreeChart chart = null;
    +    private JComponent controls = null;
    +    private JComboBox      displayB = null;
    +    private JCheckBox          showAvg = null;
    +    private JCheckBox          showTarget = null;
    +    private JComponent detail = null;
    +
    +    public SessionWordCountChart (AbstractViewer v)
    +    {
    +
    +        super (v);
    +
    +    }
    +
    +    public void init (StatisticsPanel wcp)
    +               throws GeneralException
    +    {
    +
    +        super.init (wcp);
    +
    +        this.createControls ();
    +
    +    }
    +
    +    private void createControls ()
    +    {
    +
    +        final SessionWordCountChart _this = this;
    +
    +        Box b = new Box (BoxLayout.Y_AXIS);
    +        b.setOpaque (false);
    +
    +        Header h = UIUtils.createBoldSubHeader (Environment.replaceObjectNames ("For"),
    +                                                null);
    +        h.setAlignmentY (Component.TOP_ALIGNMENT);
    +
    +        b.add (h);
    +
    +        Vector displayItems = new Vector ();
    +        displayItems.add ("This week");
    +        displayItems.add ("Last week");
    +        displayItems.add ("This month");
    +        displayItems.add ("Last month");
    +        displayItems.add ("All time");
    +
    +        b.add (Box.createVerticalStrut (5));
    +
    +        this.displayB = new JComboBox (displayItems);
    +        this.displayB.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        this.displayB.setMaximumSize (displayB.getPreferredSize ());
    +
    +        this.displayB.setAlignmentY (Component.TOP_ALIGNMENT);
    +
    +        this.displayB.addActionListener (new ActionAdapter ()
    +        {
    +
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                _this.updateChart ();
    +
    +            }
    +
    +        });
    +
    +        Box db = new Box (BoxLayout.X_AXIS);
    +        db.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        db.setAlignmentY (Component.TOP_ALIGNMENT);
    +
    +        db.add (Box.createHorizontalStrut (5));
    +
    +        db.add (this.displayB);
    +        db.setMaximumSize (db.getPreferredSize ());
    +
    +        b.add (db);
    +
    +        b.add (Box.createVerticalStrut (10));
    +
    +        this.showAvg = UIUtils.createCheckBox ("Show Average",
    +                                               new ActionListener ()
    +                                               {
    +
    +                                                    @Override
    +                                                    public void actionPerformed (ActionEvent ev)
    +                                                    {
    +
    +                                                        _this.updateChart ();
    +
    +                                                    }
    +
    +                                               });
    +
    +        this.showTarget = UIUtils.createCheckBox ("Show Target",
    +                                                  new ActionListener ()
    +                                                  {
    +
    +                                                    @Override
    +                                                    public void actionPerformed (ActionEvent ev)
    +                                                    {
    +
    +                                                        TargetsData targets = Environment.getUserTargets ();
    +
    +                                                        if ((targets.getMySessionWriting () == 0)
    +                                                           )
    +                                                        {
    +
    +                                                            UIUtils.createQuestionPopup (_this.viewer,
    +                                                                                         "Set up Target",
    +                                                                                         Constants.TARGET_ICON_NAME,
    +                                                                                         "You currently have no writing targets set up.<br /><br />Would you like to set the targets now?<br /><br />Note: Targets can be accessed at any time from the {Project} menu.",
    +                                                                                         "Yes, show me",
    +                                                                                         "No, not now",
    +                                                                                         new ActionListener ()
    +                                                                                         {
    +
    +                                                                                            @Override public void actionPerformed (ActionEvent ev)
    +                                                                                            {
    +
    +                                                                                                try
    +                                                                                                {
    +
    +                                                                                                    _this.viewer.viewTargets ();
    +
    +                                                                                                } catch (Exception e) {
    +
    +                                                                                                    UIUtils.showErrorMessage (_this.viewer,
    +                                                                                                                              "Unable to show targets.");
    +
    +                                                                                                    Environment.logError ("Unable to show targets",
    +                                                                                                                          e);
    +
    +                                                                                                }
    +
    +                                                                                            }
    +
    +                                                                                         },
    +                                                                                         null,
    +                                                                                         null,
    +                                                                                         null);
    +
    +                                                            _this.showTarget.setSelected (false);
    +
    +                                                            return;
    +
    +                                                        }
    +
    +                                                        _this.updateChart ();
    +
    +                                                    }
    +
    +                                                  });
    +
    +        Box opts = new Box (BoxLayout.Y_AXIS);
    +
    +        b.add (opts);
    +
    +        opts.setBorder (UIUtils.createPadding (0, 5, 0, 0));
    +
    +        opts.add (this.showAvg);
    +        opts.add (this.showTarget);
    +
    +        this.controls = b;
    +
    +    }
    +
    +    private void createChart ()
    +                       throws GeneralException
    +    {
    +
    +        int days = -1;
    +
    +        Date minDate = null;
    +        Date maxDate = new Date ();
    +
    +        // This week.
    +        if (this.displayB.getSelectedIndex () == 0)
    +        {
    +
    +            // Work out how many days there have been this week.
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            days = gc.get (Calendar.DAY_OF_WEEK) - gc.getFirstDayOfWeek ();
    +
    +            if (days < 0)
    +            {
    +
    +                days -= 7;
    +
    +            }
    +
    +            gc.add (Calendar.DATE,
    +                    -1 * days);
    +
    +            minDate = gc.getTime ();
    +
    +        }
    +
    +        // Last week
    +        if (this.displayB.getSelectedIndex () == 1)
    +        {
    +
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            days = gc.get (Calendar.DAY_OF_WEEK) - gc.getFirstDayOfWeek ();
    +
    +            if (days < 0)
    +            {
    +
    +                days -= 7;
    +
    +            }
    +
    +            gc.add (Calendar.DATE,
    +                    (-1 * days) - 1);
    +
    +            maxDate = gc.getTime ();
    +
    +            days += 7;
    +
    +            gc.add (Calendar.DATE,
    +                    -6);
    +
    +            minDate = gc.getTime ();
    +
    +        }
    +
    +        // This month.
    +        if (this.displayB.getSelectedIndex () == 2)
    +        {
    +
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            days = gc.get (Calendar.DATE);
    +
    +            gc.set (Calendar.DATE,
    +                    1);
    +
    +            minDate = gc.getTime ();
    +
    +        }
    +
    +        // Last month.
    +        if (this.displayB.getSelectedIndex () == 3)
    +        {
    +
    +            GregorianCalendar gc = new GregorianCalendar ();
    +
    +            gc.add (Calendar.MONTH,
    +                    -1);
    +
    +            days = gc.getActualMaximum (Calendar.DATE);
    +
    +            gc.set (Calendar.DATE,
    +                    days);
    +
    +            maxDate = gc.getTime ();
    +
    +            gc.set (Calendar.DATE,
    +                    1);
    +
    +            minDate = gc.getTime ();
    +
    +        }
    +
    +        // All time
    +        if (this.displayB.getSelectedIndex () == 4)
    +        {
    +
    +            days = -1;
    +
    +        }
    +
    +        long sessions = 0;
    +        long totalWords = 0;
    +        long totalTime = 0;
    +        long sessionsAboveTarget = 0;
    +        long longSessions = 0;
    +        long maxTime = 0;
    +        long maxWords = 0;
    +        Session maxWordsSession = null;
    +        Session longestSession = null;
    +        int target = Environment.getUserTargets ().getMySessionWriting ();
    +
    +        final TimePeriodValuesCollection ds = new TimePeriodValuesCollection ();
    +
    +        try
    +        {
    +
    +            TimePeriodValues vals = new TimePeriodValues ("Sessions");
    +
    +            for (Session s : Environment.getSessions (days))
    +            {
    +
    +                int wc = s.getWordCount ();
    +
    +                if (wc == 0)
    +                {
    +
    +                    continue;
    +
    +                }
    +
    +                if (wc > target)
    +                {
    +
    +                    sessionsAboveTarget++;
    +
    +                }
    +
    +                long time = s.getEnd ().getTime () - s.getStart ().getTime ();
    +
    +                totalTime += time;
    +                totalWords += wc;
    +                sessions++;
    +
    +                if (time > 60 * 60 * 1000)
    +                {
    +
    +                    longSessions++;
    +
    +                }
    +
    +                if (time > maxTime)
    +                {
    +
    +                    maxTime = time;
    +
    +                    longestSession = s;
    +
    +                }
    +
    +                if (wc > maxWords)
    +                {
    +
    +                    maxWords = wc;
    +                    maxWordsSession = s;
    +
    +                }
    +
    +                vals.add (new SimpleTimePeriod (s.getStart (),
    +                                                s.getEnd ()),
    +                          wc);
    +
    +            }
    +
    +            ds.addSeries (vals);
    +
    +        } catch (Exception e)
    +        {
    +
    +            Environment.logError ("Unable to get sessions",
    +                                  e);
    +
    +            UIUtils.showErrorMessage (this.parent,
    +                                      "Unable to sessions");
    +
    +            return;
    +
    +        }
    +
    +        this.chart = QuollChartUtils.createTimeSeriesChart ("Date",
    +                                                            "Word Count",
    +                                                            ds);
    +
    +        this.chart.removeLegend ();
    +
    +        XYPlot xyplot = (XYPlot) this.chart.getPlot ();
    +
    +        PeriodAxis axis = (PeriodAxis) xyplot.getDomainAxis ();
    +
    +        if (minDate != null)
    +        {
    +
    +            axis.setLowerBound (minDate.getTime ());
    +
    +            axis.setUpperBound (maxDate.getTime ());
    +
    +        }
    +
    +        QuollChartUtils.customizePlot (xyplot);
    +
    +        if (this.showAvg.isSelected ())
    +        {
    +
    +            long avgWords = totalWords / sessions;
    +
    +            String t = "";
    +
    +            if (target > 0)
    +            {
    +
    +                double diffAvg = avgWords - target;
    +
    +                t = String.format (", %s%s target",
    +                                   (diffAvg < 0 ? "" : "+"),
    +                                   Environment.formatNumber (diffAvg));
    +
    +            }
    +
    +            xyplot.addRangeMarker (QuollChartUtils.createMarker (String.format ("Avg %s%s",
    +                                                                                Environment.formatNumber (avgWords),
    +                                                                                t),
    +                                                                 avgWords,
    +                                                                 0));
    +
    +        }
    +
    +        if (this.showTarget.isSelected ())
    +        {
    +
    +            if (target > maxWords)
    +            {
    +
    +                ((NumberAxis) xyplot.getRangeAxis()).setUpperBound (target + 100);
    +
    +            }
    +            xyplot.addRangeMarker (QuollChartUtils.createMarker (String.format ("Target %s",
    +                                                                                Environment.formatNumber (target)),
    +                                                                 target,
    +                                                                 -1));
    +
    +        }
    +
    +        this.chart.setBackgroundPaint (UIUtils.getComponentColor ());
    +
    +        final SimpleDateFormat dateFormat = new SimpleDateFormat ("hh:mm a, EEE, dd MMM yyyy");
    +
    +        XYToolTipGenerator ttgen = new StandardXYToolTipGenerator ()
    +        {
    +
    +            public String generateToolTip (XYDataset dataset,
    +                                           int       series,
    +                                           int       item)
    +            {
    +
    +                TimePeriodValuesCollection tsc = (TimePeriodValuesCollection) dataset;
    +
    +                TimePeriodValues ts = tsc.getSeries (series);
    +
    +                Number n = ts.getValue (item);
    +
    +                StringBuilder b = new StringBuilder ();
    +
    +                b.append (dateFormat.format (ts.getTimePeriod (item).getStart ()));
    +                b.append (", ");
    +
    +                b.append (Utils.formatAsDuration (n.intValue ()));
    +
    +                return b.toString ();
    +
    +            }
    +
    +        };
    +
    +        ((XYBarRenderer) xyplot.getRenderer ()).setSeriesToolTipGenerator (0,
    +                                                                           ttgen);
    +
    +        Set<JComponent> items = new LinkedHashSet ();
    +
    +        items.add (this.createDetailLabel (String.format ("%s - Session%s",
    +                                                    Environment.formatNumber (sessions),
    +                                                    (sessions > 1 ? "s" : ""))));
    +
    +        if (this.showTarget.isSelected ())
    +        {
    +
    +            items.add (this.createDetailLabel (String.format ("%s - Sessions above word target",
    +                                                        Environment.formatNumber (sessionsAboveTarget))));
    +
    +        }
    +
    +        if (sessions > 0)
    +        {
    +
    +            // Work out number of sessions over target.
    +
    +            items.add (this.createDetailLabel (String.format ("%s - Session%s over 1 hr",
    +                                                        Environment.formatNumber (longSessions),
    +                                                        (longSessions == 1 ? "" : "s"))));
    +
    +            items.add (this.createDetailLabel (String.format ("%s words, %s - Average session",
    +                                                        Environment.formatNumber (totalWords / sessions),
    +                                                        Utils.formatAsDuration (totalTime / sessions))));
    +
    +            items.add (this.createDetailLabel (String.format ("%s words, %s, %s, - Longest session",
    +                                                        Environment.formatNumber (longestSession.getWordCount ()),
    +                                                        Utils.formatAsDuration (longestSession.getSessionDuration ()),
    +                                                        Environment.formatDateTime (longestSession.getStart ()))));
    +
    +            items.add (this.createDetailLabel (String.format ("%s words, %s, %s - Session with most words",
    +                                                        Environment.formatNumber (maxWordsSession.getWordCount ()),
    +                                                        Utils.formatAsDuration (maxWordsSession.getSessionDuration ()),
    +                                                        Environment.formatDateTime (maxWordsSession.getStart ()))));
    +
    +        }
    +
    +        this.detail = QuollChartUtils.createDetailPanel (items);
    +
    +    }
    +
    +    public String getTitle ()
    +    {
    +
    +        return CHART_TITLE;
    +
    +    }
    +
    +    public String getType ()
    +    {
    +
    +        return CHART_TYPE;
    +
    +    }
    +
    +    public JComponent getControls (boolean update)
    +                            throws GeneralException
    +    {
    +
    +        if (update)
    +        {
    +
    +            this.controls = null;
    +
    +        }
    +
    +        if (this.controls == null)
    +        {
    +
    +            this.createControls ();
    +
    +        }
    +
    +        return this.controls;
    +
    +    }
    +
    +    public JFreeChart getChart (boolean update)
    +                         throws GeneralException
    +    {
    +
    +        if (update)
    +        {
    +
    +            this.chart = null;
    +
    +        }
    +
    +        if (this.chart == null)
    +        {
    +
    +            this.createChart ();
    +
    +        }
    +
    +        return this.chart;
    +
    +    }
    +
    +    public JComponent getDetail (boolean update)
    +                          throws GeneralException
    +    {
    +
    +        if (update)
    +        {
    +
    +            this.detail = null;
    +
    +        }
    +
    +        if (this.detail == null)
    +        {
    +
    +            this.createChart ();
    +
    +        }
    +
    +        return this.detail;
    +
    +    }
    +
    +    public String toString ()
    +    {
    +
    +        return Environment.replaceObjectNames (this.getTitle ());
    +
    +    }
    +
    +}
    \ No newline at end of file
    diff --git a/src/com/quollwriter/ui/components/QTextEditor.java b/src/com/quollwriter/ui/components/QTextEditor.java
    index faff935..4764ac1 100644
    --- a/src/com/quollwriter/ui/components/QTextEditor.java
    +++ b/src/com/quollwriter/ui/components/QTextEditor.java
    @@ -1110,7 +1110,19 @@ public class QTextEditor extends JTextPane implements TextStylable
             this.applyStyles ();
    
         }
    -
    +
    +    /**
    +     * Note: is here for compatibility, but will do nothing, parent components need to
    +     * implement TextStyleable.setTextBorder with their own behaviour.
    +     */
    +    @Override
    +    public void setTextBorder (int v)
    +    {
    +
    +        // Do nothing.
    +
    +    }
    +
         public int getFontSize ()
         {
    
    diff --git a/src/com/quollwriter/ui/components/TextProperties.java b/src/com/quollwriter/ui/components/TextProperties.java
    index ac27d1e..7fafd8f 100644
    --- a/src/com/quollwriter/ui/components/TextProperties.java
    +++ b/src/com/quollwriter/ui/components/TextProperties.java
    @@ -15,6 +15,7 @@ public class TextProperties implements TextStylable
         private Color bgColor = null;
         private Color writingLineColor = null;
         private boolean highlightWritingLine = false;
    +    private int textBorder = 0;
    
         protected TextProperties ()
         {
    @@ -40,7 +41,8 @@ public class TextProperties implements TextStylable
                   props.textColor,
                   props.bgColor,
                   props.writingLineColor,
    -              props.highlightWritingLine);
    +              props.highlightWritingLine,
    +              props.textBorder);
    
         }
    
    @@ -51,7 +53,8 @@ public class TextProperties implements TextStylable
                                boolean      firstLineIndent,
                                float        lineSpacing,
                                Color        writingLineColor,
    -                           boolean      highlightWritingLine)
    +                           boolean      highlightWritingLine,
    +                           int          textBorder)
         {
    
             this (setOn,
    @@ -63,7 +66,8 @@ public class TextProperties implements TextStylable
                   null,
                   null,
                   writingLineColor,
    -              highlightWritingLine);
    +              highlightWritingLine,
    +              textBorder);
    
         }
    
    @@ -76,7 +80,8 @@ public class TextProperties implements TextStylable
                                Color        textColor,
                                Color        bgColor,
                                Color        writingLineColor,
    -                           boolean      highlightWritingLine)
    +                           boolean      highlightWritingLine,
    +                           int          textBorder)
         {
    
             this (setOn);
    @@ -89,7 +94,8 @@ public class TextProperties implements TextStylable
                                textColor,
                                bgColor,
                                writingLineColor,
    -                           highlightWritingLine);
    +                           highlightWritingLine,
    +                           textBorder);
    
         }
    
    @@ -106,7 +112,8 @@ public class TextProperties implements TextStylable
                                props.textColor,
                                props.bgColor,
                                props.writingLineColor,
    -                           props.highlightWritingLine);
    +                           props.highlightWritingLine,
    +                           props.textBorder);
    
         }
    
    @@ -118,7 +125,8 @@ public class TextProperties implements TextStylable
                                       Color        textColor,
                                       Color        bgColor,
                                       Color        writingLineColor,
    -                                  boolean      highlightWritingLine)
    +                                  boolean      highlightWritingLine,
    +                                  int          textBorder)
         {
    
             this.fontFamily = fontFamily;
    @@ -130,6 +138,7 @@ public class TextProperties implements TextStylable
             this.bgColor = bgColor;
             this.writingLineColor = writingLineColor;
             this.highlightWritingLine = highlightWritingLine;
    +        this.textBorder = textBorder;
    
         }
    
    @@ -151,6 +160,7 @@ public class TextProperties implements TextStylable
                 this.setBackgroundColor (this.bgColor);
                 this.setWritingLineColor (this.writingLineColor);
                 this.setHighlightWritingLine (this.highlightWritingLine);
    +            this.setTextBorder (this.textBorder);
    
             }
    
    @@ -177,6 +187,27 @@ public class TextProperties implements TextStylable
    
         }
    
    +    public int getTextBorder ()
    +    {
    +
    +        return this.textBorder;
    +
    +    }
    +
    +    public void setTextBorder (int v)
    +    {
    +
    +        this.textBorder = v;
    +
    +        if (this.setOn != null)
    +        {
    +
    +            this.setOn.setTextBorder (v);
    +
    +        }
    +
    +    }
    +
         public void setWritingLineColor (Color c)
         {
    
    diff --git a/src/com/quollwriter/ui/components/TextStylable.java b/src/com/quollwriter/ui/components/TextStylable.java
    index cc4067f..e19b526 100644
    --- a/src/com/quollwriter/ui/components/TextStylable.java
    +++ b/src/com/quollwriter/ui/components/TextStylable.java
    @@ -23,6 +23,8 @@ public interface TextStylable
    
         public void setHighlightWritingLine (boolean v);
    
    +    public void setTextBorder (int v);
    +
         //public void resetToDefaults ();
    
     }
    diff --git a/src/com/quollwriter/ui/panels/AbstractEditorPanel.java b/src/com/quollwriter/ui/panels/AbstractEditorPanel.java
    index 59c9f9f..59370b3 100644
    --- a/src/com/quollwriter/ui/panels/AbstractEditorPanel.java
    +++ b/src/com/quollwriter/ui/panels/AbstractEditorPanel.java
    @@ -47,7 +47,7 @@ import com.quollwriter.ui.components.Runner;
     import com.quollwriter.ui.components.TextStylable;
     import com.quollwriter.ui.components.TextProperties;
    
    -public abstract class AbstractEditorPanel extends QuollPanel implements SpellCheckSupported, TextStylable
    +public abstract class AbstractEditorPanel extends ProjectObjectQuollPanel implements SpellCheckSupported, TextStylable
     {
    
         public static final String TOGGLE_SPELLCHECK_ACTION_NAME = "toggle-spellcheck";
    @@ -55,6 +55,7 @@ public abstract class AbstractEditorPanel extends QuollPanel implements SpellChe
         public static final String EDIT_TEXT_PROPERTIES_ACTION_NAME = "edit-text-properties";
    
         protected QTextEditor    editor = null;
    +    private Border origEditorBorder = null;
         protected ActionMap      actions = null;
         protected Chapter        chapter = null;
         protected Point             lastMousePosition = null;
    @@ -113,7 +114,9 @@ public abstract class AbstractEditorPanel extends QuollPanel implements SpellChe
    
             this.editor = new QTextEditor (dp,
                                            pv.isSpellCheckingEnabled ());
    -
    +
    +        this.origEditorBorder = this.editor.getBorder ();
    +
             this.editor.setSynonymProvider (sp);//Environment.getSynonymProvider ());
    
             this.editor.getDocument ().addDocumentListener (new DocumentListener ()
    @@ -542,7 +545,7 @@ public abstract class AbstractEditorPanel extends QuollPanel implements SpellChe
                 }
    
             });
    -
    +
             JComponent p = this.getEditorWrapper (this.editor);
             p.setAlignmentX (Component.LEFT_ALIGNMENT);
    
    @@ -763,7 +766,7 @@ public abstract class AbstractEditorPanel extends QuollPanel implements SpellChe
             });
             */
         }
    -
    +
         public void setSoftCaret (int c)
         {
    
    @@ -1075,6 +1078,7 @@ public abstract class AbstractEditorPanel extends QuollPanel implements SpellChe
             this.setTextColor (props.getTextColor ());
             this.setWritingLineColor (props.getWritingLineColor ());
             this.setHighlightWritingLine (props.isHighlightWritingLine ());
    +        this.setTextBorder (props.getTextBorder ());
    
             this.ignoreDocumentChange = false;
    
    @@ -1095,6 +1099,7 @@ public abstract class AbstractEditorPanel extends QuollPanel implements SpellChe
             this.setFirstLineIndent (props.getPropertyAsBoolean (Constants.EDITOR_INDENT_FIRST_LINE_PROPERTY_NAME));
             this.setWritingLineColor (UIUtils.getColor (props.getProperty (Constants.EDITOR_WRITING_LINE_COLOR_PROPERTY_NAME)));
             this.setHighlightWritingLine (props.getPropertyAsBoolean (Constants.EDITOR_HIGHLIGHT_WRITING_LINE_PROPERTY_NAME));
    +        this.setTextBorder (props.getPropertyAsInt (Constants.EDITOR_TEXT_BORDER_PROPERTY_NAME));
    
             this.restoreBackgroundColor ();
             this.restoreFontColor ();
    @@ -1303,7 +1308,7 @@ public abstract class AbstractEditorPanel extends QuollPanel implements SpellChe
    
             this.ignoreDocumentChange = false;
    
    -        this.scrollCaretIntoView ();
    +        //this.scrollCaretIntoView ();
    
         }
    
    @@ -1316,7 +1321,7 @@ public abstract class AbstractEditorPanel extends QuollPanel implements SpellChe
    
             this.ignoreDocumentChange = false;
    
    -        this.scrollCaretIntoView ();
    +        //this.scrollCaretIntoView ();
    
         }
    
    @@ -1329,7 +1334,7 @@ public abstract class AbstractEditorPanel extends QuollPanel implements SpellChe
    
             this.ignoreDocumentChange = false;
    
    -        this.scrollCaretIntoView ();
    +        //this.scrollCaretIntoView ();
    
         }
    
    @@ -1342,10 +1347,25 @@ public abstract class AbstractEditorPanel extends QuollPanel implements SpellChe
    
             this.ignoreDocumentChange = false;
    
    -        this.scrollCaretIntoView ();
    +        //this.scrollCaretIntoView ();
    
         }
    
    +    @Override
    +    public void setTextBorder (int v)
    +    {
    +
    +        this.ignoreDocumentChange = true;
    +
    +        this.editor.setBorder (new CompoundBorder (this.origEditorBorder,
    +                                                   UIUtils.createPadding (0, v, 0, v)));
    +
    +        this.ignoreDocumentChange = false;
    +
    +        //this.scrollCaretIntoView ();
    +
    +    }
    +
         public void setLineSpacing (float v)
         {
    
    @@ -1355,7 +1375,7 @@ public abstract class AbstractEditorPanel extends QuollPanel implements SpellChe
    
             this.ignoreDocumentChange = false;
    
    -        this.scrollCaretIntoView ();
    +        //this.scrollCaretIntoView ();
    
         }
    
    diff --git a/src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java b/src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
    index a82fdb5..b0d5380 100644
    --- a/src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
    +++ b/src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
    @@ -46,7 +46,7 @@ import com.quollwriter.ui.components.IconProvider;
     import com.quollwriter.ui.components.FormItem;
     import com.quollwriter.ui.components.Runner;
    
    -public abstract class AbstractObjectViewPanel extends QuollPanel
    +public abstract class AbstractObjectViewPanel extends ProjectObjectQuollPanel
     {
    
         private ActionMap              actions = null;
    diff --git a/src/com/quollwriter/ui/panels/AchievementsPanel.java b/src/com/quollwriter/ui/panels/AchievementsPanel.java
    index 700f43e..e32c95b 100644
    --- a/src/com/quollwriter/ui/panels/AchievementsPanel.java
    +++ b/src/com/quollwriter/ui/panels/AchievementsPanel.java
    @@ -21,264 +21,31 @@ import com.quollwriter.ui.components.Header;
     import com.quollwriter.ui.components.Accordion;
     import com.quollwriter.ui.components.ActionAdapter;
    
    -public class AchievementsPanel extends QuollPanel //implements AchievementReachedListener
    +public class AchievementsPanel extends QuollPanel<AbstractViewer> //implements AchievementReachedListener
     {
    
         public static final String PANEL_ID = "achievements";
         private Achievements achievements = null;
    
    -    public AchievementsPanel (AbstractProjectViewer pv,
    -                              Project               p)
    -                              throws                GeneralException
    +    public AchievementsPanel (AbstractViewer pv)
    +                       throws GeneralException
         {
    
    -        super (pv,
    -               p);
    +        super (pv);
    
             this.achievements = new Achievements (pv);
    
         }
    -/*
    -    public void achievementReached (AchievementReachedEvent ev)
    -    {
    -
    -        AchievementRule ar = ev.getRule ();
    -
    -        String t = ar.getCategory ();
    -
    -        Header h = this.headers.get (t);
    -
    -        if (h == null)
    -        {
    -
    -            return;
    -
    -        }
    -
    -        AchievementsManager man = Environment.getAchievementsManager ();
    -
    -        Map<String, Set<String>> achieved = man.getAchievedAchievementIds (this.projectViewer);
    -
    -        Box b = this.boxes.get (t);
    -
    -        if (t.equals ("user"))
    -        {
    -
    -            Set<AchievementRule> userRules = man.getUserRules ();
    -
    -            h.setTitle ("General - " + achieved.get (t).size () + " / " + userRules.size ());
    -
    -            for (int i = 0; i < b.getComponentCount (); i++)
    -            {
    -
    -                Component c = b.getComponent (i);
    -
    -                if (c instanceof AchievementBox)
    -                {
    -
    -                    AchievementBox ab = (AchievementBox) c;
    -
    -                    if (ab.getRule ().getId ().equals (ar.getId ()))
    -                    {
    -
    -                        ab.setAchieved (true);
    -
    -                        ab.setVisible (true);
    -
    -                        b.remove (ab);
    -
    -                        b.add (ab,
    -                               0);
    -
    -                    }
    -
    -                }
    -
    -            }
    -
    -        }
    -
    -        if (t.equals ("project"))
    -        {
    -
    -            Set<AchievementRule> projRules = man.getPerProjectRules ();
    -
    -            h.setTitle ("Project - " + achieved.get (t).size () + " / " + projRules.size ());
    -
    -            for (int i = 0; i < b.getComponentCount (); i++)
    -            {
    -
    -                Component c = b.getComponent (i);
    -
    -                if (c instanceof AchievementBox)
    -                {
    -
    -                    AchievementBox ab = (AchievementBox) c;
    -
    -                    if (ab.getRule ().getId ().equals (ar.getId ()))
    -                    {
    -
    -                        ab.setAchieved (true);
    -
    -                        ab.setVisible (true);
    
    -                        b.remove (ab);
    -
    -                        b.add (ab,
    -                               0);
    -
    -                    }
    -
    -                }
    -
    -            }
    -
    -        }
    -
    -    }
    -*/
         public void init ()
         {
    
             this.achievements.init ();
    
             this.add (this.achievements);
    -    /*
    -        final AchievementsPanel _this = this;
    -
    -        final AchievementsManager man = Environment.getAchievementsManager ();
    -
    -        man.addAchievementReachedListener (this);
    -
    -        Header header = UIUtils.createHeader ("Achievements",
    -                                       Constants.PANEL_TITLE,
    -                                       "achievement",
    -                                       null);
    -
    -        this.add (header);
    -
    -        JComponent help = UIUtils.createHelpTextPane ("Listed below are all the achievements you have found/reached within Quoll Writer.  Some of the achievements apply to each {project} you create, others are just for general usage of Quoll Writer.  There are also a number of hidden achievements, can you find them?",
    -                                                      this.projectViewer);
    -
    -        help.setMaximumSize (new Dimension (Short.MAX_VALUE,
    -                                            Short.MAX_VALUE));
    -
    -        help.setBorder (new EmptyBorder (0, 10, 0, 0));
    -
    -        this.add (help);
    -
    -        Set<AchievementRule> projRules = man.getPerProjectRules ();
    -
    -        Set<AchievementRule> userRules = man.getUserRules ();
    
    -        Map<String, Set<String>> achieved = man.getAchievedAchievementIds (this.projectViewer);
    -
    -        Box main = new Box (BoxLayout.Y_AXIS);
    -
    -        JScrollPane lscroll = new JScrollPane (main);
    -        lscroll.setBorder (null);
    -        lscroll.setOpaque (false);
    -        lscroll.getViewport ().setBorder (null);
    -        lscroll.getViewport ().setOpaque (false);
    -        lscroll.getVerticalScrollBar ().setUnitIncrement (20);
    -        lscroll.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        lscroll.setMaximumSize (new Dimension (Short.MAX_VALUE,
    -                                               Short.MAX_VALUE));
    -
    -        this.add (lscroll);
    -
    -        AccordionItem gen = new AccordionItem ("General - " + achieved.get ("user").size () + " / " + userRules.size (),
    -                                               null);
    -
    -        gen.setContent (this.getAchievementsBox (userRules,
    -                                                 achieved.get ("user"),
    -                                                 "user"));
    -
    -        this.headers.put ("user",
    -                          gen.getHeader ());
    -
    -        gen.setBorder (new EmptyBorder (0, 10, 0, 0));
    -        AccordionItem proj = new AccordionItem ("Project - " + achieved.get ("project").size () + " / " + projRules.size (),
    -                                                null);
    -
    -        proj.setContent (this.getAchievementsBox (projRules,
    -                                                  achieved.get ("project"),
    -                                                  "project"));
    -
    -        this.headers.put ("project",
    -                          proj.getHeader ());
    -
    -        proj.setBorder (new EmptyBorder (0, 10, 0, 0));
    -
    -        main.add (gen);
    -        main.add (proj);
    -        */
         }
    -/*
    -    private JComponent getAchievementsBox (Set<AchievementRule> rules,
    -                                           Set<String>          achievedIds,
    -                                           String               type)
    -    {
    -
    -        Box b = new Box (BoxLayout.Y_AXIS);
    
    -        b.setOpaque (true);
    -        b.setBackground (UIUtils.getComponentColor ());
    -        b.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        b.setBorder (new EmptyBorder (0, 5, 0, 0));
    -
    -        int c = 0;
    -
    -        for (AchievementRule ar : rules)
    -        {
    -
    -            AchievementBox ab = new AchievementBox (ar,
    -                                                    achievedIds.contains (ar.getId ()),
    -                                                    false);
    -
    -            if (ar.isHidden ())
    -            {
    -
    -                ab.setVisible (false);
    -
    -            }
    -
    -            if (achievedIds.contains (ar.getId ()))
    -            {
    -
    -                b.add (ab,
    -                       0);
    -
    -                ab.setVisible (true);
    -
    -                ab.setBorder (new CompoundBorder (new MatteBorder (0, 0, 1, 0, Environment.getInnerBorderColor ()),
    -                                                  ab.getBorder ()));
    -
    -            } else {
    -
    -                b.add (ab);
    -
    -                if (c < (rules.size () - 1))
    -                {
    -
    -                    ab.setBorder (new CompoundBorder (new MatteBorder (0, 0, 1, 0, Environment.getInnerBorderColor ()),
    -                                                      ab.getBorder ()));
    -
    -                }
    -
    -            }
    -
    -            c++;
    -
    -        }
    -
    -        this.boxes.put (type,
    -                        b);
    -
    -        return b;
    -
    -    }
    -*/
         public void fillPopupMenu (MouseEvent ev,
                                    JPopupMenu popup)
         {
    @@ -292,26 +59,12 @@ public class AchievementsPanel extends QuollPanel //implements AchievementReache
    
         }
    
    -    public <T extends NamedObject> void refresh (T n)
    -    {
    -
    -
    -    }
    -
         public void fillToolBar (JToolBar toolBar,
                                  boolean  fullScreen)
         {
    
         }
    
    -    public boolean saveUnsavedChanges ()
    -                                throws Exception
    -    {
    -
    -        return true;
    -
    -    }
    -
         public String getPanelId ()
         {
    
    diff --git a/src/com/quollwriter/ui/panels/BasicQuollPanel.java b/src/com/quollwriter/ui/panels/BasicQuollPanel.java
    new file mode 100644
    index 0000000..9ead798
    --- /dev/null
    +++ b/src/com/quollwriter/ui/panels/BasicQuollPanel.java
    @@ -0,0 +1,279 @@
    +package com.quollwriter.ui.panels;
    +
    +import java.awt.Dimension;
    +import java.awt.Component;
    +import java.awt.event.*;
    +import java.util.*;
    +
    +import javax.swing.*;
    +import javax.swing.border.*;
    +
    +import com.quollwriter.*;
    +import com.quollwriter.ui.*;
    +import com.quollwriter.data.*;
    +
    +import com.quollwriter.ui.components.ScrollableBox;
    +import com.quollwriter.ui.components.Header;
    +
    +/**
    + * A basic panel that provides a header across the top with optional buttons and a scrollable
    + * content pane and is added to a background image panel.
    + */
    +public abstract class BasicQuollPanel<E extends AbstractViewer> extends QuollPanel<E>
    +{
    +
    +    private Header header = null;
    +    private BackgroundImagePanel bg = null;
    +    private JScrollPane scroll = null;
    +    private List<? extends JComponent> headerButtons = null;
    +
    +    private String iconType = null;
    +    private String title = null;
    +
    +    public BasicQuollPanel (E                          pv,
    +                            String                     title,
    +                            String                     iconType,
    +                            List<? extends JComponent> buttons)
    +    {
    +
    +        super (pv);
    +
    +        this.title = title;
    +        this.iconType = iconType;
    +        this.headerButtons = buttons;
    +
    +    }
    +
    +    public BasicQuollPanel (E      pv,
    +                            String title,
    +                            String iconType)
    +    {
    +
    +        super (pv);
    +
    +        this.title = title;
    +        this.iconType = iconType;
    +
    +    }
    +
    +    public abstract boolean isWrapContentInScrollPane ();
    +
    +    public List<? extends JComponent> getHeaderButtons ()
    +    {
    +
    +        return this.headerButtons;
    +
    +    }
    +
    +    public void setHeaderButtons (List<? extends JComponent> buttons)
    +    {
    +
    +        if (this.header != null)
    +        {
    +
    +            if (buttons != null)
    +            {
    +
    +                this.header.setControls (UIUtils.createButtonBar (buttons));
    +
    +            } else {
    +
    +                this.header.setControls (null);
    +
    +            }
    +
    +        }
    +
    +        this.headerButtons = buttons;
    +
    +    }
    +
    +    public Header getHeader ()
    +    {
    +
    +        return this.header;
    +
    +    }
    +
    +    public BackgroundImagePanel getBackgroundPanel ()
    +    {
    +
    +        return this.bg;
    +
    +    }
    +
    +    public JScrollPane getScrollPane ()
    +    {
    +
    +        return this.scroll;
    +
    +    }
    +
    +    @Override
    +    public void close ()
    +    {
    +
    +    }
    +
    +    public void setTitle (String t)
    +    {
    +
    +        if (this.header != null)
    +        {
    +
    +            this.header.setTitle (t);
    +
    +        }
    +
    +        this.title = t;
    +
    +    }
    +
    +    /**
    +     * Called by the init to get the content of the panel.
    +     */
    +    public abstract JComponent getContent ()
    +                                    throws GeneralException;
    +
    +    @Override
    +    public void init ()
    +               throws GeneralException
    +    {
    +
    +        this.header = UIUtils.createHeader (this.title,
    +                                            Constants.PANEL_TITLE,
    +                                            this.iconType,
    +                                            (this.headerButtons != null ? UIUtils.createButtonBar (this.headerButtons) : null));
    +
    +        this.bg = new BackgroundImagePanel ();
    +
    +        this.bg.setMaximumSize (new Dimension (Short.MAX_VALUE,
    +                                         Short.MAX_VALUE));
    +        this.bg.setMinimumSize (new Dimension (300,
    +                                         200));
    +
    +        this.add (this.header);
    +
    +        JComponent c = this.getContent ();
    +        c.setMaximumSize (new Dimension (Short.MAX_VALUE,
    +                                         Short.MAX_VALUE));
    +        c.setMinimumSize (new Dimension (300,
    +                                         200));
    +
    +        c.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        c.setAlignmentY (Component.TOP_ALIGNMENT);
    +
    +        this.bg.add (c);
    +
    +        if (this.isWrapContentInScrollPane ())
    +        {
    +
    +            final JScrollPane cscroll = new JScrollPane (c);//this.bg);
    +
    +            this.scroll = cscroll;
    +
    +            cscroll.setBorder (UIUtils.createPadding (1, 0, 0, 0));
    +
    +            cscroll.getVerticalScrollBar ().addAdjustmentListener (new AdjustmentListener ()
    +            {
    +
    +                public void adjustmentValueChanged (AdjustmentEvent ev)
    +                {
    +
    +                    if (cscroll.getVerticalScrollBar ().getValue () > 0)
    +                    {
    +
    +                        cscroll.setBorder (new MatteBorder (1, 0, 0, 0,
    +                                                            UIUtils.getInnerBorderColor ()));
    +
    +                    } else {
    +
    +                        cscroll.setBorder (UIUtils.createPadding (1, 0, 0, 0));
    +
    +                    }
    +
    +                }
    +
    +            });
    +
    +            cscroll.setHorizontalScrollBarPolicy (ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    +            cscroll.getVerticalScrollBar ().setUnitIncrement (20);
    +            cscroll.setOpaque (false);
    +            cscroll.setBackground (null);
    +            cscroll.getViewport ().setBorder (null);
    +            cscroll.getViewport ().setOpaque (false);
    +
    +            this.add (cscroll);
    +
    +            UIUtils.doLater (new ActionListener ()
    +            {
    +
    +                public void actionPerformed (ActionEvent ev)
    +                {
    +
    +                    cscroll.getVerticalScrollBar ().setValue (0);
    +
    +                }
    +
    +            });
    +
    +        } else {
    +
    +            this.add (c);
    +
    +        }
    +
    +    }
    +
    +    @Override
    +    public void getState (Map<String, Object> s)
    +    {
    +
    +    }
    +
    +    @Override
    +    public void setState (Map<String, String> s,
    +                          boolean             hasFocus)
    +    {
    +
    +    }
    +
    +    @Override
    +    public String getIconType ()
    +    {
    +
    +        return this.iconType;
    +
    +    }
    +
    +    @Override
    +    public String getTitle ()
    +    {
    +
    +        return this.title;
    +
    +    }
    +
    +    @Override
    +    public void fillToolBar (JToolBar toolBar,
    +                             boolean  fullScreen)
    +    {
    +
    +    }
    +
    +    @Override
    +    public void fillPopupMenu (MouseEvent ev,
    +                               JPopupMenu popup)
    +    {
    +
    +    }
    +
    +    @Override
    +    public List<Component> getTopLevelComponents ()
    +    {
    +
    +        return new ArrayList ();
    +
    +    }
    +
    +}
    \ No newline at end of file
    diff --git a/src/com/quollwriter/ui/panels/BlankQuollPanel.java b/src/com/quollwriter/ui/panels/BlankQuollPanel.java
    index 1cafbd6..be11f40 100644
    --- a/src/com/quollwriter/ui/panels/BlankQuollPanel.java
    +++ b/src/com/quollwriter/ui/panels/BlankQuollPanel.java
    @@ -14,23 +14,25 @@ import com.quollwriter.data.*;
    
     import com.quollwriter.ui.components.Header;
    
    -public class BlankQuollPanel extends QuollPanel
    +public class BlankQuollPanel extends QuollPanel<AbstractViewer>
     {
    +
    +    private String panelId = null;
    
    -    public static final String PANEL_ID = "blank";
    -
    -    public BlankQuollPanel (AbstractProjectViewer pv)
    +    public BlankQuollPanel (AbstractViewer pv,
    +                            String         panelId)
         {
    
    -        super (pv,
    -               null);
    +        super (pv);
    +
    +        this.panelId = panelId;
    
         }
    
         public String getPanelId ()
         {
    
    -        return PANEL_ID;
    +        return this.panelId;
    
         }
    
    @@ -56,7 +58,7 @@ public class BlankQuollPanel extends QuollPanel
             this.add (header);
    
             JComponent help = UIUtils.createHelpTextPane ("<p>You are seeing this because no {chapter}/{asset}/panel has been selected.</p><p>This usually happens when you have just deleted the item you were viewing.</p><p>To continue, just <a href='action:projectsidebar'>select an item from the sidebar</a>.</p>",
    -                                                      this.projectViewer);
    +                                                      this.viewer);
    
             help.setMaximumSize (new Dimension (Short.MAX_VALUE,
                                                 Short.MAX_VALUE));
    @@ -78,14 +80,6 @@ public class BlankQuollPanel extends QuollPanel
    
         }
    
    -    public boolean saveUnsavedChanges ()
    -                                       throws Exception
    -    {
    -
    -        return false;
    -
    -    }
    -
         public String getIconType ()
         {
    
    @@ -118,10 +112,5 @@ public class BlankQuollPanel extends QuollPanel
             return new ArrayList ();
    
         }
    -
    -    public <T extends NamedObject> void refresh (T n)
    -    {
    -
    -    }
    
     }
    \ No newline at end of file
    diff --git a/src/com/quollwriter/ui/panels/FullScreenQuollPanel.java b/src/com/quollwriter/ui/panels/FullScreenQuollPanel.java
    index f8a10b2..88f38b8 100644
    --- a/src/com/quollwriter/ui/panels/FullScreenQuollPanel.java
    +++ b/src/com/quollwriter/ui/panels/FullScreenQuollPanel.java
    @@ -10,20 +10,19 @@ import javax.swing.border.*;
    
     import com.quollwriter.*;
     import com.quollwriter.ui.*;
    +import com.quollwriter.ui.panels.*;
     import com.quollwriter.data.*;
    
    -
    -public class FullScreenQuollPanel extends QuollPanel
    +public class FullScreenQuollPanel extends QuollPanel<AbstractViewer>
     {
    
         private QuollPanel child = null;
         private Border     childBorder = null;
    
    -    public FullScreenQuollPanel(QuollPanel child)
    +    public FullScreenQuollPanel (QuollPanel child)
         {
    
    -        super (child.getProjectViewer (),
    -               child.getForObject ());
    +        super (child.getViewer ());
    
             this.child = child;
    
    @@ -59,6 +58,14 @@ public class FullScreenQuollPanel extends QuollPanel
    
         }
    
    +    @Override
    +    public String getPanelId ()
    +    {
    +
    +        return this.child.getPanelId ();
    +
    +    }
    +
         public QuollPanel getChild ()
         {
    
    @@ -95,7 +102,16 @@ public class FullScreenQuollPanel extends QuollPanel
                                     throws Exception
         {
    
    -        return this.child.saveUnsavedChanges ();
    +        if (this.child instanceof ProjectObjectQuollPanel)
    +        {
    +
    +            ProjectObjectQuollPanel pc = (ProjectObjectQuollPanel) this.child;
    +
    +            return pc.saveUnsavedChanges ();
    +
    +        }
    +
    +        return false;
    
         }
    
    @@ -127,8 +143,15 @@ public class FullScreenQuollPanel extends QuollPanel
         public void refresh (NamedObject n)
         {
    
    -        this.child.refresh (n);
    +        if (this.child instanceof ProjectObjectQuollPanel)
    +        {
    +
    +            ProjectObjectQuollPanel pc = (ProjectObjectQuollPanel) this.child;
    +
    +            pc.refresh (n);
    
    +        }
    +
         }
    
     }
    diff --git a/src/com/quollwriter/ui/panels/HelpTextPanel.java b/src/com/quollwriter/ui/panels/HelpTextPanel.java
    index 9cd2115..03494b0 100644
    --- a/src/com/quollwriter/ui/panels/HelpTextPanel.java
    +++ b/src/com/quollwriter/ui/panels/HelpTextPanel.java
    @@ -15,7 +15,7 @@ import com.quollwriter.data.*;
     import com.quollwriter.ui.components.ScrollableBox;
     import com.quollwriter.ui.components.Header;
    
    -public class HelpTextPanel extends QuollPanel
    +public class HelpTextPanel extends QuollPanel<AbstractViewer>
     {
    
         private String panelId = null;
    @@ -23,15 +23,14 @@ public class HelpTextPanel extends QuollPanel
         private String iconType = null;
         private String title = null;
    
    -    public HelpTextPanel (AbstractProjectViewer pv,
    -                          String                title,
    -                          String                text,
    -                          String                iconType,
    -                          String                panelId)
    +    public HelpTextPanel (AbstractViewer pv,
    +                          String         title,
    +                          String         text,
    +                          String         iconType,
    +                          String         panelId)
         {
    
    -        super (pv,
    -               null);
    +        super (pv);
    
             this.title = title;
             this.panelId = panelId;
    @@ -73,7 +72,7 @@ public class HelpTextPanel extends QuollPanel
             edBox.setBorder (UIUtils.createPadding (0, 10, 5, 5));
    
             JTextPane help = UIUtils.createHelpTextPane (this.text,
    -                                                     this.projectViewer);
    +                                                     this.viewer);
    
             help.setBorder (null);
    
    @@ -109,14 +108,6 @@ public class HelpTextPanel extends QuollPanel
    
         }
    
    -    public boolean saveUnsavedChanges ()
    -                                       throws Exception
    -    {
    -
    -        return false;
    -
    -    }
    -
         public String getIconType ()
         {
    
    @@ -149,10 +140,5 @@ public class HelpTextPanel extends QuollPanel
             return new ArrayList ();
    
         }
    -
    -    public <T extends NamedObject> void refresh (T n)
    -    {
    -
    -    }
    
     }
    \ No newline at end of file
    diff --git a/src/com/quollwriter/ui/panels/IdeaBoard.java b/src/com/quollwriter/ui/panels/IdeaBoard.java
    index 6988206..b9430f5 100644
    --- a/src/com/quollwriter/ui/panels/IdeaBoard.java
    +++ b/src/com/quollwriter/ui/panels/IdeaBoard.java
    @@ -49,7 +49,7 @@ import com.quollwriter.ui.components.QPopup;
     import com.quollwriter.ui.components.VerticalLayout;
    
    -public class IdeaBoard extends QuollPanel
    +public class IdeaBoard extends ProjectObjectQuollPanel
     {
    
         public static final String PANEL_ID = "ideaboard";
    @@ -117,19 +117,27 @@ public class IdeaBoard extends QuollPanel
                 this.add (this.viewBox);
                 this.viewBox.setAlignmentX (Component.LEFT_ALIGNMENT);
    
    +            this.shortDesc = UIUtils.createHelpTextPane ((String) null,
    +                                                         this.typeBox.ideaBoard.getProjectViewer ());
    +            /*
                 this.shortDesc = UIUtils.createObjectDescriptionViewPane ((String) null,
                                                                           this.typeBox.ideaBoard.getProjectViewer ().getProject (),
                                                                           this.typeBox.ideaBoard.getProjectViewer (),
                                                                           this.typeBox.ideaBoard);
    -            this.shortDesc.setBorder (new EmptyBorder (3, 5, 0, 5));
    +                                                                      */
    +            this.shortDesc.setBorder (UIUtils.createPadding (3, 5, 0, 5));
                 this.viewBox.add (this.shortDesc);
                 this.shortDesc.setAlignmentX (Component.LEFT_ALIGNMENT);
    
    +            this.fullDesc = UIUtils.createHelpTextPane ((String) null,
    +                                                        this.typeBox.ideaBoard.getProjectViewer ());
    +/*
                 this.fullDesc = UIUtils.createObjectDescriptionViewPane ((String) null,
                                                                          this.typeBox.ideaBoard.getProjectViewer ().getProject (),
                                                                          this.typeBox.ideaBoard.getProjectViewer (),
                                                                          this.typeBox.ideaBoard);
    -            this.fullDesc.setBorder (new EmptyBorder (3, 5, 0, 5));
    +                                                                     */
    +            this.fullDesc.setBorder (UIUtils.createPadding (3, 5, 0, 5));
                 this.updateViewText ();
    
                 this.viewBox.add (this.fullDesc);
    @@ -452,18 +460,16 @@ public class IdeaBoard extends QuollPanel
                     }
    
                 }
    -
    -            this.shortDesc.setText (UIUtils.getWithHTMLStyleSheet (this.shortDesc,
    -                                                                   UIUtils.markupStringForAssets (firstSent,
    -                                                                                                  this.typeBox.ideaBoard.getProjectViewer ().getProject (),
    -                                                                                                  null)));
    +
    +            this.shortDesc.setText (UIUtils.markupStringForAssets (firstSent,
    +                                                                   this.typeBox.ideaBoard.getProjectViewer ().getProject (),
    +                                                                   null));
    
                 this.shortDesc.setToolTipText ("Click to show the full text");
    -
    -            this.fullDesc.setText (UIUtils.getWithHTMLStyleSheet (this.fullDesc,
    -                                                                  UIUtils.markupStringForAssets (this.idea.getDescription ().getMarkedUpText (),
    -                                                                                                 this.typeBox.ideaBoard.getProjectViewer ().getProject (),
    -                                                                                                 null)));
    +
    +            this.fullDesc.setText (UIUtils.markupStringForAssets (this.idea.getDescription ().getMarkedUpText (),
    +                                                                  this.typeBox.ideaBoard.getProjectViewer ().getProject (),
    +                                                                  null));
    
             }
    
    @@ -943,7 +949,7 @@ public class IdeaBoard extends QuollPanel
                 this.ideaBox.setOpaque (false);//true);
                 this.setContent (content);//this.ideaBox);
    
    -            this.helpText = UIUtils.createHelpTextPane ("You currently have no <b>" + this.getIdeaTypeName () + "</b> ideas recorded.  To add a new Idea perform one of the actions below:<ul><li>Use the green plus button on the header.</li><li>Click anywhere in this box.</li><li>Right click on the header and select <b>Add new Idea</b>.</li></ul>",
    +            this.helpText = UIUtils.createHelpTextPane ("You currently have no <b>" + this.getIdeaTypeName () + "</b> ideas recorded.  To add a new Idea perform one of the actions below:<ul><li>Use the plus button on the header.</li><li>Click anywhere in this box.</li><li>Right click on the header and select <b>Add new Idea</b>.</li></ul>",
                                                             IdeaBoard.this.projectViewer);
    
                 this.helpText.addMouseListener (new MouseAdapter ()
    diff --git a/src/com/quollwriter/ui/panels/OptionsPanel.java b/src/com/quollwriter/ui/panels/OptionsPanel.java
    index a6b3b4d..a61d0ee 100644
    --- a/src/com/quollwriter/ui/panels/OptionsPanel.java
    +++ b/src/com/quollwriter/ui/panels/OptionsPanel.java
    @@ -54,7 +54,7 @@ import com.quollwriter.editors.messages.*;
     import java.util.Date;
     import com.quollwriter.editors.ui.*;
    
    -public class OptionsPanel extends QuollPanel
    +public class OptionsPanel extends QuollPanel<AbstractViewer>
     {
    
         public static final String PANEL_ID = "options";
    @@ -69,13 +69,12 @@ public class OptionsPanel extends QuollPanel
    
         private Options options = null;
    
    -    public OptionsPanel (AbstractProjectViewer viewer,
    -                         Options.Section...    sectIds)
    +    public OptionsPanel (AbstractViewer     viewer,
    +                         Options.Section... sectIds)
                       throws GeneralException
         {
    
    -        super (viewer,
    -               null);
    +        super (viewer);
    
             this.options = new Options (viewer,
                                         sectIds);
    @@ -167,3162 +166,15 @@ public class OptionsPanel extends QuollPanel
    
             this.add (this.options);
    
    -        /*
    -        Header h = UIUtils.createHeader ("Options",
    -                                         Constants.PANEL_TITLE,
    -                                         "options",
    -                                         null);
    -
    -        this.add (h);
    -
    -        Box b = new Box (BoxLayout.Y_AXIS);
    -
    -        final OptionsPanel _this = this;
    -
    -        this.accordion = new Accordion (BoxLayout.Y_AXIS);
    -
    -        this.accordion.setBorder (new EmptyBorder (0,
    -                                                   10,
    -                                                   10,
    -                                                   10));
    -
    -        this.scrollPane = new JScrollPane (this.accordion);
    -        this.scrollPane.setBorder (new EmptyBorder (1, 0, 0, 0));
    -        this.scrollPane.setOpaque (false);
    -        this.scrollPane.getViewport ().setBorder (null);
    -        this.scrollPane.getViewport ().setOpaque (false);
    -        this.scrollPane.getVerticalScrollBar ().setUnitIncrement (50);
    -        this.scrollPane.setAlignmentX (Component.LEFT_ALIGNMENT);
    -
    -        this.scrollPane.getVerticalScrollBar ().addAdjustmentListener (new AdjustmentListener ()
    -        {
    -
    -            public void adjustmentValueChanged (AdjustmentEvent ev)
    -            {
    -
    -                if (_this.scrollPane.getVerticalScrollBar ().getValue () > 0)
    -                {
    -
    -                    _this.scrollPane.setBorder (new MatteBorder (1, 0, 0, 0,
    -                                                                 UIUtils.getInnerBorderColor ()));
    -
    -                } else {
    -
    -                    _this.scrollPane.setBorder (new EmptyBorder (1, 0, 0, 0));
    -
    -                }
    -
    -            }
    -
    -        });
    -
    -        this.add (this.scrollPane);
    -
    -        this.accordion.setOpaque (false);
    -
    -        this.addProjectAndSnapshotsSection ();
    -
    -        this.addHowThingsLookSection ();
    -
    -        this.addWhatThingsAreCalledSection ();
    -
    -        this.addEditingChaptersSection ();
    -
    -        this.addEditorsSection ();
    -
    -        this.addItemsAndRulesSection ();
    -
    -        this.addWarmupsSection ();
    -
    -        this.addAchievementsSection ();
    -
    -        this.addProblemsSection ();
    -
    -        this.addBetasSection ();
    -
    -        this.accordion.add (Box.createVerticalGlue ());
    -
    -        this.accordion.setAllSectionsOpen (false);
    -
    -        SwingUtilities.invokeLater (new Runnable ()
    -        {
    -
    -            public void run ()
    -            {
    -
    -                _this.scrollPane.getVerticalScrollBar ().setValue (0);
    -
    -            }
    -
    -        });
    -        */
    -    }
    -
    -    private void addWarmupsSection ()
    -    {
    -
    -        final OptionsPanel _this = this;
    -
    -        //box.add (this.createHeader (UIUtils.formatForUser ("{Warmups}")));
    -        //box.add (Box.createVerticalStrut (5));
    -
    -        Box box = new Box (BoxLayout.Y_AXIS);
    -
    -        JComponent c = this.createWrapper (WarmupPromptSelect.getDoWarmupOnStartupCheckbox ());
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        c = this.createHelpText ("And do the {warmup} for");
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        FormLayout fl = new FormLayout ("p, 6px, p, 6px, p, 6px, p",
    -                                        "p");
    -
    -        PanelBuilder builder = new PanelBuilder (fl);
    -
    -        CellConstraints cc = new CellConstraints ();
    -
    -        final JComboBox words = WarmupPromptSelect.getWordsOptions ();
    -
    -        builder.add (words,
    -                     cc.xy (1,
    -                            1));
    -
    -        builder.addLabel ("and/or",
    -                          cc.xy (3,
    -                                 1));
    -
    -        final JComboBox mins = WarmupPromptSelect.getTimeOptions ();
    -
    -        builder.add (mins,
    -                     cc.xy (5,
    -                            1));
    -
    -        builder.addLabel ("(whichever is reached first)",
    -                          cc.xy (7,
    -                                 1));
    -
    -        JPanel p = builder.getPanel ();
    -        p.setOpaque (false);
    -        p.setAlignmentX (Component.LEFT_ALIGNMENT);
    -
    -        c = this.createWrapper (p);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        this.setContentBorder (box);
    -
    -        this.accordion.add (this.createHeader (UIUtils.formatForUser ("{Warmups}"),
    -                                               Warmup.OBJECT_TYPE),
    -                            null,
    -                            box,
    -                            UIUtils.createHelpTextPane ("Want to flex your writing muscles everytime Quoll Writer starts?  You'd better click the title above and get things set up while you still have time.",
    -                                                        this.projectViewer));
    -
         }
    -
    +
         private void setContentBorder (JComponent box)
         {
    
             box.setBorder (UIUtils.createPadding (7, 0, 10, 0));
    
         }
    -
    -    private void addAchievementsSection ()
    -    {
    -
    -        Box box = new Box (BoxLayout.Y_AXIS);
    -
    -        final AchievementsManager man = Environment.getAchievementsManager ();
    -
    -        final JCheckBox achievementsOn = UIUtils.createCheckBox ("Enable achievements");
    -        achievementsOn.setSelected (man.isAchievementsEnabled ());
    -
    -        achievementsOn.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                man.setAchievementsEnabled (achievementsOn.isSelected ());
    -
    -            }
    -
    -        });
    -
    -        JComponent c = this.createWrapper (achievementsOn);
    -
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        final JCheckBox achievementSounds = UIUtils.createCheckBox ("Play a sound when an achievement is reached");
    -        achievementSounds.setSelected (man.isSoundEnabled ());
    -
    -        final JCheckBox fullScreenSoundsOn = UIUtils.createCheckBox ("Play the sound in full screen mode");
    -
    -        achievementSounds.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                man.setSoundEnabled (achievementSounds.isSelected ());
    -
    -                fullScreenSoundsOn.setEnabled (achievementSounds.isSelected ());
    -
    -            }
    -
    -        });
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        c = this.createWrapper (achievementSounds);
    -
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        fullScreenSoundsOn.setSelected (man.isSoundsInFullScreenEnabled ());
    -
    -        fullScreenSoundsOn.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                man.setSoundsInFullScreenEnabled (fullScreenSoundsOn.isSelected ());
    -
    -            }
    -
    -        });
    -
    -        //box.add (Box.createVerticalStrut (5));
    -
    -        c = this.createWrapper (fullScreenSoundsOn);
    -
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        this.setContentBorder (box);
    -
    -        this.accordion.add (this.createHeader (UIUtils.formatForUser ("Achievements"),
    -                                               Constants.ACHIEVEMENT_ICON_NAME),
    -                            null,
    -                            box,
    -                            UIUtils.createHelpTextPane ("Are the achievements annoying you?  Use this section to switch them off and they will bug you no more you underachiever.",
    -                                                        this.projectViewer));
    -
    -    }
    -
    -    private void addProblemsSection ()
    -    {
    -
    -        final OptionsPanel _this = this;
    -
    -        //box.add (this.createHeader (UIUtils.formatForUser ("When something goes wrong")));
    -        //box.add (Box.createVerticalStrut (5));
    -
    -        Box box = new Box (BoxLayout.Y_AXIS);
    -
    -        this.sendErrorsToSupport = UIUtils.createCheckBox ("Send errors to Quoll Writer support");
    -        this.sendErrorsToSupport.setSelected (Environment.getUserProperties ().getPropertyAsBoolean (Constants.AUTO_SEND_ERRORS_TO_SUPPORT_PROPERTY_NAME));
    -
    -        this.sendErrorsToSupport.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                _this.updateUserProperty (Constants.AUTO_SEND_ERRORS_TO_SUPPORT_PROPERTY_NAME,
    -                                          sendErrorsToSupport.isSelected ());
    -
    -            }
    -
    -        });
    -
    -        JComponent c = this.createWrapper (this.sendErrorsToSupport);
    -
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        this.setContentBorder (box);
    -
    -        this.accordion.add (this.createHeader (UIUtils.formatForUser ("When something goes wrong"),
    -                                               Constants.BUG_ICON_NAME),
    -                            null,
    -                            box,
    -                            UIUtils.createHelpTextPane ("Quoll Writer isn't perfect and it would be good to know when things cluck up.  If you open this section you'll find a single setting that will let you send errors back to the magical worker elfs at Quoll Writer Headquarters located in deepest, darkest suburban Australia.  Did you know that every error sent will prevent a Drop Bear attack.  It's a serious and very real threat to our native elves.",
    -                                                        this.projectViewer));
    -
    -    }
    -
    -    private void addBetasSection ()
    -    {
    -
    -        final OptionsPanel _this = this;
    -
    -        //box.add (this.createHeader (UIUtils.formatForUser ("When something goes wrong")));
    -        //box.add (Box.createVerticalStrut (5));
    -
    -        Box box = new Box (BoxLayout.Y_AXIS);
    -
    -        final JCheckBox optinToBetas = UIUtils.createCheckBox ("Opt-in to beta versions (enables auto-send of errors to Quoll Writer support)");
    -        optinToBetas.setSelected (Environment.getUserProperties ().getPropertyAsBoolean (Constants.OPTIN_TO_BETA_VERSIONS_PROPERTY_NAME));
    -
    -        optinToBetas.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                if (optinToBetas.isSelected ())
    -                {
    -
    -                    UIUtils.showMessage ((PopupsSupported) _this.projectViewer,
    -                                         "About Betas",
    -                                         "Quoll Writer betas are opt-in and are designed to elicit feedback from users.  They will be functionally complete and as bug free as possible.  However they won't be without issues, so please beware and report any problems you find.<br /><br />You can opt out at any time although this will not revert back to a previous version (that is potentially dangerous).<br /><br />Note: opting into betas will enable the <b>Send errors to Quoll Writer support</b> option, you can switch this off if you like to prevent errors being sent.");
    -
    -                    _this.sendErrorsToSupport.setSelected (true);
    -                    _this.updateUserProperty (Constants.AUTO_SEND_ERRORS_TO_SUPPORT_PROPERTY_NAME,
    -                                              true);
    -
    -
    -                }
    
    -                _this.updateUserProperty (Constants.OPTIN_TO_BETA_VERSIONS_PROPERTY_NAME,
    -                                          optinToBetas.isSelected ());
    -
    -            }
    -
    -        });
    -
    -        JComponent c = this.createWrapper (optinToBetas);
    -
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        this.setContentBorder (box);
    -
    -        this.accordion.add (this.createHeader (UIUtils.formatForUser ("Beta versions"),
    -                                               Constants.ABOUT_ICON_NAME),
    -                            null,
    -                            box,
    -                            UIUtils.createHelpTextPane ("Want to get ahead of the crowd?  Or maybe help improve Quoll Writer?  This section lets you opt-in to beta versions.  But be warned, betas aren't perfect.",
    -                                                        this.projectViewer));
    -
    -    }
    -/*
    -    private void addEditorsSection ()
    -    {
    -
    -        if (EditorsEnvironment.getUserAccount () == null)
    -        {
    -
    -            return;
    -
    -        }
    -
    -        final OptionsPanel _this = this;
    -
    -        Box box = new Box (BoxLayout.Y_AXIS);
    -
    -        final JCheckBox autoLogin = UIUtils.createCheckBox ("Automatically login/go online whenever Quoll Writer starts");
    -
    -        autoLogin.setSelected (EditorsEnvironment.getEditorsPropertyAsBoolean (Constants.QW_EDITORS_SERVICE_LOGIN_AT_QW_START_PROPERTY_NAME));
    -
    -        autoLogin.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                try
    -                {
    -
    -                    EditorsEnvironment.setEditorsProperty (Constants.QW_EDITORS_SERVICE_LOGIN_AT_QW_START_PROPERTY_NAME,
    -                                                           autoLogin.isSelected ());
    -
    -                } catch (Exception e) {
    -
    -                    Environment.logError ("Unable to set to login at start",
    -                                          e);
    -
    -                }
    -
    -            }
    -
    -        });
    -
    -        JComponent c = this.createWrapper (autoLogin);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        c = this.createHelpText ("My default status when I go online is");
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        Vector statuses = new Vector ();
    -
    -        statuses.add (EditorEditor.OnlineStatus.online);
    -        statuses.add (EditorEditor.OnlineStatus.busy);
    -        statuses.add (EditorEditor.OnlineStatus.away);
    -        statuses.add (EditorEditor.OnlineStatus.snooze);
    -
    -        final JComboBox defStatus = new JComboBox (statuses);
    -
    -        String defOnlineStatus = EditorsEnvironment.getEditorsProperty (Constants.QW_EDITORS_SERVICE_DEFAULT_ONLINE_STATUS_PROPERTY_NAME);
    -
    -        if (defOnlineStatus != null)
    -        {
    -
    -            defStatus.setSelectedItem (EditorEditor.OnlineStatus.valueOf (defOnlineStatus));
    -
    -        }
    -
    -        defStatus.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                if (ev.getStateChange () != ItemEvent.SELECTED)
    -                {
    -
    -                    return;
    -
    -                }
    -
    -                try
    -                {
    -
    -                    EditorsEnvironment.setEditorsProperty (Constants.QW_EDITORS_SERVICE_DEFAULT_ONLINE_STATUS_PROPERTY_NAME,
    -                                                           ((EditorEditor.OnlineStatus) defStatus.getSelectedItem ()).getType ());
    -
    -                } catch (Exception e) {
    -
    -                    Environment.logError ("Unable to set default online status",
    -                                          e);
    -
    -                }
    -
    -            }
    -
    -        });
    -
    -        defStatus.setRenderer (new DefaultListCellRenderer ()
    -        {
    -
    -            public Component getListCellRendererComponent (JList   list,
    -                                                           Object  value,
    -                                                           int     index,
    -                                                           boolean isSelected,
    -                                                           boolean cellHasFocus)
    -            {
    -
    -                JLabel l = (JLabel) super.getListCellRendererComponent (list,
    -                                                                        value,
    -                                                                        index,
    -                                                                        isSelected,
    -                                                                        cellHasFocus);
    -
    -                EditorEditor.OnlineStatus status = (EditorEditor.OnlineStatus) value;
    -
    -                String iconName = status.getType ();
    -
    -                l.setText (status.getName ());
    -                l.setBorder (UIUtils.createPadding (3, 3, 3, 3));
    -                l.setIcon (Environment.getIcon (Constants.ONLINE_STATUS_ICON_NAME_PREFIX + iconName,
    -                                                Constants.ICON_POPUP));
    -
    -                return l;
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (defStatus);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        final JCheckBox fullScreen = UIUtils.createCheckBox ("Set my status to <b>Busy</b> when I enter full screen mode");
    -
    -        fullScreen.setSelected (EditorsEnvironment.getEditorsPropertyAsBoolean (Constants.QW_EDITORS_SERVICE_SET_BUSY_ON_FULL_SCREEN_ENTERED_PROPERTY_NAME));
    -
    -        fullScreen.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                try
    -                {
    -
    -                    EditorsEnvironment.setEditorsProperty (Constants.QW_EDITORS_SERVICE_SET_BUSY_ON_FULL_SCREEN_ENTERED_PROPERTY_NAME,
    -                                                           fullScreen.isSelected ());
    -
    -                    if (fullScreen.isSelected ())
    -                    {
    -
    -                        if (Environment.isInFullScreen ())
    -                        {
    -
    -                            EditorsEnvironment.fullScreenEntered ();
    -
    -                        }
    -
    -                    }
    -
    -                } catch (Exception e) {
    -
    -                    Environment.logError ("Unable to set to busy on full screen entered",
    -                                          e);
    -
    -                }
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (fullScreen);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        final JCheckBox logMessages = UIUtils.createCheckBox ("Log messages I send/receive (debug only)");
    -
    -        logMessages.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                EditorsEnvironment.logEditorMessages (logMessages.isSelected ());
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (logMessages);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        c = this.createHelpText ("Save messages sent/received to a log file.  You should only check this box if Quoll Writer support asks you to.  Note: this value is not saved and must be activated everytime you run Quoll Writer.");
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        this.setContentBorder (box);
    -
    -        Accordion.Item item = this.accordion.add (this.createHeader (UIUtils.formatForUser ("{Editors} Service"),
    -                                                  Constants.EDITORS_ICON_NAME),
    -                                                  null,
    -                                                  box,
    -                                                  UIUtils.createHelpTextPane ("Options related to the Editors service and how you interact with your {contacts}.",
    -                                                                              this.projectViewer));
    -
    -        this.sections.put (Section.Editors,
    -                           item);
    -
    -    }
    -    */
    -    /*
    -    private void addEditingChaptersSection ()
    -    {
    -
    -        final OptionsPanel _this = this;
    -
    -        //box.add (this.createHeader (UIUtils.formatForUser ("Editing {Chapters}")));
    -        //box.add (Box.createVerticalStrut (5));
    -
    -        Box box = new Box (BoxLayout.Y_AXIS);
    -
    -        Vector chapterA = new Vector ();
    -        chapterA.add (Constants.MINS_5);
    -        chapterA.add (Constants.MINS_10);
    -        chapterA.add (Constants.MINS_20);
    -        chapterA.add (Constants.MINS_30);
    -        chapterA.add (Constants.HOUR_1);
    -
    -        final JComboBox autosaveAmount = new JComboBox (chapterA);
    -
    -        final JCheckBox enableAutosave = new JCheckBox (Environment.replaceObjectNames ("Enable {Chapter} Auto-save"));
    -        enableAutosave.setOpaque (false);
    -        enableAutosave.setAlignmentX (Component.LEFT_ALIGNMENT);
    -
    -        JComponent c = this.createWrapper (enableAutosave);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        boolean autosaveEnabled = this.projectViewer.getProject ().getPropertyAsBoolean (Constants.CHAPTER_AUTO_SAVE_ENABLED_PROPERTY_NAME);
    -        enableAutosave.setSelected (autosaveEnabled);
    -
    -        autosaveAmount.setSelectedItem (this.projectViewer.getProject ().getProperty (Constants.CHAPTER_AUTO_SAVE_INTERVAL_PROPERTY_NAME));
    -        autosaveAmount.setEnabled (enableAutosave.isSelected ());
    -
    -        enableAutosave.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                autosaveAmount.setEnabled (enableAutosave.isSelected ());
    -
    -                Properties props = Environment.getDefaultProperties (Project.OBJECT_TYPE);
    -
    -                props.setProperty (Constants.CHAPTER_AUTO_SAVE_ENABLED_PROPERTY_NAME,
    -                                   new BooleanProperty (Constants.CHAPTER_AUTO_SAVE_ENABLED_PROPERTY_NAME,
    -                                                        enableAutosave.isSelected ()));
    -
    -                _this.projectViewer.fireProjectEventLater (ProjectEvent.AUTO_SAVE,
    -                                                          (enableAutosave.isSelected () ? ProjectEvent.ON : ProjectEvent.OFF));
    -
    -                // For all the ProjectViewers (where text is editable) update the auto save settings.
    -                Environment.doForOpenProjects (Project.NORMAL_PROJECT_TYPE,
    -                                               new ProjectViewerAction<ProjectViewer> ()
    -                                               {
    -
    -                                                    public void doAction (ProjectViewer pv)
    -                                                    {
    -
    -                                                        pv.scheduleAutoSaveForAllEditors ();
    -
    -                                                    }
    -
    -                                               });
    -
    -                _this.updateDefaultProjectProperty (Constants.CHAPTER_AUTO_SAVE_ENABLED_PROPERTY_NAME,
    -                                                    enableAutosave.isSelected ());
    -
    -            }
    -
    -        });
    -
    -        autosaveAmount.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                if (ev.getStateChange () != ItemEvent.SELECTED)
    -                {
    -
    -                    return;
    -
    -                }
    -
    -                _this.updateDefaultProjectProperty (Constants.CHAPTER_AUTO_SAVE_INTERVAL_PROPERTY_NAME,
    -                                                    (String) autosaveAmount.getSelectedItem ());
    -
    -                // For all the ProjectViewers (where text is editable) update the auto save settings.
    -                Environment.doForOpenProjects (Project.NORMAL_PROJECT_TYPE,
    -                                               new ProjectViewerAction<ProjectViewer> ()
    -                                               {
    -
    -                                                    public void doAction (ProjectViewer pv)
    -                                                    {
    -
    -                                                        pv.scheduleAutoSaveForAllEditors ();
    -
    -                                                    }
    -
    -                                               });
    -
    -            }
    -
    -        });
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        c = this.createHelpText ("Auto-save every");
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        c = this.createWrapper (autosaveAmount);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        final Properties userProps = Environment.getUserProperties ();
    -
    -        c = this.createHelpText ("Show an icon against a {chapter} in the {chapter} list when");
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        final JCheckBox showEditPos = new JCheckBox (Environment.replaceObjectNames ("it has an edit position"));
    -        showEditPos.setSelected (userProps.getPropertyAsBoolean (Constants.SHOW_EDIT_POSITION_ICON_IN_CHAPTER_LIST_PROPERTY_NAME));
    -        showEditPos.setOpaque (false);
    -        showEditPos.setAlignmentX (Component.LEFT_ALIGNMENT);
    -
    -        showEditPos.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                _this.updateUserProperty (Constants.SHOW_EDIT_POSITION_ICON_IN_CHAPTER_LIST_PROPERTY_NAME,
    -                                          showEditPos.isSelected ());
    -
    -                // Redraw the chapter list.
    -                if (_this.projectViewer instanceof ProjectViewer)
    -                {
    -
    -                    ((ProjectViewer) _this.projectViewer).reloadChapterTree ();
    -
    -                }
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (showEditPos);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        final JCheckBox showEdited = new JCheckBox (Environment.replaceObjectNames ("it is set as edit complete"));
    -        showEdited.setSelected (userProps.getPropertyAsBoolean (Constants.SHOW_EDIT_COMPLETE_ICON_IN_CHAPTER_LIST_PROPERTY_NAME));
    -        showEdited.setOpaque (false);
    -        showEdited.setAlignmentX (Component.LEFT_ALIGNMENT);
    -
    -        showEdited.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                _this.updateUserProperty (Constants.SHOW_EDIT_COMPLETE_ICON_IN_CHAPTER_LIST_PROPERTY_NAME,
    -                                          showEdited.isSelected ());
    -
    -                // Redraw the chapter list.
    -                if (_this.projectViewer instanceof ProjectViewer)
    -                {
    -
    -                    ((ProjectViewer) _this.projectViewer).reloadChapterTree ();
    -
    -                }
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (showEdited);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        final JComponent label = UIUtils.createClickableLabel ("View an example",
    -                                                               null);
    -
    -        label.addMouseListener (new MouseEventHandler ()
    -        {
    -
    -            public void handlePress (MouseEvent ev)
    -            {
    -
    -                QPopup popup = _this.projectViewer.getPopupByName ("edit-complete-example-popup");
    -
    -                if (popup == null)
    -                {
    -
    -                    // Create a fake chapter tree.
    -                    JTree tree = UIUtils.createTree ();
    -
    -                    tree.setCellRenderer (new ProjectTreeCellRenderer (false)
    -                    {
    -
    -                        public boolean showEditPositionIcon ()
    -                        {
    -
    -                            return true;
    -
    -                        }
    -
    -                        public boolean showEditCompleteIcon ()
    -                        {
    -
    -                            return true;
    -
    -                        }
    -
    -                    });
    -
    -                    Book testBook = null;
    -
    -                    try
    -                    {
    -
    -                        testBook = Environment.createTestBook ();
    -
    -                    } catch (Exception e) {
    -
    -                        Environment.logError ("Unable to create test book",
    -                                              e);
    -
    -                        return;
    -
    -                    }
    -
    -                    for (Chapter c : testBook.getChapters ())
    -                    {
    -
    -                        if (testBook.getChapterIndex (c) % 2 == 0)
    -                        {
    -
    -                            c.setEditComplete (true);
    -
    -                        } else {
    -
    -                            c.setEditPosition (1);
    -
    -                        }
    -
    -                    }
    -
    -                    tree.setModel (new DefaultTreeModel (UIUtils.createTree (testBook,
    -                                                                             null,
    -                                                                             null,
    -                                                                             false)));
    -
    -                    popup = UIUtils.createClosablePopup ("Example",
    -                                                         null,
    -                                                         null);
    -
    -                    popup.setName ("edit-complete-example-popup");
    -                    tree.setBorder (new EmptyBorder (10, 10, 10, 10));
    -
    -                    popup.setContent (tree);
    -
    -                    popup.setPreferredSize (new Dimension (250,
    -                                                           popup.getPreferredSize ().height));
    -
    -                }
    -
    -                _this.projectViewer.showPopupAt (popup,
    -                                                 label,
    -                                                 true);
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (label);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        final JCheckBox showEditMarker = new JCheckBox (Environment.replaceObjectNames ("Show the edit position in a {chapter}"));
    -        showEditMarker.setSelected (userProps.getPropertyAsBoolean (Constants.SHOW_EDIT_MARKER_IN_CHAPTER_PROPERTY_NAME));
    -        showEditMarker.setOpaque (false);
    -        showEditMarker.setAlignmentX (Component.LEFT_ALIGNMENT);
    -
    -        showEditMarker.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                _this.updateUserProperty (Constants.SHOW_EDIT_MARKER_IN_CHAPTER_PROPERTY_NAME,
    -                                          showEditMarker.isSelected ());
    -
    -                _this.projectViewer.doForPanels (QuollEditorPanel.class,
    -                                                 new DefaultQuollPanelAction ()
    -                                                 {
    -
    -                                                    public void doAction (QuollPanel qp)
    -                                                    {
    -
    -                                                        try
    -                                                        {
    -
    -                                                            ((QuollEditorPanel) qp).reinitIconColumn ();
    -
    -                                                        } catch (Exception e) {
    -
    -                                                            Environment.logError ("Unable to reinit icon column for panel",
    -                                                                                  e);
    -
    -                                                        }
    -
    -                                                    }
    -
    -                                                 });
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (showEditMarker);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        c = this.createHelpText ("Use the following color for the edit position indicator");
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        final Color col = UIUtils.getColor (userProps.getProperty (Constants.EDIT_MARKER_COLOR_PROPERTY_NAME));
    -
    -        final JPanel cSwatch = QColorChooser.getSwatch (col);
    -
    -        UIUtils.setAsButton (cSwatch);
    -
    -        cSwatch.addMouseListener (new MouseAdapter ()
    -        {
    -
    -            public void mouseReleased (MouseEvent ev)
    -            {
    -
    -                String colors = _this.projectViewer.getProject ().getProperty (Constants.COLOR_SWATCHES_PROPERTY_NAME);
    -
    -                QPopup popup = QColorChooser.getColorChooserPopup (colors,
    -                                                                   col,
    -                                                                   new ChangeAdapter ()
    -                                                                   {
    -
    -                                                                     public void stateChanged (ChangeEvent ev)
    -                                                                     {
    -
    -                                                                         Color c = (Color) ev.getSource ();
    -
    -                                                                        _this.updateUserProperty (Constants.EDIT_MARKER_COLOR_PROPERTY_NAME,
    -                                                                                                  UIUtils.colorToHex (c));
    -
    -                                                                        _this.projectViewer.doForPanels (QuollEditorPanel.class,
    -                                                                                                         new DefaultQuollPanelAction ()
    -                                                                                                         {
    -
    -                                                                                                            public void doAction (QuollPanel qp)
    -                                                                                                            {
    -
    -                                                                                                                try
    -                                                                                                                {
    -
    -                                                                                                                    ((QuollEditorPanel) qp).reinitIconColumn ();
    -
    -                                                                                                                } catch (Exception e) {
    -
    -                                                                                                                    Environment.logError ("Unable to reinit icon column for panel",
    -                                                                                                                                          e);
    -
    -                                                                                                                }
    -
    -                                                                                                            }
    -
    -                                                                                                         });
    -
    -                                                                         cSwatch.setBackground (c);
    -
    -                                                                     }
    -
    -                                                                   },
    -                                                                   new ActionAdapter ()
    -                                                                   {
    -
    -                                                                        public void actionPerformed (ActionEvent ev)
    -                                                                        {
    -
    -                                                                        }
    -
    -                                                                   });
    -
    -                popup.setDraggable (_this.projectViewer);
    -
    -                _this.projectViewer.showPopupAt (popup,
    -                                                 cSwatch,
    -                                                 true);
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (cSwatch);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        final JComponent label2 = UIUtils.createClickableLabel ("View an example",
    -                                                                null);
    -
    -        label2.addMouseListener (new MouseEventHandler ()
    -        {
    -
    -            @Override
    -            public void handlePress (MouseEvent ev)
    -            {
    -
    -                QPopup popup = _this.projectViewer.getPopupByName ("edit-position-example-popup");
    -
    -                if (popup == null)
    -                {
    -
    -                    popup = UIUtils.createClosablePopup ("Example",
    -                                                         null,
    -                                                         null);
    -
    -                    popup.setName ("edit-position-example-popup");
    -                    ImagePanel ip = new ImagePanel (Environment.getImage (Constants.EDIT_POSITION_TEST_IMAGE),
    -                                                    null);
    -
    -                    popup.setContent (ip);
    -
    -                }
    -
    -                _this.projectViewer.showPopupAt (popup,
    -                                                 label2,
    -                                                 true);
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (label2);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        final JCheckBox markEdited = new JCheckBox (Environment.replaceObjectNames ("Set a {chapter} as edit complete when the edit position is at the end of the {chapter}"));
    -        markEdited.setOpaque (false);
    -        markEdited.setSelected (userProps.getPropertyAsBoolean (Constants.SET_CHAPTER_AS_EDIT_COMPLETE_WHEN_EDIT_POSITION_IS_AT_END_OF_CHAPTER_PROPERTY_NAME));
    -        markEdited.setAlignmentX (Component.LEFT_ALIGNMENT);
    -
    -        markEdited.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                _this.updateUserProperty (Constants.SET_CHAPTER_AS_EDIT_COMPLETE_WHEN_EDIT_POSITION_IS_AT_END_OF_CHAPTER_PROPERTY_NAME,
    -                                          markEdited.isSelected ());
    -
    -                _this.projectViewer.doForPanels (AbstractEditorPanel.class,
    -                                                 new DefaultQuollPanelAction ()
    -                                                 {
    -
    -                                                    public void doAction (QuollPanel qp)
    -                                                    {
    -
    -                                                        AbstractEditorPanel p = (AbstractEditorPanel) qp;
    -
    -                                                        if (p == null)
    -                                                        {
    -
    -                                                            return;
    -
    -                                                        }
    -
    -                                                        try
    -                                                        {
    -
    -                                                            Chapter c = p.getChapter ();
    -
    -                                                            if (c.getEditPosition () > 0)
    -                                                            {
    -
    -                                                                _this.projectViewer.setChapterEditPosition (c,
    -                                                                                                            c.getEditPosition ());
    -
    -                                                            }
    -
    -                                                        } catch (Exception e) {
    -
    -                                                            Environment.logError ("Unable to set edit position for chapter: " +
    -                                                                                  p.getChapter (),
    -                                                                                  e);
    -
    -                                                        }
    -
    -                                                    }
    -
    -                                                 });
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (markEdited);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        final JCheckBox compressMenu = new JCheckBox (Environment.replaceObjectNames ("Compress the {chapter} right click menu"));
    -        compressMenu.setOpaque (false);
    -        compressMenu.setSelected (userProps.getPropertyAsBoolean (Constants.COMPRESS_CHAPTER_CONTEXT_MENU_PROPERTY_NAME));
    -        compressMenu.setAlignmentX (Component.LEFT_ALIGNMENT);
    -
    -        compressMenu.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                _this.updateUserProperty (Constants.COMPRESS_CHAPTER_CONTEXT_MENU_PROPERTY_NAME,
    -                                          compressMenu.isSelected ());
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (compressMenu);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        final JLabel label3 = UIUtils.createClickableLabel ("View an example",
    -                                                            null);
    -
    -        label3.addMouseListener (new MouseEventHandler ()
    -        {
    -
    -            @Override
    -            public void handlePress (MouseEvent ev)
    -            {
    -
    -                String img = Constants.COMPRESSED_CHAPTER_CONTEXT_MENU_IMAGE;
    -                String name = "compress-chapter-menu-example-popup";
    -
    -                if (!compressMenu.isSelected ())
    -                {
    -
    -                    img = Constants.NONE_COMPRESSED_CHAPTER_CONTEXT_MENU_IMAGE;
    -
    -                    name = "no-compress-chapter-menu-example-popup";
    -
    -                }
    -
    -                QPopup popup = _this.projectViewer.getPopupByName (name);
    -
    -                if (popup == null)
    -                {
    -
    -                    popup = UIUtils.createClosablePopup ("Example",
    -                                                         null,
    -                                                         null);
    -
    -                    ImagePanel ip = new ImagePanel (Environment.getImage (img),
    -                                                    null);
    -
    -                    popup.setName (name);
    -                    popup.setContent (ip);
    -
    -                    popup.setDraggable (_this.projectViewer);
    -
    -                }
    -
    -                _this.projectViewer.showPopupAt (popup,
    -                                                 label3,
    -                                                 true);
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (label3);
    -
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        c = this.createHelpText ("Use the following language for the spellchecker");
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        final JComponent downloadFiles = UIUtils.createClickableLabel ("Download the language files",
    -                                                                       null);
    -
    -        try
    -        {
    -
    -            downloadFiles.setVisible (!DictionaryProvider.isLanguageInstalled (this.projectViewer.getSpellCheckLanguage ()));
    -
    -        } catch (Exception e) {
    -
    -            // Ignore.
    -
    -        }
    -
    -        final JCheckBox defLang = new JCheckBox (Environment.replaceObjectNames ("Set as default language"));
    -
    -        final JComboBox spellcheckLang = new JComboBox ();
    -
    -        // Get the languages supported by the spellchecker.
    -        new Thread (new Runnable ()
    -        {
    -
    -            public void run ()
    -            {
    -
    -                String l = null;
    -
    -                try
    -                {
    -
    -                    l = Environment.getUrlFileAsString (new URL (Environment.getQuollWriterWebsite () + "/" + Environment.getProperty (Constants.QUOLL_WRITER_SUPPORTED_LANGUAGES_URL_PROPERTY_NAME)));
    -
    -                } catch (Exception e) {
    -
    -                    // Something gone wrong, so just add english.
    -                    l = Constants.ENGLISH;
    -
    -                    Environment.logError ("Unable to get language files url",
    -                                          e);
    -
    -                }
    -
    -                StringTokenizer t = new StringTokenizer (l,
    -                                                         String.valueOf ('\n'));
    -
    -                final Vector langs = new Vector ();
    -
    -                while (t.hasMoreTokens ())
    -                {
    -
    -                    String lang = t.nextToken ().trim ();
    -
    -                    if (lang.equals (""))
    -                    {
    -
    -                        continue;
    -
    -                    }
    -
    -                    langs.add (lang);
    -
    -                }
    -
    -                SwingUtilities.invokeLater (new Runnable ()
    -                {
    -
    -                    public void run ()
    -                    {
    -
    -                        spellcheckLang.setModel (new DefaultComboBoxModel (langs));
    -                        spellcheckLang.setSelectedItem (_this.projectViewer.getProject ().getProperty (Constants.SPELL_CHECK_LANGUAGE_PROPERTY_NAME));
    -                        spellcheckLang.setEnabled (true);
    -
    -                        boolean isDef = Environment.getUserProperties ().getProperty (Constants.SPELL_CHECK_LANGUAGE_PROPERTY_NAME).equals (spellcheckLang.getSelectedItem ().toString ());
    -
    -                        defLang.setSelected (isDef);
    -
    -                    }
    -
    -                });
    -
    -            }
    -
    -        }).start ();
    -
    -        final ActionListener setLang = new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                String lang = ev.getActionCommand ();
    -
    -                _this.updateProjectProperty (Constants.SPELL_CHECK_LANGUAGE_PROPERTY_NAME,
    -                                             lang);
    -
    -                try
    -                {
    -
    -                    _this.projectViewer.setSpellCheckLanguage (lang,
    -                                                               true);
    -
    -                } catch (Exception e)
    -                {
    -
    -                    // Not good but not fatal either.
    -                    Environment.logError ("Unable to set spell check language to: " +
    -                                          lang,
    -                                          e);
    -
    -                    return;
    -
    -                }
    -
    -                if (!lang.equals (_this.projectViewer.getSpellCheckLanguage ()))
    -                {
    -
    -                    _this.projectViewer.fireProjectEventLater (ProjectEvent.SPELL_CHECK,
    -                                                               ProjectEvent.CHANGE_LANGUAGE);
    -
    -                }
    -
    -            }
    -
    -        };
    -
    -        downloadFiles.addMouseListener (new MouseEventHandler ()
    -        {
    -
    -            @Override
    -            public void handlePress (MouseEvent ev)
    -            {
    -
    -                final String lang = spellcheckLang.getSelectedItem ().toString ();
    -
    -                _this.projectViewer.downloadDictionaryFiles (lang,
    -                                                             new ActionAdapter ()
    -                                                             {
    -
    -                                                                public void actionPerformed (ActionEvent ev)
    -                                                                {
    -
    -                                                                    setLang.actionPerformed (new ActionEvent (_this, 0, lang));
    -
    -                                                                    // Add a notification saying that the language has been set.
    -                                                                    // We do this "later" so that the previous notification is removed
    -                                                                    // and we don't get an unwanted border.
    -                                                                    SwingUtilities.invokeLater (new Runnable ()
    -                                                                    {
    -
    -                                                                        public void run ()
    -                                                                        {
    -
    -                                                                            _this.projectViewer.addNotification (String.format ("The language files for <b>%s</b> have been downloaded and the project language set.",
    -                                                                                                                                lang),
    -                                                                                                                 Constants.INFO_ICON_NAME,
    -                                                                                                                 30);
    -
    -                                                                        }
    -
    -                                                                    });
    -
    -                                                                }
    -
    -                                                             });
    -
    -            }
    -
    -        });
    -
    -        spellcheckLang.addItemListener (new ItemAdapter ()
    -        {
    -
    -           public void itemStateChanged (ItemEvent ev)
    -           {
    -
    -                if (ev.getStateChange () != ItemEvent.SELECTED)
    -                {
    -
    -                    return;
    -
    -                }
    -
    -                final String lang = spellcheckLang.getSelectedItem ().toString ();
    -
    -                String def = Environment.getUserProperties ().getProperty (Constants.SPELL_CHECK_LANGUAGE_PROPERTY_NAME);
    -
    -                final String currLang = def;
    -
    -                if (Environment.isEnglish (def))
    -                {
    -
    -                    def = Constants.ENGLISH;
    -
    -                }
    -
    -                defLang.setSelected (def.equals (lang));
    -
    -                if ((!Environment.isEnglish (lang))
    -                    &&
    -                    (!_this.projectViewer.getSpellCheckLanguage ().equals (lang))
    -                   )
    -                {
    -
    -                    UIUtils.showMessage (_this,
    -                                         "Please note: when changing the spell check language to something other\nthan English the following features will be disabled:\n\n  * synonym lookups\n  * the problem finder\n  * readability indices");
    -
    -                }
    -
    -                downloadFiles.setVisible (false);
    -
    -                // Check to see if the files are available.
    -                try
    -                {
    -
    -                    if (!DictionaryProvider.isLanguageInstalled (lang))
    -                    {
    -
    -                        downloadFiles.setVisible (true);
    -
    -                        UIUtils.createQuestionPopup (_this.projectViewer,
    -                                                     "Download dictionary files?",
    -                                                     Constants.DOWNLOAD_ICON_NAME,
    -                                                     "The dictionary files for <b>" +
    -                                                     lang +
    -                                                     "</b> need to be downloaded from the Quoll Writer server.<br /><br />Would you like to download them now?",
    -                                                     "Yes, download them",
    -                                                     null,
    -                                                     new ActionListener ()
    -                                                     {
    -
    -                                                        public void actionPerformed (ActionEvent ev)
    -                                                        {
    -
    -                                                            _this.projectViewer.downloadDictionaryFiles (lang,
    -                                                                                                         setLang);
    -
    -                                                        }
    -
    -                                                     },
    -                                                     new ActionListener ()
    -                                                     {
    -
    -                                                        public void actionPerformed (ActionEvent ev)
    -                                                        {
    -
    -                                                            spellcheckLang.setSelectedItem (currLang);
    -
    -                                                        }
    -
    -                                                     },
    -                                                     null,
    -                                                     null);
    -
    -                        return;
    -
    -                    }
    -
    -                } catch (Exception e) {
    -
    -                    Environment.logError ("Unable to get language files for: " +
    -                                          lang,
    -                                          e);
    -
    -                    UIUtils.showErrorMessage (_this,
    -                                              "Unable to check for dictionary files, please contact Quoll Writer support.");
    -
    -                    return;
    -
    -                }
    -
    -                setLang.actionPerformed (new ActionEvent (this, 0, lang));
    -
    -           }
    -
    -        });
    -
    -        c = this.createWrapper (spellcheckLang);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        defLang.setOpaque (false);
    -        defLang.setAlignmentX (Component.LEFT_ALIGNMENT);
    -
    -        defLang.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                if (!defLang.isSelected ())
    -                {
    -
    -                    return;
    -
    -                }
    -
    -                String lang = spellcheckLang.getSelectedItem ().toString ();
    -
    -                _this.updateUserProperty (Constants.SPELL_CHECK_LANGUAGE_PROPERTY_NAME,
    -                                          lang);
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (defLang);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        c = this.createWrapper (downloadFiles);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        JButton b = new JButton ("Manage your Personal Dictionary");
    -
    -        b.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                _this.projectViewer.showDictionaryManager ();
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (b);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        this.setContentBorder (box);
    -
    -        this.accordion.add (this.createHeader (UIUtils.formatForUser ("Editing {Chapters}"),
    -                                               Chapter.OBJECT_TYPE),
    -                            null,
    -                            box,
    -                            UIUtils.createHelpTextPane ("Everything to do with editing {chapters}.  Manage your personal dictionary, the language for the project, set up auto save and how edit positions behave.  All this and more for the low, low price of a few clicks.",
    -                                                        this.projectViewer));
    -
    -    }
    -    */
    -    /*
    -    private void addWhatThingsAreCalledSection ()
    -    {
    -
    -        final OptionsPanel _this = this;
    -
    -        final Properties userProps = Environment.getUserProperties ();
    -
    -        Box box = new Box (BoxLayout.Y_AXIS);
    -
    -        final JButton b = UIUtils.createButton ("Change names",
    -                                                null);
    -
    -        b.addActionListener (new ActionAdapter ()
    -                             {
    -
    -                                public void actionPerformed (ActionEvent ev)
    -                                {
    -
    -                                    _this.projectViewer.showObjectTypeNameChanger ();
    -
    -                                }
    -
    -                            });
    -
    -        JComponent c = this.createWrapper (b);
    -
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        this.setContentBorder (box);
    -
    -        this.accordion.add (this.createHeader (UIUtils.formatForUser ("What things are called"),
    -                                               Constants.CONFIG_ICON_NAME),
    -                            null,
    -                            box,
    -                            UIUtils.createHelpTextPane ("Not happy with what things are called?  Want to change {chapter} to <i>sausage</i>?  What are you waiting for crack this section open and get changing.  Yes that's a phrase now.",
    -                                                        this.projectViewer));
    -
    -    }
    -    */
    -    /*
    -    private void addHowThingsLookSection ()
    -    {
    -
    -        final OptionsPanel _this = this;
    -
    -        final Properties userProps = Environment.getUserProperties ();
    -
    -        //box.add (this.createHeader ("How things look and sound"));
    -        //box.add (Box.createVerticalStrut (5));
    -
    -        Box box = new Box (BoxLayout.Y_AXIS);
    -
    -        final JCheckBox showTips = new JCheckBox ("Show useful tips when Quoll Writer starts");
    -        showTips.setSelected (userProps.getPropertyAsBoolean (Constants.SHOW_TIPS_PROPERTY_NAME));
    -        showTips.setOpaque (false);
    -
    -        showTips.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                _this.updateUserProperty (Constants.SHOW_TIPS_PROPERTY_NAME,
    -                                          showTips.isSelected ());
    -
    -            }
    -
    -        });
    -
    -        JComponent c = this.createWrapper (showTips);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        final JCheckBox showPrev = new JCheckBox (Environment.replaceObjectNames ("Show a brief preview of the object when you mouse over its name in the {project} sidebar"));
    -        showPrev.setSelected (userProps.getPropertyAsBoolean (Constants.SHOW_QUICK_OBJECT_PREVIEW_IN_PROJECT_SIDEBAR_PROPERTY_NAME));
    -        showPrev.setOpaque (false);
    -
    -        showPrev.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                _this.updateUserProperty (Constants.SHOW_QUICK_OBJECT_PREVIEW_IN_PROJECT_SIDEBAR_PROPERTY_NAME,
    -                                          showPrev.isSelected ());
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (showPrev);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        final JCheckBox showNotesInChapterList = new JCheckBox (Environment.replaceObjectNames ("Show {Notes} in the {Chapter} list"));
    -        showNotesInChapterList.setSelected (userProps.getPropertyAsBoolean (Constants.SHOW_NOTES_IN_CHAPTER_LIST_PROPERTY_NAME));
    -        showNotesInChapterList.setOpaque (false);
    -
    -        showNotesInChapterList.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                _this.updateUserProperty (Constants.SHOW_NOTES_IN_CHAPTER_LIST_PROPERTY_NAME,
    -                                          showNotesInChapterList.isSelected ());
    -
    -                // Redraw the chapter list.
    -                if (_this.projectViewer instanceof ProjectViewer)
    -                {
    -
    -                    ((ProjectViewer) _this.projectViewer).reloadChapterTree ();
    -
    -                }
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (showNotesInChapterList);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        c = this.createHelpText ("How should the interface be laid out? (Click on the image below to change)");
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        String selLayout = Environment.getUserProperties ().getProperty (Constants.UI_LAYOUT_PROPERTY_NAME);
    -
    -        final JLabel layoutSel = new JLabel (new ImageIcon (Environment.getImage (Constants.DATA_DIR + selLayout + ".png")));
    -
    -        UIUtils.setAsButton (layoutSel);
    -
    -        layoutSel.addMouseListener (new MouseEventHandler ()
    -        {
    -
    -            @Override
    -            public void handlePress (MouseEvent ev)
    -            {
    -
    -                String selLayout = Environment.getUserProperties ().getProperty (Constants.UI_LAYOUT_PROPERTY_NAME);
    -
    -                final QPopup qp = UIUtils.createClosablePopup ("Select a layout",
    -                                                               Environment.getIcon (Constants.EDIT_ICON_NAME,
    -                                                                                    Constants.ICON_POPUP),
    -                                                               null);
    -
    -                Box content = new Box (BoxLayout.Y_AXIS);
    -
    -                Vector<String> layoutTypes = new Vector ();
    -                layoutTypes.add (Constants.LAYOUT_PS_CH);
    -                layoutTypes.add (Constants.LAYOUT_CH_PS);
    -                layoutTypes.add (Constants.LAYOUT_PS_CH_OS);
    -                layoutTypes.add (Constants.LAYOUT_OS_CH_PS);
    -                layoutTypes.add (Constants.LAYOUT_PS_OS_CH);
    -                layoutTypes.add (Constants.LAYOUT_CH_OS_PS);
    -
    -                final JList<String> layoutL = new JList (layoutTypes);
    -
    -                layoutL.setSelectedValue (selLayout,
    -                                          false);
    -
    -                layoutL.setToolTipText ("Click to select a layout");
    -                layoutL.addListSelectionListener (new ListSelectionListener ()
    -                {
    -
    -                    public void valueChanged (ListSelectionEvent ev)
    -                    {
    -
    -                        String layout = layoutL.getSelectedValue ();
    -
    -                        layoutSel.setIcon (new ImageIcon (Environment.getImage (Constants.DATA_DIR + layout + ".png")));
    -
    -                        qp.removeFromParent ();
    -
    -                        _this.projectViewer.setUILayout (layout);
    -
    -                        try
    -                        {
    -
    -                            Environment.setUserProperty (Constants.UI_LAYOUT_PROPERTY_NAME,
    -                                                         layout);
    -
    -                        } catch (Exception e) {
    -
    -                            Environment.logError ("Unable to set layout to: " +
    -                                                  layout,
    -                                                  e);
    -
    -                        }
    -
    -                    }
    -
    -                });
    -
    -                layoutL.setCellRenderer (new DefaultListCellRenderer ()
    -                {
    -
    -                    private Map<String, ImageIcon> images = new HashMap ();
    -
    -                    public Component getListCellRendererComponent (JList   list,
    -                                                                   Object  value,
    -                                                                   int     index,
    -                                                                   boolean isSelected,
    -                                                                   boolean cellHasFocus)
    -                    {
    -
    -                        super.getListCellRendererComponent (list,
    -                                                            value,
    -                                                            index,
    -                                                            isSelected,
    -                                                            cellHasFocus);
    -
    -                        String imName = value.toString ();
    -
    -                        ImageIcon icon = this.images.get (imName);
    -
    -                        if (icon == null)
    -                        {
    -
    -                            icon = new ImageIcon (Environment.getImage (Constants.DATA_DIR + imName + ".png"));
    -
    -                            this.images.put (imName,
    -                                             icon);
    -
    -                        }
    -
    -                        this.setIcon (icon);
    -                        String text = "";
    -
    -                        if (imName.equals (Constants.LAYOUT_PS_CH))
    -                        {
    -
    -                            text = "Only show one sidebar, always on the left. Other sidebars will display where the {project} sidebar is.  (Default)";
    -
    -                        }
    -
    -                        if (imName.equals (Constants.LAYOUT_CH_PS))
    -                        {
    -
    -                            text = "Only show one sidebar, always on the right.  Other sidebars will display where the {project} sidebar is.";
    -
    -                        }
    -
    -                        if (imName.equals (Constants.LAYOUT_PS_CH_OS))
    -                        {
    -
    -                            text = "The {project} sidebar is shown on the left.  Other sidebars, such as word counts, are shown on the right.";
    -
    -                        }
    -
    -                        if (imName.equals (Constants.LAYOUT_OS_CH_PS))
    -                        {
    -
    -                            text = "The {project} sidebar is shown on the right.  Other sidebars, such as {chapter} information, are shown on the left.";
    -
    -                        }
    -
    -                        if (imName.equals (Constants.LAYOUT_PS_OS_CH))
    -                        {
    -
    -                            text = "The {project} sidebar is shown on the left with other sidebars next to it.";
    -
    -                        }
    -
    -                        if (imName.equals (Constants.LAYOUT_CH_OS_PS))
    -                        {
    -
    -                            text = "The {project} sidebar is shown on the far right with other sidebars next to it (to the left).";
    -
    -                        }
    -
    -                        this.setText (String.format ("<html>%s</html>",
    -                                                     Environment.replaceObjectNames (text)));
    -                        this.setBorder (UIUtils.createPadding (5, 3, 5, 3));
    -                        this.setVerticalTextPosition (SwingConstants.TOP);
    -
    -                        if (isSelected)
    -                        {
    -
    -                            this.setBorder (new CompoundBorder (UIUtils.createLineBorder (),
    -                                                                this.getBorder ()));
    -
    -                        }
    -
    -                        return this;
    -
    -                    }
    -
    -                });
    -
    -                UIUtils.setAsButton (layoutL);
    -
    -                content.add (layoutL);
    -                content.setBorder (UIUtils.createPadding (10, 10, 10, 10));
    -                qp.setContent (content);
    -
    -                content.setPreferredSize (new Dimension (UIUtils.getPopupWidth (),
    -                                                         content.getPreferredSize ().height));
    -
    -                _this.projectViewer.showPopupAt (qp,
    -                                                 UIUtils.getCenterShowPosition (_this.projectViewer,
    -                                                                                qp),
    -                                                 false);
    -
    -                qp.setDraggable (_this.projectViewer);
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (layoutSel);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        c = this.createHelpText ("Show the toolbar");
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        Vector v = new Vector ();
    -        v.add (Environment.replaceObjectNames ("Above {Chapters}"));
    -        v.add (Environment.replaceObjectNames ("Below {Notes}"));
    -
    -        final JComboBox toolbarLoc = new JComboBox (v);
    -
    -        String loc = userProps.getProperty (Constants.TOOLBAR_LOCATION_PROPERTY_NAME);
    -
    -        int ind = 0;
    -
    -        if (loc.equals (Constants.BOTTOM))
    -        {
    -
    -            ind = 1;
    -
    -        }
    -
    -        toolbarLoc.setSelectedIndex (ind);
    -
    -        toolbarLoc.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                if (ev.getStateChange () != ItemEvent.SELECTED)
    -                {
    -
    -                    return;
    -
    -                }
    -
    -                String loc = Constants.TOP;
    -
    -                if (toolbarLoc.getSelectedIndex () == 1)
    -                {
    -
    -                    loc = Constants.BOTTOM;
    -
    -                }
    -
    -                if (!loc.equals (_this.projectViewer.getProject ().getProperty (Constants.TOOLBAR_LOCATION_PROPERTY_NAME)))
    -                {
    -
    -                    _this.projectViewer.fireProjectEventLater (ProjectEvent.TOOLBAR,
    -                                                               ProjectEvent.MOVE);
    -
    -                }
    -
    -                _this.projectViewer.setToolbarLocation (loc);
    -
    -                _this.updateUserProperty (Constants.TOOLBAR_LOCATION_PROPERTY_NAME,
    -                                          loc);
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (toolbarLoc);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        // Sidebar location
    -        c = this.createHelpText ("Show the tabs");
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        v = new Vector ();
    -        v.add (Environment.replaceObjectNames ("At the top"));
    -        v.add (Environment.replaceObjectNames ("At the bottom"));
    -
    -        final JComboBox tabsLoc = new JComboBox (v);
    -
    -        loc = userProps.getProperty (Constants.TABS_LOCATION_PROPERTY_NAME);
    -
    -        ind = 0;
    -
    -        if (loc.equals (Constants.BOTTOM))
    -        {
    -
    -            ind = 1;
    -
    -        }
    -
    -        tabsLoc.setSelectedIndex (ind);
    -
    -        tabsLoc.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                if (ev.getStateChange () != ItemEvent.SELECTED)
    -                {
    -
    -                    return;
    -
    -                }
    -
    -                String loc = Constants.TOP;
    -
    -                if (tabsLoc.getSelectedIndex () == 1)
    -                {
    -
    -                    loc = Constants.BOTTOM;
    -
    -                }
    -
    -                if (tabsLoc.getSelectedIndex () == 2)
    -                {
    -
    -                    loc = Constants.LEFT;
    -
    -                }
    -
    -                if (tabsLoc.getSelectedIndex () == 3)
    -                {
    -
    -                    loc = Constants.RIGHT;
    -
    -                }
    -
    -                if (!loc.equals (userProps.getProperty (Constants.TABS_LOCATION_PROPERTY_NAME)))
    -                {
    -
    -                    _this.projectViewer.fireProjectEventLater (ProjectEvent.TABS,
    -                                                               ProjectEvent.MOVE);
    -
    -                }
    -
    -                _this.projectViewer.setTabsLocation (loc);
    -
    -                _this.updateUserProperty (Constants.TABS_LOCATION_PROPERTY_NAME,
    -                                          loc);
    -
    -            }
    -
    -        });
    -
    -        c = this.createWrapper (tabsLoc);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        final JCheckBox playSound = new JCheckBox (UIUtils.formatForUser ("Play a typewriter sound when editing a {chapter}."));
    -
    -        boolean playSoundEnabled = userProps.getPropertyAsBoolean (Constants.PLAY_SOUND_ON_KEY_STROKE_PROPERTY_NAME);
    -
    -        final FileFinder f = new FileFinder ();
    -        final JButton useB = new JButton ("Use Sound");
    -        final JButton testB = new JButton ("Play Sound");
    -
    -        f.setEnabled (playSoundEnabled);
    -        playSound.setOpaque (false);
    -        playSound.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                boolean sel = playSound.isSelected ();
    -
    -                f.setEnabled (sel);
    -
    -                if ((sel)
    -                    &&
    -                    (f.getSelectedFile () != null)
    -                    &&
    -                    (f.getSelectedFile ().exists ())
    -                   )
    -                {
    -
    -                    useB.setEnabled (true);
    -
    -                } else {
    -
    -                    useB.setEnabled (false);
    -
    -                }
    -
    -                try
    -                {
    -
    -                    _this.projectViewer.setKeyStrokeSoundFile (null,
    -                                                               sel);
    -
    -                    _this.updateUserProperty (Constants.PLAY_SOUND_ON_KEY_STROKE_PROPERTY_NAME,
    -                                              sel);
    -
    -                } catch (Exception e)
    -                {
    -
    -                    Environment.logError ("Unable to set key stroke sound file to the default",
    -                                          e);
    -
    -                }
    -
    -            }
    -
    -        });
    -
    -        playSound.setSelected (playSoundEnabled);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        c = this.createWrapper (playSound);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        c = this.createHelpText ("Or, select your own WAV file that will be played instead. (Note: only .wav files are supported.)");
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        String sf = userProps.getProperty (Constants.KEY_STROKE_SOUND_FILE_PROPERTY_NAME);
    -
    -        if (sf == null)
    -        {
    -
    -            sf = "";
    -
    -        }
    -
    -        final String sfv = sf;
    -
    -        f.setFile (new File (sfv));
    -
    -        f.setApproveButtonText ("Select");
    -        f.setFinderSelectionMode (JFileChooser.FILES_ONLY);
    -        f.setFinderTitle ("Select a File");
    -
    -        f.setFileFilter (new FileNameExtensionFilter ("Supported Files (wav)",
    -                                                      "wav"));
    -
    -        f.setFindButtonToolTip ("Click to find a wav file");
    -        f.setClearOnCancel (true);
    -        f.setMaximumSize (new Dimension (400,
    -                                         f.getPreferredSize ().height));
    -
    -        f.setOnSelectHandler (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                useB.setEnabled (true);
    -                testB.setEnabled (true);
    -
    -            }
    -
    -        });
    -
    -        f.showCancel (true,
    -                      new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                Properties props = Environment.getDefaultProperties (Project.OBJECT_TYPE);
    -
    -                props.removeProperty (Constants.KEY_STROKE_SOUND_FILE_PROPERTY_NAME);
    -
    -                useB.setEnabled (false);
    -                testB.setEnabled (false);
    -
    -            }
    -
    -        });
    -
    -        f.init ();
    -
    -        boolean sel = (f.getSelectedFile ().exists () && playSoundEnabled);
    -        useB.setEnabled (sel);
    -        testB.setEnabled (sel);
    -
    -        c = this.createWrapper (f);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        useB.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                File file = f.getSelectedFile ();
    -
    -                if ((file != null)
    -                    &&
    -                    (file.exists ())
    -                   )
    -                {
    -
    -                    try
    -                    {
    -
    -                        _this.projectViewer.setKeyStrokeSoundFile (file,
    -                                                                   playSound.isSelected ());
    -
    -                        _this.updateUserProperty (Constants.KEY_STROKE_SOUND_FILE_PROPERTY_NAME,
    -                                                  file.getPath ());
    -
    -                    } catch (Exception e)
    -                    {
    -
    -                        Environment.logError ("Unable to set key stroke sound file to: " +
    -                                              file.getPath (),
    -                                              e);
    -
    -                    }
    -
    -                }
    -
    -            }
    -
    -        });
    -
    -        testB.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                File file = f.getSelectedFile ();
    -
    -                try
    -                {
    -
    -                    InputStream is = null;
    -
    -                    if (file != null)
    -                    {
    -
    -                        if ((file.exists ()) &&
    -                            (file.getName ().toLowerCase ().endsWith (".wav")))
    -                        {
    -
    -                            is = new BufferedInputStream (new FileInputStream (file));
    -
    -                        } else
    -                        {
    -
    -                            UIUtils.showErrorMessage (_this,
    -                                                      file + " is not a valid .wav file.");
    -
    -                            return;
    -
    -                        }
    -
    -                    }
    -
    -                    if (is == null)
    -                    {
    -
    -                        // Play the default.
    -                        is = Environment.getResourceStream (Constants.DEFAULT_KEY_STROKE_SOUND_FILE);
    -
    -                    }
    -
    -                    // Get the clip.
    -                    AudioInputStream ais = AudioSystem.getAudioInputStream (is);
    -
    -                    Clip c = AudioSystem.getClip ();
    -
    -                    c.open (ais);
    -
    -                    c.start ();
    -
    -                } catch (Exception e)
    -                {
    -
    -                    Environment.logError ("Unable to play sound file: " +
    -                                          file,
    -                                          e);
    -
    -                    UIUtils.showErrorMessage (_this,
    -                                              "Unable to play sound file.");
    -
    -                }
    -
    -            }
    -
    -        });
    -
    -        JButton buts[] = new JButton[2];
    -
    -        buts[0] = useB;
    -        buts[1] = testB;
    -
    -        JPanel bp = UIUtils.createButtonBar2 (buts,
    -                                              Component.LEFT_ALIGNMENT); //ButtonBarFactory.buildLeftAlignedBar (buts);
    -        bp.setOpaque (false);
    -
    -        c = this.createWrapper (bp);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        this.setContentBorder (box);
    -
    -        Accordion.Item item = this.accordion.add (this.createHeader (UIUtils.formatForUser ("How things look and sound"),
    -                                                                     "eye"),
    -                                                  null,
    -                                                  box,
    -                                                  UIUtils.createHelpTextPane ("Want a sound to play whenever a key is pressed?  Want to move the tabs or sidebar around?  Want to show useful tips when Quoll Writer starts?  This is the section for you.",
    -                                                                              this.projectViewer));
    -
    -        this.sections.put (Section.Look,
    -                           item);
    -
    -
    -    }
    -*/
    -    private void updateUserProperty (String  name,
    -                                     boolean value)
    -    {
    -
    -        try
    -        {
    -
    -            Environment.setUserProperty (name,
    -                                         new BooleanProperty (name,
    -                                                              value));
    -
    -        } catch (Exception e)
    -        {
    -
    -            Environment.logError ("Unable to save user properties",
    -                                  e);
    -
    -            UIUtils.showErrorMessage (this,
    -                                      "Unable to save user properties");
    -
    -        }
    -
    -        this.projectViewer.getProject ().getProperties ().removeProperty (name);
    -
    -    }
    -
    -    private void updateUserProperty (String name,
    -                                     String value)
    -    {
    -
    -        try
    -        {
    -
    -            Environment.setUserProperty (name,
    -                                         new StringProperty (name,
    -                                                             value));
    -
    -        } catch (Exception e)
    -        {
    -
    -            Environment.logError ("Unable to save user properties",
    -                                  e);
    -
    -            UIUtils.showErrorMessage (this,
    -                                      "Unable to save user properties");
    -
    -        }
    -
    -        this.projectViewer.getProject ().getProperties ().removeProperty (name);
    -
    -    }
    -
    -    private void updateDefaultProjectProperty (String name,
    -                                               String value)
    -    {
    -
    -        Properties props = Environment.getDefaultProperties (Project.OBJECT_TYPE);
    -
    -        props.setProperty (name,
    -                           new StringProperty (name,
    -                                               value));
    -
    -        try
    -        {
    -
    -            Environment.saveDefaultProperties (Project.OBJECT_TYPE,
    -                                               props);
    -
    -        } catch (Exception e)
    -        {
    -
    -            Environment.logError ("Unable to save default project properties",
    -                                  e);
    -
    -            UIUtils.showErrorMessage (this,
    -                                      "Unable to save default project properties");
    -
    -        }
    -
    -    }
    -
    -    private void updateDefaultProjectProperty (String  name,
    -                                               boolean value)
    -    {
    -
    -        Properties props = Environment.getDefaultProperties (Project.OBJECT_TYPE);
    -
    -        props.setProperty (name,
    -                           new BooleanProperty (name,
    -                                                value));
    -
    -        try
    -        {
    -
    -            Environment.saveDefaultProperties (Project.OBJECT_TYPE,
    -                                               props);
    -
    -        } catch (Exception e)
    -        {
    -
    -            Environment.logError ("Unable to save default project properties",
    -                                  e);
    -
    -            UIUtils.showErrorMessage (this,
    -                                      "Unable to save default project properties");
    -
    -        }
    -
    -    }
    -
    -    private void updateProjectProperty (String name,
    -                                        String value)
    -    {
    -
    -        Properties props = this.projectViewer.getProject ().getProperties ();
    -
    -        props.setProperty (name,
    -                           new StringProperty (name,
    -                                               value));
    -
    -        try
    -        {
    -
    -            this.projectViewer.saveProject ();
    -
    -        } catch (Exception e)
    -        {
    -
    -            Environment.logError ("Unable to save project",
    -                                  e);
    -
    -            UIUtils.showErrorMessage (this,
    -                                      "Unable to save.");
    -
    -            return;
    -
    -        }
    -
    -    }
    -    /*
    -    private void addProjectAndSnapshotsSection ()
    -    {
    -
    -        final OptionsPanel _this = this;
    -
    -        Box box = new Box (BoxLayout.Y_AXIS);
    -
    -        final JButton b = new JButton ("Change");
    -
    -        final FileFinder f = UIUtils.createFileFind (this.projectViewer.getProject ().getProjectDirectory ().getParentFile ().getPath (),
    -                                                     "Select a Directory",
    -                                                     JFileChooser.DIRECTORIES_ONLY,
    -                                                     "Select",
    -                                                     null);
    -        f.setFindButtonToolTip (Environment.replaceObjectNames ("Click to find a new {project} directory"));
    -        f.setMaximumSize (new Dimension (400,
    -                                         f.getPreferredSize ().height));
    -
    -        f.setOnSelectHandler (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                b.setEnabled (!f.getSelectedFile ().getPath ().equals (_this.projectViewer.getProject ().getProjectDirectory ().getParentFile ().getPath ()));
    -
    -            }
    -
    -        });
    -
    -        JComponent c = this.createHelpText ("Select the directory where your {project} is stored");
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        c = this.createWrapper (f);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        b.setEnabled (false);
    -
    -        b.addActionListener (new ActionAdapter ()
    -        {
    -
    -             public void actionPerformed (ActionEvent ev)
    -             {
    -
    -                 _this.handleProjectDirChange (f);
    -
    -             }
    -
    -        });
    -
    -        c = this.createWrapper (b);
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (15));
    -
    -        Vector backupsA = new Vector ();
    -        backupsA.add (Constants.HOURS_12);
    -        backupsA.add (Constants.HOURS_24);
    -        backupsA.add (Constants.DAYS_2);
    -        backupsA.add (Constants.DAYS_5);
    -        backupsA.add (Constants.WEEK_1);
    -
    -        final JComboBox backupsAmount = new JComboBox (backupsA);
    -
    -        Vector vals = new Vector ();
    -        vals.add (Constants.COUNT_10);
    -        vals.add (Constants.COUNT_20);
    -        vals.add (Constants.COUNT_50);
    -        vals.add (Constants.COUNT_ALL);
    -
    -        final JComboBox backupsCount = new JComboBox (vals);
    -        backupsCount.setSelectedItem (this.projectViewer.getProject ().getProperty (Constants.BACKUPS_TO_KEEP_COUNT_PROPERTY_NAME));
    -
    -        backupsCount.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                if (ev.getStateChange () != ItemEvent.SELECTED)
    -                {
    -
    -                    return;
    -
    -                }
    -
    -                _this.updateDefaultProjectProperty (Constants.BACKUPS_TO_KEEP_COUNT_PROPERTY_NAME,
    -                                                    (String) backupsCount.getSelectedItem ());
    -
    -                try
    -                {
    -
    -                    _this.projectViewer.getObjectManager ().pruneBackups (_this.projectViewer.getProject (),
    -                                                                          Utils.getCountAsInt ((String) backupsCount.getSelectedItem ()));
    -
    -                } catch (Exception e) {
    -
    -                    Environment.logError ("Unable to prune backups for project: " +
    -                                          _this.projectViewer.getProject (),
    -                                          e);
    -
    -                }
    -
    -            }
    -
    -        });
    -
    -        final JCheckBox enableBackups = new JCheckBox (Environment.replaceObjectNames ("Automatically create backups of the {project}"));
    -        enableBackups.setOpaque (false);
    -
    -        c = this.createWrapper (enableBackups);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        boolean backupsEnabled = this.projectViewer.getProject ().getPropertyAsBoolean (Constants.AUTO_SNAPSHOTS_ENABLED_PROPERTY_NAME);
    -        enableBackups.setSelected (backupsEnabled);
    -
    -        backupsCount.setEnabled (backupsEnabled);
    -
    -        backupsAmount.setSelectedItem (this.projectViewer.getProject ().getProperty (Constants.AUTO_SNAPSHOTS_TIME_PROPERTY_NAME));
    -        backupsAmount.setEnabled (backupsEnabled);
    -
    -        backupsAmount.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                if (ev.getStateChange () != ItemEvent.SELECTED)
    -                {
    -
    -                    return;
    -
    -                }
    -
    -                _this.updateDefaultProjectProperty (Constants.AUTO_SNAPSHOTS_TIME_PROPERTY_NAME,
    -                                                    (String) backupsAmount.getSelectedItem ());
    -
    -            }
    -
    -        });
    -
    -        backupsCount.setEnabled (enableBackups.isSelected ());
    -
    -        c = this.createHelpText ("Create a new backup after the following time between sessions or during a session");
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        c = this.createWrapper (backupsAmount);
    -        this.setAsSubItem2 (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (10));
    -
    -        c = this.createHelpText ("Number of backups to keep (oldest are deleted first)");
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        c = this.createWrapper (backupsCount);
    -        this.setAsSubItem2 (c);
    -
    -        box.add (c);
    -
    -        final JButton bb = new JButton ("Change");
    -
    -        final FileFinder bf = UIUtils.createFileFind (this.projectViewer.getProject ().getBackupDirectory ().getPath (),
    -                                                     "Select a Directory",
    -                                                     JFileChooser.DIRECTORIES_ONLY,
    -                                                     "Select",
    -                                                     null);
    -        bf.setFindButtonToolTip (Environment.replaceObjectNames ("Click to find a new backup directory"));
    -        bf.setMaximumSize (new Dimension (400,
    -                                          bf.getPreferredSize ().height));
    -
    -        bf.setOnSelectHandler (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                bb.setEnabled (!bf.getSelectedFile ().getPath ().equals (_this.projectViewer.getProject ().getBackupDirectory ().getPath ()));
    -
    -            }
    -
    -        });
    -
    -        enableBackups.addItemListener (new ItemAdapter ()
    -        {
    -
    -            public void itemStateChanged (ItemEvent ev)
    -            {
    -
    -                boolean sel = enableBackups.isSelected ();
    -
    -                backupsAmount.setEnabled (sel);
    -
    -                backupsCount.setEnabled (sel);
    -
    -                bf.setEnabled (sel);
    -
    -                _this.updateDefaultProjectProperty (Constants.AUTO_SNAPSHOTS_ENABLED_PROPERTY_NAME,
    -                                                    sel);
    -
    -            }
    -
    -        });
    -
    -        box.add (Box.createVerticalStrut (10));
    -
    -        c = this.createHelpText ("Select the directory where {project} backups are stored");
    -        this.setAsSubItem (c);
    -
    -        box.add (c);
    -
    -        c = this.createWrapper (bf);
    -        this.setAsSubItem2 (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (5));
    -
    -        bb.setEnabled (false);
    -
    -        bb.addActionListener (new ActionAdapter ()
    -        {
    -
    -             public void actionPerformed (ActionEvent ev)
    -             {
    -
    -                 _this.handleBackupsDirChange (bf);
    -
    -             }
    -
    -        });
    -
    -        c = this.createWrapper (bb);
    -        this.setAsSubItem2 (c);
    -
    -        box.add (c);
    -
    -        box.add (Box.createVerticalStrut (10));
    -
    -        JButton create = new JButton ("Create a Backup");
    -
    -        create.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                UIUtils.showCreateBackup (_this.projectViewer.getProject (),
    -                                          null,
    -                                          _this.projectViewer);
    -
    -            }
    -
    -        });
    -
    -        JButton manage = new JButton ("Manage Backups");
    -
    -        manage.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                UIUtils.showManageBackups (Environment.getProjectInfo (_this.projectViewer.getProject ()),
    -                                           _this.projectViewer);
    -
    -            }
    -
    -        });
    -
    -        JButton buts[] = new JButton[] { create, manage };
    -
    -        JPanel bp = UIUtils.createButtonBar2 (buts,
    -                                              Component.LEFT_ALIGNMENT);
    -        bp.setOpaque (false);
    -
    -        c = this.createWrapper (bp);
    -
    -        //c = this.createWrapper (mb);
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        this.setContentBorder (box);
    -
    -        Accordion.Item item = this.accordion.add (this.createHeader (Environment.replaceObjectNames ("{Project} & Backups"),
    -                                                                     Constants.PROJECT_ICON_NAME),
    -                                                  null,
    -                                                  box,
    -                                                  UIUtils.createHelpTextPane ("Click the title above to open this section.  You can then change where your {project} is stored and how often backups are created and where they are stored.",
    -                                                                              this.projectViewer));
    -
    -        this.sections.put (Section.Project,
    -                           item);
    -
    -
    -    }
    -    */
    -    private boolean handleProjectDirChange (final FileFinder f)
    -    {
    -
    -        final OptionsPanel _this = this;
    -
    -        final Project proj = this.projectViewer.getProject ();
    -
    -        final File oldProjDir = proj.getProjectDirectory ();
    -
    -        final File newDir = f.getSelectedFile ();
    -
    -        final File newProjDir = new File (newDir,
    -                                          Utils.sanitizeForFilename (proj.getName ()));
    -
    -        // See if the project directory is changing.
    -        if (!newDir.equals (oldProjDir))
    -        {
    -
    -            if (Utils.isDirectoryEmpty (newDir))
    -            {
    -
    -                UIUtils.showErrorMessage (this.projectViewer,
    -                                          "Unable to change directory to: " +
    -                                          newProjDir +
    -                                          " directory is not empty.");
    -
    -                f.setFile (oldProjDir);
    -
    -                return false;
    -
    -            }
    -
    -            // Is changing so need to close the project.
    -            Point p = SwingUtilities.convertPoint (f,
    -                                                   0,
    -                                                   0,
    -                                                   this.projectViewer);
    -
    -            // Inception!  Don't you just love asynchronous programming!
    -            ActionListener confirmAction = new ActionListener ()
    -            {
    -
    -               public void actionPerformed (ActionEvent ev)
    -               {
    -
    -                   _this.projectViewer.close (true,
    -                                              new ActionListener ()
    -                   {
    -
    -                       public void actionPerformed (ActionEvent ev)
    -                       {
    -
    -                            if (!proj.getProjectDirectory ().renameTo (newProjDir))
    -                            {
    -
    -                                Environment.logError ("Unable to rename project directory: " +
    -                                                      proj.getProjectDirectory ().getParentFile () +
    -                                                      " to: " +
    -                                                      newProjDir.getParentFile ());
    -
    -                                UIUtils.showErrorMessage (null,
    -                                                          "Unable to change project directory, please contact Quoll Writer support for assistance.");
    -
    -                            } else {
    -
    -                                proj.setProjectDirectory (newProjDir);
    -
    -                            }
    -
    -                            // Open the project again.
    -                            try
    -                            {
    -
    -                                Environment.openProject (proj);
    -
    -                            } catch (Exception e)
    -                            {
    -
    -                                Environment.logError ("Unable to reopen project: " +
    -                                                      proj,
    -                                                      e);
    -
    -                                UIUtils.showErrorMessage (null,
    -                                                          "Unable to reopen project, please contact Quoll Writer support for assistance.");
    -
    -                                return;
    -
    -                            }
    -
    -                            // Finally, delete the old project directory.
    -                            //Utils.deleteDir (oldDir);
    -
    -                            Environment.getProjectViewer (proj).fireProjectEventLater (proj.getObjectType (),
    -                                                                                       ProjectEvent.CHANGED_DIRECTORY);
    -
    -                        }
    -
    -                   });
    -
    -                }
    -
    -            };
    -
    -            ActionListener onCancel = new ActionListener ()
    -            {
    -
    -               public void actionPerformed (ActionEvent ev)
    -               {
    -
    -                   // Reset the file.
    -                   f.setFile (oldProjDir.getParentFile ());
    -
    -               }
    -
    -            };
    -
    -            UIUtils.createQuestionPopup (this.projectViewer,
    -                                         "Confirm change to {project} directory?",
    -                                         Project.OBJECT_TYPE,
    -                                         "Warning!  To change the directory of a {project} it must first be saved and closed.  Once the directory has been changed the {project} will be reopened.<br /><br />Do you wish to continue?",
    -                                         "Yes, change it",
    -                                         null,
    -                                         confirmAction,
    -                                         onCancel,
    -                                         onCancel,
    -                                         p);
    -
    -        }
    -
    -        return false;
    -
    -    }
    -
    -    private void handleBackupsDirChange (final FileFinder f)
    -    {
    -
    -        final OptionsPanel _this = this;
    -
    -        final Project proj = this.projectViewer.getProject ();
    -
    -        final File oldDir = proj.getBackupDirectory ();
    -
    -        final File newDir = f.getSelectedFile ();
    -
    -        // See if the project directory is changing.
    -        if (!newDir.equals (oldDir))
    -        {
    -
    -            if (Utils.isDirectoryEmpty (newDir))
    -            {
    -
    -                UIUtils.showErrorMessage (this.projectViewer,
    -                                          "Unable to change backup directory to: " +
    -                                          newDir +
    -                                          ", directory is not empty.");
    -
    -                return;
    -
    -            }
    -
    -            // Do a trick, delete the directory then rename to it.
    -            if (newDir.exists ())
    -            {
    -
    -                newDir.delete ();
    -
    -            }
    -
    -            // Just rename it.
    -            if (!oldDir.renameTo (newDir))
    -            {
    -
    -                UIUtils.showErrorMessage (this.projectViewer,
    -                                          "Unable to change backup directory to: " +
    -                                          newDir);
    -
    -                return;
    -
    -            }
    -
    -            proj.setBackupDirectory (newDir);
    -
    -            UIUtils.showMessage ((PopupsSupported) this.projectViewer,
    -                                 "Backups directory changed",
    -                                 String.format ("The backups directory for the {project} has been changed to <b>%s</b>.",
    -                                                newDir.getPath ()));
    -
    -        }
    -
    -    }
    -
    -    private void addItemsAndRulesSection ()
    -    {
    -
    -        final OptionsPanel _this = this;
    -
    -        //box.add (this.createHeader ("Manage Items & Rules"));
    -        //box.add (Box.createVerticalStrut (10));
    -
    -        Box box = new Box (BoxLayout.Y_AXIS);
    -
    -        JButton[] buts = new JButton[ 3 ];
    -
    -        JButton b = new JButton (Environment.replaceObjectNames ("{Note} Types"));
    -
    -        b.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                ((ProjectViewer) _this.projectViewer).showEditNoteTypes ();
    -
    -            }
    -
    -        });
    -
    -        buts[0] = b;
    -
    -        b = new JButton ("Item Types");
    -
    -        b.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                ((ProjectViewer) _this.projectViewer).showEditItemTypes ();
    -
    -            }
    -
    -        });
    -
    -        buts[1] = b;
    -
    -        b = new JButton ("Problem Finder Rules");
    -
    -        b.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                _this.projectViewer.showProblemFinderRuleConfig ();
    -
    -            }
    -
    -        });
    -
    -        buts[2] = b;
    -
    -        JPanel bp = UIUtils.createButtonBar2 (buts,
    -                                              Component.LEFT_ALIGNMENT);//ButtonBarFactory.buildLeftAlignedBar (buts);
    -        bp.setOpaque (false);
    -
    -        JComponent c = this.createWrapper (bp);
    -
    -        this.setAsMainItem (c);
    -
    -        box.add (c);
    -
    -        this.setContentBorder (box);
    -
    -        this.accordion.add (this.createHeader (UIUtils.formatForUser ("Manage Items & Rules"),
    -                                               Constants.EDIT_ICON_NAME),
    -                            null,
    -                            box,
    -                            UIUtils.createHelpTextPane ("Set up the problem finder rules and manage the note and item types.  A dull description but it does exactly what it says on the tin, well screen.",
    -                                                        this.projectViewer));
    -
    -    }
    -
    -    private Header createHeader (String title)
    -    {
    -
    -        return this.createHeader (title,
    -                                  null);
    -
    -    }
    -
    -    private Header createHeader (String title,
    -                                 String iconType)
    -    {
    -
    -        Header h = UIUtils.createHeader (title,
    -                                         Constants.SUB_PANEL_TITLE,
    -                                         iconType,
    -                                         null);
    -
    -        h.setBorder (UIUtils.createBottomLineWithPadding (0, 0, 3, 0));
    -
    -        return h;
    -
    -    }
    -
    -    private void setAsMainItem (JComponent c)
    -    {
    -
    -        c.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        c.setAlignmentY (Component.TOP_ALIGNMENT);
    -
    -        c.setBorder (new CompoundBorder (new EmptyBorder (0, 5, 0, 10),
    -                                         c.getBorder ()));
    -
    -    }
    -
    -    private void setAsSubItem (JComponent c)
    -    {
    -
    -        c.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        c.setAlignmentY (Component.TOP_ALIGNMENT);
    -
    -        c.setBorder (new CompoundBorder (new EmptyBorder (0, 15, 0, 10),
    -                                         c.getBorder ()));
    -
    -    }
    -
    -    private void setAsSubItem2 (JComponent c)
    -    {
    -
    -        c.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        c.setAlignmentY (Component.TOP_ALIGNMENT);
    -
    -        c.setBorder (new CompoundBorder (new EmptyBorder (0, 20, 0, 10),
    -                                         c.getBorder ()));
    -
    -    }
    -
    -    private JComponent createWrapper (JComponent c)
    -    {
    -
    -        if ((c instanceof JComboBox)
    -            ||
    -            (c instanceof JCheckBox)
    -           )
    -        {
    -
    -            c.setMaximumSize (c.getPreferredSize ());
    -
    -        }
    -
    -        c.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        c.setAlignmentY (Component.TOP_ALIGNMENT);
    -
    -        if (!(c instanceof Box))
    -        {
    -
    -            Box _b = new Box (BoxLayout.X_AXIS);
    -            _b.add (Box.createHorizontalStrut (5));
    -            _b.add (c);
    -            _b.add (Box.createHorizontalGlue ());
    -            _b.setAlignmentX (Component.LEFT_ALIGNMENT);
    -            _b.setAlignmentY (Component.TOP_ALIGNMENT);
    -
    -            c = _b;
    -
    -        } else {
    -
    -            c.setBorder (new EmptyBorder (0, 5, 0, 0));
    -
    -        }
    -
    -        return c;
    -
    -    }
    -
    -    private JTextPane createHelpText (String text)
    -    {
    -
    -        JTextPane t = UIUtils.createHelpTextPane (text,
    -                                                  this.projectViewer);
    -        t.setBorder (new EmptyBorder (0,
    -                                      5,
    -                                      5,
    -                                      5));
    -
    -        return t;
    -
    -    }
    -
         public void fillPopupMenu (MouseEvent ev,
                                    JPopupMenu popup)
         {
    diff --git a/src/com/quollwriter/ui/panels/ProjectObjectQuollPanel.java b/src/com/quollwriter/ui/panels/ProjectObjectQuollPanel.java
    new file mode 100644
    index 0000000..cf15ae9
    --- /dev/null
    +++ b/src/com/quollwriter/ui/panels/ProjectObjectQuollPanel.java
    @@ -0,0 +1,152 @@
    +package com.quollwriter.ui.panels;
    +
    +import java.awt.*;
    +import java.awt.event.*;
    +
    +import java.io.*;
    +
    +import java.text.*;
    +
    +import java.util.ArrayList;
    +import java.util.List;
    +import java.util.Map;
    +
    +import javax.swing.*;
    +import javax.swing.border.*;
    +import javax.swing.event.*;
    +
    +import com.gentlyweb.properties.*;
    +
    +import com.jgoodies.forms.builder.*;
    +import com.jgoodies.forms.factories.*;
    +import com.jgoodies.forms.layout.*;
    +
    +import com.quollwriter.*;
    +
    +import com.quollwriter.data.*;
    +
    +import com.quollwriter.events.*;
    +
    +import com.quollwriter.ui.*;
    +import com.quollwriter.ui.actionHandlers.*;
    +
    +public abstract class ProjectObjectQuollPanel extends QuollPanel<AbstractProjectViewer>
    +{
    +
    +    public static final int UNSAVED_CHANGES_ACTION_EVENT = 0;
    +
    +    public static final int SAVED = 1;
    +
    +    public static final String HAS_CHANGES_COMMAND = "hasChanges";
    +    public static final String NO_CHANGES_COMMAND = "noChanges";
    +
    +    protected AbstractProjectViewer projectViewer = null;
    +
    +    protected Box                                   content = null;
    +    protected NamedObject                           obj = null;
    +    private java.util.List                          actionListeners = new ArrayList ();
    +    private java.util.List<PropertyChangedListener> propertyChangedListeners = new ArrayList ();
    +    private boolean                                 hasUnsavedChanges = false;
    +    private JToolBar                                toolBar = null;
    +    private boolean                                 readyForUse = false;
    +
    +    public ProjectObjectQuollPanel (AbstractProjectViewer pv,
    +                                    NamedObject           obj)
    +    {
    +
    +        super (pv);
    +
    +        // super (BoxLayout.PAGE_AXIS);
    +
    +        this.projectViewer = pv;
    +        this.obj = obj;
    +
    +    }
    +
    +    public abstract boolean saveUnsavedChanges ()
    +                                         throws Exception;
    +
    +    public abstract <T extends NamedObject> void refresh (T n);
    +
    +    public java.util.List<PropertyChangedListener> getObjectPropertyChangedListeners ()
    +    {
    +
    +        return this.propertyChangedListeners;
    +
    +    }
    +
    +    public void removeObjectPropertyChangedListener (PropertyChangedListener l)
    +    {
    +
    +        this.propertyChangedListeners.remove (l);
    +
    +    }
    +
    +    public void addObjectPropertyChangedListener (PropertyChangedListener l)
    +    {
    +
    +        this.propertyChangedListeners.add (l);
    +
    +        this.obj.addPropertyChangedListener (l);
    +
    +    }
    +
    +    public NamedObject getForObject ()
    +    {
    +
    +        return this.obj;
    +
    +    }
    +
    +    public void saveObject ()
    +                     throws Exception
    +    {
    +
    +        this.viewer.saveObject (this.obj,
    +                                true);
    +
    +        this.setHasUnsavedChanges (false);
    +
    +        // Fire an event to interested parties.
    +        this.fireActionEvent (new ActionEvent (this,
    +                                               QuollPanel.SAVED,
    +
    +                                               // QuollEditorPanel.CHAPTER_SAVED,
    +                                               "chapterSaved"));
    +
    +    }
    +
    +    @Override
    +    public String getPanelId ()
    +    {
    +
    +        return this.obj.getObjectReference ().asString ();
    +
    +    }
    +
    +    public boolean hasUnsavedChanges ()
    +    {
    +
    +        return this.hasUnsavedChanges;
    +
    +    }
    +
    +    protected void setHasUnsavedChanges (boolean hasChanges)
    +    {
    +
    +        this.hasUnsavedChanges = hasChanges;
    +
    +        this.fireActionEvent (new ActionEvent (this,
    +                                               QuollPanel.UNSAVED_CHANGES_ACTION_EVENT,
    +                                               (hasChanges ? QuollPanel.HAS_CHANGES_COMMAND : QuollPanel.NO_CHANGES_COMMAND)));
    +
    +    }
    +
    +    public AbstractProjectViewer getProjectViewer ()
    +    {
    +
    +        return this.projectViewer;
    +
    +    }
    +
    +}
    diff --git a/src/com/quollwriter/ui/panels/StatisticsPanel.java b/src/com/quollwriter/ui/panels/StatisticsPanel.java
    new file mode 100644
    index 0000000..eb080f1
    --- /dev/null
    +++ b/src/com/quollwriter/ui/panels/StatisticsPanel.java
    @@ -0,0 +1,441 @@
    +package com.quollwriter.ui.panels;
    +
    +import java.awt.Color;
    +import java.awt.Component;
    +import java.awt.Font;
    +import java.awt.Insets;
    +import java.awt.Dimension;
    +import java.awt.event.*;
    +
    +import java.text.*;
    +
    +import java.util.*;
    +
    +import javax.swing.*;
    +import javax.swing.border.*;
    +import javax.swing.event.*;
    +import javax.swing.tree.*;
    +
    +import com.quollwriter.*;
    +
    +import com.quollwriter.data.*;
    +
    +import com.quollwriter.db.*;
    +import com.quollwriter.ui.*;
    +import com.quollwriter.ui.components.ActionAdapter;
    +import com.quollwriter.ui.components.TabHeader;
    +import com.quollwriter.ui.components.Header;
    +import com.quollwriter.ui.components.Accordion;
    +import com.quollwriter.ui.components.ScrollableBox;
    +import com.quollwriter.ui.events.*;
    +import com.quollwriter.ui.renderers.*;
    +
    +import org.jfree.chart.*;
    +
    +import com.quollwriter.ui.charts.*;
    +
    +/**
    + * Maybe also output:
    + *
    + * http://en.wikipedia.org/wiki/SMOG_Index
    + * http://en.wikipedia.org/wiki/Automated_Readability_Index
    + * http://en.wikipedia.org/wiki/Gunning_fog_index
    + * http://en.wikipedia.org/wiki/Flesch-Kincaid_Readability_Test
    + * http://en.wikipedia.org/wiki/Coleman-Liau_Index
    + * Have a "Statistics" link?  "Readability" link?
    + *
    + * Online readability: http://www.online-utility.org/english/readability_test_and_improve.jsp
    + *
    + * See: RuleUtilities.getSyllableCountForWord.
    + */
    +public class StatisticsPanel extends BasicQuollPanel<AbstractViewer>
    +{
    +/*
    +    private static Map<String, Class> chartTypeMappings = new HashMap ();
    +
    +    static
    +    {
    +
    +        Map<String, Class> m = chartTypeMappings;
    +
    +        m.put (PerChapterWordCountsChart.CHART_TYPE,
    +               PerChapterWordCountsChart.class);
    +        m.put (AllWordCountsChart.CHART_TYPE,
    +               AllWordCountsChart.class);
    +        m.put (ReadabilityIndicesChart.CHART_TYPE,
    +               ReadabilityIndicesChart.class);
    +        m.put (SessionWordCountChart.CHART_TYPE,
    +               SessionWordCountChart.class);
    +        m.put (SessionTimeChart.CHART_TYPE,
    +               SessionTimeChart.class);
    +
    +    }
    +  */
    +    public static final String PANEL_ID = "statistics";
    +    public static final String OLD_WORD_COUNT_PANEL_ID = Project.WORDCOUNTS_OBJECT_TYPE;
    +
    +    private JSplitPane splitPane = null;
    +    private Box configPanel = null;
    +    private Box detailPanel = null;
    +    private ChartPanel chartPanel = null;
    +    private Map<String, QuollChart> charts = new LinkedHashMap ();
    +    private QuollChart currentChart = null;
    +    private JComboBox chartSelect = null;
    +
    +    public StatisticsPanel (AbstractViewer  pv,
    +                            QuollChart...   charts)
    +                     throws GeneralException
    +    {
    +
    +        super (pv,
    +               "Statistics",
    +               Constants.CHART_ICON_NAME);
    +
    +        if (charts == null)
    +        {
    +
    +            throw new GeneralException ("No charts provided.");
    +
    +        }
    +
    +        for (int i = 0; i < charts.length; i++)
    +        {
    +
    +            QuollChart c = charts[i];
    +
    +            this.charts.put (c.getType (),
    +                             c);
    +
    +        }
    +
    +    }
    +
    +    @Override
    +    public void init ()
    +               throws GeneralException
    +    {
    +
    +        super.init ();
    +
    +        for (QuollChart c : this.charts.values ())
    +        {
    +
    +            c.init (this);
    +
    +        }
    +
    +    }
    +
    +    @Override
    +    public boolean isWrapContentInScrollPane ()
    +    {
    +
    +        return false;
    +
    +    }
    +
    +    @Override
    +    public JComponent getContent ()
    +                           throws GeneralException
    +    {
    +
    +        final StatisticsPanel _this = this;
    +
    +        this.splitPane = new JSplitPane (JSplitPane.HORIZONTAL_SPLIT,
    +                                         false);
    +        this.splitPane.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        this.splitPane.setDividerSize (UIUtils.getSplitPaneDividerSize ());
    +        this.splitPane.setOpaque (false);
    +
    +        this.splitPane.setBorder (null);
    +
    +        Box b = new ScrollableBox (BoxLayout.Y_AXIS);
    +
    +        b.setBorder (UIUtils.createPadding (0, 5, 0, 0));
    +        b.setOpaque (false);
    +
    +        Header h = UIUtils.createHeader ("Show",
    +                                         Constants.SUB_PANEL_TITLE,
    +                                         null,
    +                                         null);
    +
    +        b.add (h);
    +
    +        b.add (Box.createVerticalStrut (5));
    +
    +        Vector<QuollChart> charts = new Vector ();
    +
    +        for (QuollChart c : this.charts.values ())
    +        {
    +
    +            charts.add (c);
    +
    +        }
    +
    +        this.chartSelect = new JComboBox (charts);
    +
    +        this.chartSelect.addActionListener (new ActionAdapter ()
    +        {
    +
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                QuollChart qc = (QuollChart) _this.chartSelect.getSelectedItem ();
    +
    +                String type = qc.getType ();
    +
    +                try
    +                {
    +
    +                    QuollChart chart = _this.charts.get (type);
    +
    +                    if (chart == null)
    +                    {
    +
    +                        Environment.logError ("Chart type: " + type + " not supported.");
    +
    +                        return;
    +
    +                    }
    +
    +                    _this.currentChart = chart;
    +
    +                    _this.updateChart (_this.currentChart.getChart (false),
    +                                       _this.currentChart.getDetail (false));
    +
    +                    _this.configPanel.removeAll ();
    +
    +                    _this.configPanel.add (_this.currentChart.getControls (false));
    +
    +                } catch (Exception e) {
    +
    +                    Environment.logError ("Unable to show chart of type: " + type,
    +                                          e);
    +
    +                    UIUtils.showErrorMessage (_this,
    +                                              "Unable to show chart.");
    +
    +                }
    +
    +            }
    +
    +        });
    +
    +        this.chartSelect.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        this.chartSelect.setAlignmentY (Component.TOP_ALIGNMENT);
    +        //this.chartSelect.setMaximumSize (chartSelect.getPreferredSize ());
    +
    +        Box db = new Box (BoxLayout.X_AXIS);
    +        db.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        db.add (Box.createHorizontalStrut (10));
    +
    +        db.add (this.chartSelect);
    +        db.setMaximumSize (db.getPreferredSize ());
    +
    +        b.add (db);
    +
    +        b.add (Box.createVerticalStrut (10));
    +
    +        this.configPanel = new Box (BoxLayout.Y_AXIS);
    +
    +        this.configPanel.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        this.configPanel.setBorder (UIUtils.createPadding (6,
    +                                                     6,
    +                                                     6,
    +                                                     6));
    +
    +        this.configPanel.setAlignmentY (Component.TOP_ALIGNMENT);
    +        b.add (this.configPanel);
    +
    +        this.detailPanel = new Box (BoxLayout.Y_AXIS);
    +        this.detailPanel.setAlignmentY (Component.TOP_ALIGNMENT);
    +        this.detailPanel.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        this.detailPanel.setMaximumSize (new Dimension (Short.MAX_VALUE,
    +                                                        Short.MAX_VALUE));
    +        b.add (this.detailPanel);
    +        b.add (Box.createVerticalGlue ());
    +
    +        JScrollPane sp = UIUtils.createScrollPane (b);
    +
    +        sp.setBorder (null);
    +
    +        this.splitPane.setLeftComponent (sp);
    +        sp.setMinimumSize (new Dimension (50, 200));
    +        sp.setPreferredSize (new Dimension (225, 200));
    +        this.splitPane.setRightComponent (this.chartPanel);
    +
    +        javax.swing.plaf.basic.BasicSplitPaneDivider div = ((javax.swing.plaf.basic.BasicSplitPaneUI) this.splitPane.getUI ()).getDivider ();
    +        div.setBorder (new MatteBorder (0, 0, 0, 1, UIUtils.getComponentColor ()));
    +
    +        return this.splitPane;
    +
    +    }
    +
    +    public void updateChart (JFreeChart chart)
    +    {
    +
    +        this.updateChart (chart,
    +                          null);
    +
    +    }
    +
    +    public void updateChart (JFreeChart chart,
    +                             JComponent detail)
    +    {
    +
    +        if (this.currentChart == null)
    +        {
    +
    +            return;
    +
    +        }
    +
    +        Box b = new Box (BoxLayout.Y_AXIS);
    +
    +        ChartPanel cp = new ChartPanel (chart, true);
    +        cp.setDisplayToolTips (true);
    +        cp.setAlignmentX (Component.LEFT_ALIGNMENT);
    +        cp.setOpaque (false);
    +
    +        cp.setPreferredSize (new Dimension (300,
    +                                            500));
    +        cp.setMaximumSize (new Dimension (Short.MAX_VALUE,
    +                                          Short.MAX_VALUE));
    +        cp.setBorder (UIUtils.createPadding (0, 0, 10, 0));
    +
    +        JScrollPane sp = UIUtils.createScrollPane (cp);
    +
    +        sp.setBorder (null);
    +
    +        this.setTitle ("Statistics - " + this.currentChart.getTitle ());
    +
    +        b.add (UIUtils.createHeader (Environment.replaceObjectNames (this.currentChart.getTitle ()),
    +                                     Constants.PANEL_TITLE,
    +                                     null,
    +                                     null));
    +        b.add (sp);
    +
    +        this.detailPanel.removeAll ();
    +
    +        if (detail != null)
    +        {
    +
    +            detail.setAlignmentX (Component.LEFT_ALIGNMENT);
    +            detail.setAlignmentY (Component.TOP_ALIGNMENT);
    +            detail.setOpaque (false);
    +            detail.setMaximumSize (new Dimension (Short.MAX_VALUE,
    +                                                  Short.MAX_VALUE));
    +
    +            this.detailPanel.add (UIUtils.createHeader ("Detail",
    +                                           Constants.PANEL_TITLE,
    +                                           null,
    +                                           null));
    +            this.detailPanel.add (detail);
    +
    +        }
    +
    +        this.splitPane.setRightComponent (sp);
    +
    +    }
    +
    +    public void showChart (String type)
    +                           throws GeneralException
    +    {
    +
    +        QuollChart chart = this.charts.get (type);
    +
    +        if (chart == null)
    +        {
    +
    +            Environment.logError ("Chart type: " + type + " not supported.");
    +
    +            return;
    +
    +        }
    +
    +        this.chartSelect.setSelectedItem (chart);
    +
    +    }
    +
    +    public void fillPopupMenu (MouseEvent ev,
    +                               JPopupMenu popup)
    +    {
    +
    +    }
    +
    +    public List<Component> getTopLevelComponents ()
    +    {
    +
    +        return new ArrayList ();
    +
    +    }
    +
    +    public void fillToolBar (JToolBar toolBar,
    +                             boolean  fullScreen)
    +    {
    +
    +    }
    +
    +    @Override
    +    public String getPanelId ()
    +    {
    +
    +        // Gonna regret this...
    +        return StatisticsPanel.PANEL_ID;
    +
    +    }
    +
    +    @Override
    +    public void setState (Map<String, String> s,
    +                          boolean             hasFocus)
    +    {
    +
    +        try
    +        {
    +
    +            int v = Integer.parseInt (s.get (Constants.SPLIT_PANE_DIVIDER_LOCATION_PROPERTY_NAME));
    +
    +            this.splitPane.setDividerLocation (v);
    +
    +        } catch (Exception e)
    +        {
    +
    +        }
    +
    +        this.setReadyForUse (true);
    +
    +    }
    +
    +    @Override
    +    public void getState (Map<String, Object> m)
    +    {
    +
    +        m.put (Constants.SPLIT_PANE_DIVIDER_LOCATION_PROPERTY_NAME,
    +               this.splitPane.getDividerLocation ());
    +
    +    }
    +
    +    @Override
    +    public String getTitle ()
    +    {
    +
    +        return "Statistics";
    +
    +    }
    +
    +    @Override
    +    public String getIconType ()
    +    {
    +
    +        return Constants.CHART_ICON_NAME;
    +
    +    }
    +
    +    @Override
    +    public void close ()
    +    {
    +
    +
    +    }
    +
    +}
    diff --git a/src/com/quollwriter/ui/panels/Timeline.java b/src/com/quollwriter/ui/panels/Timeline.java
    index 4b3ca52..5cd57d1 100644
    --- a/src/com/quollwriter/ui/panels/Timeline.java
    +++ b/src/com/quollwriter/ui/panels/Timeline.java
    @@ -44,7 +44,7 @@ import com.quollwriter.ui.components.DragEvent;
     import com.quollwriter.ui.components.ImagePanel;
     import com.quollwriter.ui.components.ActionAdapter;
    
    -public class Timeline extends QuollPanel
    +public class Timeline extends QuollPanel<AbstractViewer>
     {
    
         public static final String SCALE_WEEKLY = "weekly";
    @@ -76,12 +76,11 @@ public class Timeline extends QuollPanel
         private String superFormat = null;
         private boolean dragInProgress = false;
    
    -    public Timeline (AbstractProjectViewer pv)
    -                     throws                GeneralException
    +    public Timeline (AbstractViewer pv)
    +              throws GeneralException
         {
    
    -        super (pv,
    -               null);
    +        super (pv);
    
             String df = "";
    
    @@ -766,27 +765,30 @@ public class Timeline extends QuollPanel
             this.main.addMouseMotionListener (mouseA);
             this.main.addMouseListener (mouseA);
    
    -        this.scrollPane = new JScrollPane (this.main);
    -        this.scrollPane.setBorder (null);
    -        this.scrollPane.getVerticalScrollBar ().setUnitIncrement (20);
    +        //this.scrollPane = new JScrollPane (this.main);
    +        //this.scrollPane.setBorder (null);
    +        //this.scrollPane.getVerticalScrollBar ().setUnitIncrement (20);
             //this.scrollPane.setHorizontalScrollBarPolicy (JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
    
    -        this.add (this.scrollPane);
    -/*
    -        JViewport vp = this.scrollPane.getViewport ();
    +        //this.add (this.scrollPane);
    +
    +        JViewport vp = new JViewport (); //this.scrollPane.getViewport ();
    
    -        ViewportDragScrollListener vl = new ViewportDragScrollListener (this.main);
    +        //ViewportDragScrollListener vl = new ViewportDragScrollListener (this.main);
    +
    +        //vp.addMouseMotionListener (vl);
    +        //vp.addMouseListener (vl);
    +        //vp.addHierarchyListener (vl);
    +
    +        vp.setView (this.main);
    
    -        vp.addMouseMotionListener (vl);
    -        vp.addMouseListener (vl);
    -        vp.addHierarchyListener (vl);
    -*/
    -/*
             ComponentDragScrollListener cl = new ComponentDragScrollListener (this.main);
             main.addMouseMotionListener (cl);
             main.addMouseListener (cl);
             main.addHierarchyListener (cl);
    -*/
    +
    +        this.add (vp);
    +
             TimelineThread tt1 = new TimelineThread ("Ben and Sam to out", this.getDate ("03 Apr 2012"), this.getDate ("08 Apr 2012"), this);
             TimelineThread tt2 = new TimelineThread ("Sam gets beaten up", this.getDate ("10 Apr 2012"), this.getDate ("12 Apr 2012"), this);
    
    @@ -904,7 +906,7 @@ public class Timeline extends QuollPanel
    
             subBox.add (Box.createHorizontalGlue ());
    
    -        this.scrollPane.setColumnHeaderView (headerBox);
    +        //this.scrollPane.setColumnHeaderView (headerBox);
    
         }
    
    @@ -1046,14 +1048,6 @@ System.out.println ("DX: " + sd);
    
         }
    
    -    public boolean saveUnsavedChanges ()
    -                                       throws Exception
    -    {
    -
    -        return false;
    -
    -    }
    -
         public String getTitle ()
         {
    
    @@ -1178,7 +1172,7 @@ System.out.println ("DX: " + sd);
                 SimpleDateFormat sdf = new SimpleDateFormat ("HH:mm:ss dd MMM yyyy");
    
                 this.setContent (UIUtils.createHelpTextPane ((this.startDate != null ? sdf.format (this.startDate) : "") + " : " + (this.endDate != null ? sdf.format (this.endDate) : ""),
    -                                                         Timeline.this.projectViewer));
    +                                                         Timeline.this.viewer));
    
             }
    
    diff --git a/src/com/quollwriter/ui/panels/WordCloudPanel.java b/src/com/quollwriter/ui/panels/WordCloudPanel.java
    index adb09f0..43380e4 100644
    --- a/src/com/quollwriter/ui/panels/WordCloudPanel.java
    +++ b/src/com/quollwriter/ui/panels/WordCloudPanel.java
    @@ -24,17 +24,16 @@ import com.quollwriter.ui.whatsnewcomps.*;
     import com.quollwriter.ui.components.Header;
     import com.quollwriter.ui.components.ActionAdapter;
    
    -public class WordCloudPanel extends QuollPanel
    +public class WordCloudPanel extends QuollPanel<AbstractViewer>
     {
    
         public static final String PANEL_ID = "wordcloud";
    
    -    public WordCloudPanel (AbstractProjectViewer pv)
    -                           throws                Exception
    +    public WordCloudPanel (AbstractViewer pv)
    +                    throws Exception
         {
    
    -        super (pv,
    -               null);
    +        super (pv);
     /*
      *For a future version
             Header h = UIUtils.createHeader ("Your Word Cloud",
    diff --git a/src/com/quollwriter/ui/panels/WordCountPanel.java b/src/com/quollwriter/ui/panels/WordCountPanel.java
    deleted file mode 100644
    index f04782e..0000000
    --- a/src/com/quollwriter/ui/panels/WordCountPanel.java
    +++ /dev/null
    @@ -1,629 +0,0 @@
    -package com.quollwriter.ui.panels;
    -
    -import java.awt.Color;
    -import java.awt.Component;
    -import java.awt.Font;
    -import java.awt.Insets;
    -import java.awt.Dimension;
    -import java.awt.event.*;
    -
    -import java.text.*;
    -
    -import java.util.*;
    -
    -import javax.swing.*;
    -import javax.swing.border.*;
    -import javax.swing.event.*;
    -import javax.swing.tree.*;
    -
    -import com.quollwriter.*;
    -
    -import com.quollwriter.data.*;
    -
    -import com.quollwriter.db.*;
    -import com.quollwriter.ui.*;
    -import com.quollwriter.ui.components.ActionAdapter;
    -import com.quollwriter.ui.components.TabHeader;
    -import com.quollwriter.ui.components.Header;
    -import com.quollwriter.ui.events.*;
    -import com.quollwriter.ui.renderers.*;
    -
    -import org.jfree.chart.*;
    -
    -import com.quollwriter.ui.charts.*;
    -
    -/**
    - * Maybe also output:
    - *
    - * http://en.wikipedia.org/wiki/SMOG_Index
    - * http://en.wikipedia.org/wiki/Automated_Readability_Index
    - * http://en.wikipedia.org/wiki/Gunning_fog_index
    - * http://en.wikipedia.org/wiki/Flesch-Kincaid_Readability_Test
    - * http://en.wikipedia.org/wiki/Coleman-Liau_Index
    - * Have a "Statistics" link?  "Readability" link?
    - *
    - * Online readability: http://www.online-utility.org/english/readability_test_and_improve.jsp
    - *
    - * See: RuleUtilities.getSyllableCountForWord.
    - */
    -public class WordCountPanel extends QuollPanel
    -{
    -
    -    private static Map<String, Class> chartTypeMappings = new HashMap ();
    -
    -    static
    -    {
    -
    -        Map<String, Class> m = chartTypeMappings;
    -
    -        m.put (PerChapterWordCountsChart.CHART_TYPE,
    -               PerChapterWordCountsChart.class);
    -        m.put (AllWordCountsChart.CHART_TYPE,
    -               AllWordCountsChart.class);
    -
    -    }
    -
    -    public static final String PANEL_ID = Project.WORDCOUNTS_OBJECT_TYPE;
    -
    -    private JSplitPane splitPane = null;
    -    private Box configPanel = null;
    -    private ChartPanel chartPanel = null;
    -    private Map<String, QuollChart> charts = new HashMap ();
    -    private QuollChart currentChart = null;
    -
    -    public WordCountPanel(AbstractProjectViewer pv,
    -                          Project               p)
    -                   throws GeneralException
    -    {
    -
    -        super (pv,
    -               p);
    -
    -        final WordCountPanel _this = this;
    -
    -        this.splitPane = new JSplitPane (JSplitPane.HORIZONTAL_SPLIT,
    -                                         false);
    -        this.splitPane.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        this.splitPane.setDividerSize (UIUtils.getSplitPaneDividerSize ());
    -        this.splitPane.setOpaque (false);
    -
    -        this.splitPane.setBorder (null);
    -
    -        Box b = new Box (BoxLayout.Y_AXIS);
    -
    -        b.setOpaque (false);
    -        b.setBorder (new EmptyBorder (0,
    -                                      7,
    -                                      10,
    -                                      0));
    -
    -
    -        Header h = UIUtils.createHeader ("Show",
    -                                         Constants.SUB_PANEL_TITLE,
    -                                         null,
    -                                         null);
    -
    -        b.add (h);
    -
    -        b.add (Box.createVerticalStrut (5));
    -
    -        Vector<QuollChart> charts = new Vector ();
    -        charts.add (new PerChapterWordCountsChart ());
    -        charts.add (new AllWordCountsChart ());
    -
    -        final JComboBox chartSelect = new JComboBox (charts);
    -
    -        chartSelect.addActionListener (new ActionAdapter ()
    -        {
    -
    -            public void actionPerformed (ActionEvent ev)
    -            {
    -
    -                QuollChart qc = (QuollChart) chartSelect.getSelectedItem ();
    -
    -                try
    -                {
    -
    -                    _this.showChart (qc.getType ());
    -
    -                } catch (Exception e) {
    -
    -                    Environment.logError ("Unable to show chart of type: " + qc.getType (),
    -                                          e);
    -
    -                    UIUtils.showErrorMessage (_this,
    -                                              "Unable to show chart.");
    -
    -                }
    -
    -            }
    -
    -        });
    -
    -        chartSelect.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        chartSelect.setAlignmentY (Component.TOP_ALIGNMENT);
    -        chartSelect.setMaximumSize (chartSelect.getPreferredSize ());
    -
    -        Box db = new Box (BoxLayout.X_AXIS);
    -        db.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        db.add (Box.createHorizontalStrut (10));
    -
    -        db.add (chartSelect);
    -        db.setMaximumSize (db.getPreferredSize ());
    -
    -        b.add (db);
    -
    -        b.add (Box.createVerticalStrut (10));
    -
    -        this.configPanel = new Box (BoxLayout.Y_AXIS);
    -
    -        this.configPanel.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        this.configPanel.setBorder (new EmptyBorder (6,
    -                                                     6,
    -                                                     6,
    -                                                     6));
    -        this.configPanel.setMaximumSize (new Dimension (Short.MAX_VALUE,
    -                                                        Short.MAX_VALUE));
    -        this.configPanel.setAlignmentY (Component.TOP_ALIGNMENT);
    -        b.add (this.configPanel);
    -
    -        this.configPanel.setMinimumSize (new Dimension (250,
    -                                                        300));
    -
    -        //b.add (Box.createVerticalGlue ());
    -
    -        JScrollPane lscroll = new JScrollPane (b);
    -        lscroll.setBorder (null);
    -        lscroll.setOpaque (false);
    -        lscroll.getViewport ().setBorder (null);
    -        lscroll.getViewport ().setOpaque (false);
    -        lscroll.getVerticalScrollBar ().setUnitIncrement (20);
    -        lscroll.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        lscroll.setMinimumSize (new Dimension (250, 300));
    -
    -/*
    -        b.setMaximumSize (new Dimension (Short.MAX_VALUE,
    -                                               Short.MAX_VALUE));
    -*/
    -        this.splitPane.setLeftComponent (lscroll);
    -
    -        this.splitPane.setRightComponent (this.chartPanel);
    -
    -        this.add (this.splitPane,
    -                  0);
    -
    -    }
    -
    -    public QuollChart getChart (String type)
    -                                throws GeneralException
    -    {
    -
    -        QuollChart ch = this.charts.get (type);
    -
    -        if (ch != null)
    -        {
    -
    -            return ch;
    -
    -        }
    -
    -        Class c = WordCountPanel.chartTypeMappings.get (type);
    -
    -        if (c == null)
    -        {
    -
    -            return null;
    -
    -        }
    -
    -        try
    -        {
    -
    -            // Get a new instance.
    -            ch = (QuollChart) c.newInstance ();
    -
    -            ch.init (this.projectViewer,
    -                     this);
    -
    -        } catch (Exception e) {
    -
    -            throw new GeneralException ("Unable to create/init: " +
    -                                        c.getName () +
    -                                        " for type: " +
    -                                        type,
    -                                        e);
    -
    -        }
    -
    -        this.charts.put (type,
    -                         ch);
    -
    -        return ch;
    -
    -    }
    -
    -    public void updateChart (JFreeChart chart)
    -    {
    -
    -        ChartPanel p = new ChartPanel (chart, true);
    -        p.setDisplayToolTips (true);
    -        p.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        Box b = new Box (BoxLayout.Y_AXIS);
    -        b.setOpaque (false);
    -
    -        b.add (UIUtils.createHeader (Environment.replaceObjectNames (this.currentChart.getTitle ()),
    -                                     Constants.PANEL_TITLE,
    -                                     null, //this.currentChart.getIconType (),
    -                                     null));
    -
    -        b.add (p);
    -
    -        p.setOpaque (false);
    -        p.setBorder (new EmptyBorder (5, 5, 10, 5));
    -
    -        this.splitPane.setRightComponent (b);
    -
    -    }
    -
    -    public void showChart (String type)
    -                           throws GeneralException
    -    {
    -
    -        QuollChart chart = this.getChart (type);
    -
    -        if (chart == null)
    -        {
    -
    -            Environment.logError ("Chart type: " + type + " not supported.");
    -
    -            return;
    -
    -        }
    -
    -        this.currentChart = chart;
    -
    -        this.updateChart (this.currentChart.getChart ());
    -
    -        this.configPanel.removeAll ();
    -
    -        this.configPanel.add (this.currentChart.getControls ());
    -
    -    }
    -
    -/*
    -    public EditPanel getAllWordCountsChart (Project p)
    -                                     throws GeneralException
    -    {
    -
    -        final WordCountPanel _this = this;
    -
    -        final ChartPanel cp = new ChartPanel (null);
    -
    -        cp.setOpaque (false);
    -
    -        cp.setBorder (null);
    -
    -        return new EditPanel (false)
    -        {
    -
    -            public void refreshViewPanel ()
    -            {
    -
    -            }
    -
    -            public String getTitle ()
    -            {
    -
    -                return "Total Word Counts";
    -
    -            }
    -
    -            public String getHelpText ()
    -            {
    -
    -                return "";
    -
    -            }
    -
    -            public JComponent getEditPanel ()
    -            {
    -
    -                return null;
    -
    -            }
    -
    -            public JComponent getViewPanel ()
    -            {
    -
    -                Box b = new Box (BoxLayout.X_AXIS);
    -                b.setBackground (Color.WHITE);
    -                b.setOpaque (true);
    -
    -                b.add (cp);
    -
    -                b.add (Box.createHorizontalStrut (5));
    -
    -                Box bb = new Box (BoxLayout.Y_AXIS);
    -                bb.setBorder (new EmptyBorder (5,
    -                                               5,
    -                                               5,
    -                                               5));
    -                bb.setOpaque (false);
    -                b.add (bb);
    -
    -                Header h = UIUtils.createBoldSubHeader ("Display",
    -                                                        null);
    -                h.setAlignmentY (Component.TOP_ALIGNMENT);
    -
    -                bb.add (h);
    -
    -                Vector displayItems = new Vector ();
    -                displayItems.add ("Past 7 days");
    -                displayItems.add ("Past 30 days");
    -                displayItems.add ("Past 3 months");
    -                displayItems.add ("All");
    -
    -                bb.add (Box.createVerticalStrut (5));
    -
    -                final JComboBox displayB = new JComboBox (displayItems);
    -                displayB.setAlignmentX (Component.LEFT_ALIGNMENT);
    -                displayB.setMaximumSize (displayB.getPreferredSize ());
    -                displayB.setAlignmentY (Component.TOP_ALIGNMENT);
    -
    -                displayB.addActionListener (new ActionAdapter ()
    -                    {
    -
    -                        public void actionPerformed (ActionEvent ev)
    -                        {
    -
    -                            int days = 0;
    -
    -                            if (displayB.getSelectedIndex () == 0)
    -                            {
    -
    -                                days = -7;
    -
    -                            }
    -
    -                            if (displayB.getSelectedIndex () == 1)
    -                            {
    -
    -                                days = -30;
    -
    -                            }
    -
    -                            if (displayB.getSelectedIndex () == 2)
    -                            {
    -
    -                                days = -90;
    -
    -                            }
    -
    -                            final TimeSeriesCollection tsc = new TimeSeriesCollection ();
    -
    -                            try
    -                            {
    -
    -                                TimeSeries ts = new TimeSeries ("Date");
    -
    -                                ProjectDataHandler pdh = (ProjectDataHandler) _this.projectViewer.getDataHandler (Project.OBJECT_TYPE);
    -
    -                                // Get all the word counts for the project.
    -                                List<WordCount> wordCounts = pdh.getWordCounts (_this.projectViewer.getProject (),
    -                                                                                days);
    -
    -                                for (WordCount wc : wordCounts)
    -                                {
    -
    -                                    if (ts.getValue (new Day (wc.getEnd ())) == null)
    -                                    {
    -
    -                                        ts.add (new Day (wc.getEnd ()),
    -                                                wc.getCount ());
    -
    -                                    }
    -
    -                                }
    -
    -                                ts.setRangeDescription (null);
    -                                tsc.addSeries (ts);
    -
    -                            } catch (Exception e)
    -                            {
    -
    -                                Environment.logError ("Unable to get word counts",
    -                                                      e);
    -
    -                                UIUtils.showErrorMessage (_this,
    -                                                          "Unable to word counts");
    -
    -                                return;
    -
    -                            }
    -
    -                            // tsc.setXPosition (TimePeriodAnchor.MIDDLE);
    -
    -                            cp.setChart (_this.createChart ("Date",
    -                                                            "Word Count",
    -                                                            tsc));
    -
    -                        }
    -
    -                    });
    -
    -                displayB.setSelectedIndex (0);
    -
    -                Box db = new Box (BoxLayout.X_AXIS);
    -                db.setAlignmentX (Component.LEFT_ALIGNMENT);
    -                db.setAlignmentY (Component.TOP_ALIGNMENT);
    -
    -                db.add (Box.createHorizontalStrut (5));
    -
    -                db.add (displayB);
    -
    -                bb.add (db);
    -
    -                bb.add (Box.createVerticalStrut (10));
    -
    -                JComponent c = (JComponent) Box.createVerticalGlue ();
    -                c.setOpaque (false);
    -                bb.add (c);
    -
    -                return b;
    -
    -            }
    -
    -            public java.util.List<FormItem> getEditItems ()
    -            {
    -
    -                return null;
    -
    -            }
    -
    -            public java.util.List<FormItem> getViewItems ()
    -            {
    -
    -                return null;
    -
    -            }
    -
    -            public boolean handleSave ()
    -            {
    -
    -                return true;
    -
    -            }
    -
    -            public boolean handleCancel ()
    -            {
    -
    -                return true;
    -
    -            }
    -
    -            public void handleEditStart ()
    -            {
    -
    -            }
    -
    -            public IconProvider getIconProvider ()
    -            {
    -
    -                DefaultIconProvider iconProv = new DefaultIconProvider ();
    -                iconProv.putIcon ("header",
    -                                  Book.OBJECT_TYPE);
    -
    -                return iconProv;
    -
    -            }
    -
    -        };
    -
    -    }
    -*/
    -    public void init ()
    -                      throws GeneralException
    -    {
    -
    -        this.showChart (PerChapterWordCountsChart.CHART_TYPE);
    -
    -    }
    -
    -    public void fillPopupMenu (MouseEvent ev,
    -                               JPopupMenu popup)
    -    {
    -
    -    }
    -
    -    public List<Component> getTopLevelComponents ()
    -    {
    -
    -        return new ArrayList ();
    -
    -    }
    -
    -    public <T extends NamedObject> void refresh (T n)
    -    {
    -
    -
    -    }
    -
    -    public void fillToolBar (JToolBar toolBar,
    -                             boolean  fullScreen)
    -    {
    -
    -    }
    -
    -    public boolean saveUnsavedChanges ()
    -                                throws Exception
    -    {
    -
    -        return true;
    -
    -    }
    -
    -    public String getPanelId ()
    -    {
    -
    -        // Gonna regret this...
    -        return Project.WORDCOUNTS_OBJECT_TYPE;
    -
    -        /*
    -            ObjectReference r = new ObjectReference (Project.WORDCOUNTS_OBJECT_TYPE,
    -                                                     this.obj.getKey (),
    -                                                     null);
    -
    -            return r.asString ();
    -         */
    -    }
    -
    -    public void setState (Map<String, String> s,
    -                          boolean             hasFocus)
    -    {
    -
    -        try
    -        {
    -
    -            int v = Integer.parseInt (s.get (Constants.SPLIT_PANE_DIVIDER_LOCATION_PROPERTY_NAME));
    -
    -            this.splitPane.setDividerLocation (v);
    -
    -        } catch (Exception e)
    -        {
    -
    -        }
    -
    -        this.setReadyForUse (true);
    -
    -    }
    -
    -    public void getState (Map<String, Object> m)
    -    {
    -
    -        m.put (Constants.SPLIT_PANE_DIVIDER_LOCATION_PROPERTY_NAME,
    -               this.splitPane.getDividerLocation ());
    -
    -    }
    -
    -    public String getTitle ()
    -    {
    -
    -        return "Statistics";
    -
    -    }
    -
    -    public String getIconType ()
    -    {
    -
    -        return "chart";
    -
    -    }
    -
    -    @Override
    -    public void close ()
    -    {
    -
    -
    -    }
    -
    -}
    diff --git a/src/com/quollwriter/ui/sidebars/AbstractSideBar.java b/src/com/quollwriter/ui/sidebars/AbstractSideBar.java
    index 3d00946..17ac22f 100644
    --- a/src/com/quollwriter/ui/sidebars/AbstractSideBar.java
    +++ b/src/com/quollwriter/ui/sidebars/AbstractSideBar.java
    @@ -192,7 +192,7 @@ public abstract class AbstractSideBar<V extends AbstractViewer> extends Scrollab
             if (c.getBorder () == null)
             {
    
    -            c.setBorder (new EmptyBorder (0, 5, 0, 0));
    +            c.setBorder (UIUtils.createPadding (0, 5, 0, 0));
    
             }
    
    @@ -251,10 +251,13 @@ public abstract class AbstractSideBar<V extends AbstractViewer> extends Scrollab
    
             }
    
    +        JComponent _buts = UIUtils.createButtonBar (buts);
    +        _buts.setBorder (UIUtils.createPadding (0, 0, 0, 3));
    +
             Header h = UIUtils.createHeader (t,
                                              Constants.SUB_PANEL_TITLE,
                                              this.getIconType (),
    -                                         UIUtils.createButtonBar (buts));
    +                                         _buts);
    
             this.header = h;
    
    @@ -278,7 +281,7 @@ public abstract class AbstractSideBar<V extends AbstractViewer> extends Scrollab
             if (c.getBorder () == null)
             {
    
    -            c.setBorder (new EmptyBorder (0, 0, 0, 5));
    +            c.setBorder (UIUtils.createPadding (0, 0, 0, 5));
    
             }
    
    @@ -286,7 +289,7 @@ public abstract class AbstractSideBar<V extends AbstractViewer> extends Scrollab
    
             sp.setOpaque (false);
             sp.setAlignmentX (Component.LEFT_ALIGNMENT);
    -        sp.setBorder (new EmptyBorder (0, 5, 0, 0));
    +        sp.setBorder (UIUtils.createPadding (0, 5, 0, 0));
             sp.getViewport ().setOpaque (false);
             sp.getVerticalScrollBar ().setUnitIncrement (20);
    
    diff --git a/src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java b/src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java
    index 17421ae..bef2f08 100644
    --- a/src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java
    +++ b/src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java
    @@ -47,6 +47,7 @@ import com.quollwriter.ui.components.QTextEditor;
     import com.quollwriter.ui.components.QPopup;
     import com.quollwriter.ui.components.ChangeAdapter;
     import com.quollwriter.ui.components.TextProperties;
    +import com.quollwriter.ui.components.Accordion;
    
     public class FullScreenPropertiesSideBar extends AbstractSideBar<AbstractProjectViewer> implements MainPanelListener
     {
    @@ -72,14 +73,13 @@ public class FullScreenPropertiesSideBar extends AbstractSideBar<AbstractProject
         private int                  sblastX = -1;
         private int                  sblastY = -1;
    
    -    private AccordionItem        textProps = null;
         private TextPropertiesEditPanel textPropsEditPanel = null;
    
         public FullScreenPropertiesSideBar (FullScreenFrame             fsf,
                                             FullScreenTextProperties    props)
         {
    
    -        super (fsf.getPanel ().getProjectViewer ());
    +        super (fsf.getProjectViewer ());
    
             this.fsf = fsf;
    
    @@ -187,7 +187,7 @@ public class FullScreenPropertiesSideBar extends AbstractSideBar<AbstractProject
    
                 p.initEditor (this.fullScreenTextProperties);
    
    -            this.textProps.setVisible (true);
    +            this.textPropsEditPanel.setVisible (true);
    
                 this.validate ();
    
    @@ -195,7 +195,7 @@ public class FullScreenPropertiesSideBar extends AbstractSideBar<AbstractProject
    
             } else {
    
    -            this.textProps.setVisible (false);
    +            this.textPropsEditPanel.setVisible (false);
    
             }
    
    @@ -206,7 +206,7 @@ public class FullScreenPropertiesSideBar extends AbstractSideBar<AbstractProject
    
             final Dimension d = Toolkit.getDefaultToolkit ().getScreenSize ();
    
    -        Box cp = this.createPropertiesPanel ();
    +        JComponent cp = this.createPropertiesPanel ();
    
             this.setSizeBoxSize ();
    
    @@ -216,20 +216,22 @@ public class FullScreenPropertiesSideBar extends AbstractSideBar<AbstractProject
    
         }
    
    -    private Box createPropertiesPanel ()
    +    private JComponent createPropertiesPanel ()
         {
    
             final FullScreenPropertiesSideBar _this = this;
    
             final Project proj = this.viewer.getProject ();
    
    +        Accordion acc = new Accordion (BoxLayout.Y_AXIS);
    +
             // Create a box that will be the container for the chapters/properties.
             Box b = new Box (BoxLayout.Y_AXIS);
             b.setAlignmentX (Component.LEFT_ALIGNMENT);
             b.setBorder (new EmptyBorder (5, 5, 0, 0));
    
    -        JLabel l = new JLabel ("Background image/color");
    -        l.setBorder (new EmptyBorder (5, 10, 0, 0));
    +        JLabel l = UIUtils.createLabel ("Background image/color");
    +        l.setBorder (UIUtils.createPadding (5, 10, 0, 0));
    
             l.setAlignmentX (JComponent.LEFT_ALIGNMENT);
    
    @@ -719,15 +721,49 @@ public class FullScreenPropertiesSideBar extends AbstractSideBar<AbstractProject
             sizeBoxW.add (sizeBoxW2);
             sizeBoxW.add (Box.createVerticalGlue ());
             sizeBoxW.setAlignmentX (JComponent.LEFT_ALIGNMENT);
    -        sizeBoxW.setBorder (new EmptyBorder (0, 20, 0, 0));
    +        sizeBoxW.setBorder (UIUtils.createPadding (0, 20, 0, 0));
             sizeBoxW.setMaximumSize (new Dimension (sizeBoxW.getPreferredSize ().width + 20,
                                                     sizeBoxW.getPreferredSize ().height));
             b.add (sizeBoxW);
    
    -        b.add (Box.createVerticalStrut (20));
    +        b.add (Box.createVerticalStrut (10));
    +
    +        final JCheckBox s = UIUtils.createCheckBox ("Always show the time and word count",
    +                                                    null);
    +
    +        s.setBorder (UIUtils.createPadding (5, 10, 0, 0));
    
    -        this.textProps = new AccordionItem ("Text Properties",
    -                                            null);
    +        s.setSelected (Environment.getUserProperties ().getPropertyAsBoolean (Constants.FULL_SCREEN_SHOW_TIME_WORD_COUNT_PROPERTY_NAME));
    +
    +        s.addActionListener (new ActionListener ()
    +        {
    +
    +            @Override
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                // TODO: Create a property wrapper or property that allows for this.
    +                try
    +                {
    +
    +                    Environment.setUserProperty (Constants.FULL_SCREEN_SHOW_TIME_WORD_COUNT_PROPERTY_NAME,
    +                                 new BooleanProperty (Constants.FULL_SCREEN_SHOW_TIME_WORD_COUNT_PROPERTY_NAME,
    +                                                      s.isSelected ()));
    +
    +                } catch (Exception e) {
    +
    +                    Environment.logError ("Unable to update user property",
    +                                          e);
    +
    +                }
    +
    +            }
    +
    +        });
    +
    +        b.add (s);
    +
    +        b.add (Box.createVerticalStrut (10));
    
             this.textPropsEditPanel = new TextPropertiesEditPanel (this.fsf.getProjectViewer (),
                                                                    this.fullScreenTextProperties,
    @@ -748,12 +784,10 @@ public class FullScreenPropertiesSideBar extends AbstractSideBar<AbstractProject
             };
    
             this.textPropsEditPanel.init ();
    +
    +        this.textPropsEditPanel.setVisible ((this.fsf.getPanel ().getChild () instanceof AbstractEditorPanel));
    
    -        this.textProps.setContent (this.textPropsEditPanel);
    -
    -        this.textProps.setVisible ((this.fsf.getPanel ().getChild () instanceof AbstractEditorPanel));
    -
    -        b.add (this.textProps);
    +        b.add (this.textPropsEditPanel);
    
             b.add (Box.createVerticalGlue ());
    
    @@ -806,8 +840,8 @@ public class FullScreenPropertiesSideBar extends AbstractSideBar<AbstractProject
    
             this.backgroundOpacity.setValue ((int) (this.fsf.getBorderOpacity () * 100));
    
    -
         }
    +
         public void displayAreaSizeChanged ()
         {
    
    diff --git a/src/com/quollwriter/ui/sidebars/ProjectSideBar.java b/src/com/quollwriter/ui/sidebars/ProjectSideBar.java
    index f6e5c5a..315edd2 100644
    --- a/src/com/quollwriter/ui/sidebars/ProjectSideBar.java
    +++ b/src/com/quollwriter/ui/sidebars/ProjectSideBar.java
    @@ -141,7 +141,7 @@ public class ProjectSideBar extends AbstractSideBar<ProjectViewer>
         public void panelShown (MainPanelEvent ev)
         {
    
    -        this.setObjectSelectedInSidebar (ev.getPanel ().getForObject ());
    +        this.setObjectSelectedInSidebar (ev.getForObject ());
    
         }
    
    diff --git a/src/com/quollwriter/ui/sidebars/TargetsSideBar.java b/src/com/quollwriter/ui/sidebars/TargetsSideBar.java
    new file mode 100644
    index 0000000..dad2453
    --- /dev/null
    +++ b/src/com/quollwriter/ui/sidebars/TargetsSideBar.java
    @@ -0,0 +1,122 @@
    +package com.quollwriter.ui.sidebars;
    +
    +import java.awt.Dimension;
    +import java.awt.Component;
    +
    +import java.util.List;
    +import java.util.ArrayList;
    +import java.util.Map;
    +
    +import javax.swing.*;
    +import javax.swing.text.*;
    +import javax.swing.tree.*;
    +import javax.swing.border.*;
    +
    +import com.quollwriter.*;
    +import com.quollwriter.data.*;
    +import com.quollwriter.ui.*;
    +import com.quollwriter.ui.components.ScrollableBox;
    +
    +public class TargetsSideBar extends AbstractSideBar<AbstractViewer>
    +{
    +
    +    private Targets targets = null;
    +
    +    public TargetsSideBar (AbstractViewer v)
    +    {
    +
    +        super (v);
    +
    +    }
    +
    +    public String getIconType ()
    +    {
    +
    +        return Constants.TARGET_ICON_NAME;
    +
    +    }
    +
    +    public String getActiveTitle ()
    +    {
    +
    +        return "Targets";
    +    }
    +
    +    public String getTitle ()
    +    {
    +
    +        return this.getActiveTitle ();
    +
    +    }
    +
    +    public boolean removeOnClose ()
    +    {
    +
    +        return false;
    +
    +    }
    +
    +    public boolean canClose ()
    +    {
    +
    +        return true;
    +
    +    }
    +
    +    @Override
    +    public void onShow ()
    +    {
    +
    +    }
    +
    +    @Override
    +    public void onHide ()
    +    {
    +
    +    }
    +
    +    @Override
    +    public void onClose ()
    +    {
    +
    +    }
    +
    +    @Override
    +    public List<JComponent> getHeaderControls ()
    +    {
    +
    +        java.util.List<JComponent> buts = new ArrayList ();
    +
    +        buts.add (UIUtils.createHelpPageButton ("project/targets",
    +                                                Constants.ICON_PANEL_ACTION,
    +                                                null));
    +
    +        return buts;
    +
    +    }
    +
    +    /**
    +     * Always 250, 250.
    +     */
    +    @Override
    +    public Dimension getMinimumSize ()
    +    {
    +
    +        return new Dimension (275,
    +                              250);
    +    }
    +
    +    public JComponent getContent ()
    +    {
    +
    +        this.targets = new Targets (this.viewer);
    +
    +        this.targets.setBorder (UIUtils.createPadding (0, 0, 5, 5));
    +
    +        this.targets.init ();
    +
    +        return this.wrapInScrollPane (this.targets);
    +
    +    }
    +
    +}
    \ No newline at end of file
    diff --git a/src/com/quollwriter/ui/sidebars/WarmupsSideBar.java b/src/com/quollwriter/ui/sidebars/WarmupsSideBar.java
    index 2b7cb06..a70767d 100644
    --- a/src/com/quollwriter/ui/sidebars/WarmupsSideBar.java
    +++ b/src/com/quollwriter/ui/sidebars/WarmupsSideBar.java
    @@ -148,7 +148,7 @@ public class WarmupsSideBar extends AbstractSideBar<WarmupsViewer>
         public void panelShown (MainPanelEvent ev)
         {
    
    -        this.setObjectSelectedInSidebar (ev.getPanel ().getForObject ());
    +        this.setObjectSelectedInSidebar (ev.getForObject ());
    
         }
    
    diff --git a/src/com/quollwriter/ui/sidebars/WordCountsSideBar.java b/src/com/quollwriter/ui/sidebars/WordCountsSideBar.java
    index fd6e6c8..0d451e9 100644
    --- a/src/com/quollwriter/ui/sidebars/WordCountsSideBar.java
    +++ b/src/com/quollwriter/ui/sidebars/WordCountsSideBar.java
    @@ -154,6 +154,7 @@ public class WordCountsSideBar extends AbstractSideBar<AbstractProjectViewer>
    
         }
    
    +    @Override
         public void panelShown (MainPanelEvent ev)
         {
    
    @@ -640,7 +641,7 @@ public class WordCountsSideBar extends AbstractSideBar<AbstractProjectViewer>
    
             JPanel p = b.getPanel ();
             p.setOpaque (false);
    -        p.setBorder (new EmptyBorder (10, 10, 10, 10));
    +        p.setBorder (UIUtils.createPadding (10, 10, 10, 10));
             p.setAlignmentX (Component.LEFT_ALIGNMENT);
    
             return p;
    @@ -663,7 +664,7 @@ public class WordCountsSideBar extends AbstractSideBar<AbstractProjectViewer>
                                                   public void actionPerformed (ActionEvent ev)
                                                   {
    
    -                                                    _this.viewer.viewWordCountHistory ();
    +                                                    _this.viewer.viewStatistics ();
    
                                                   }
    
    @@ -675,6 +676,14 @@ public class WordCountsSideBar extends AbstractSideBar<AbstractProjectViewer>
    
         }
    
    +    @Override
    +    public Dimension getMinimumSize ()
    +    {
    +
    +        return new Dimension (260,
    +                              250);
    +    }
    +
         public JComponent getContent ()
         {
    
    @@ -682,14 +691,6 @@ public class WordCountsSideBar extends AbstractSideBar<AbstractProjectViewer>
    
             Box box = new Box (BoxLayout.Y_AXIS);
    
    -        box.setMinimumSize (new Dimension (238,
    -                                           250));
    -        box.setPreferredSize (new Dimension (238,
    -                                             250));
    -
    -        box.setMaximumSize (new Dimension (Short.MAX_VALUE,
    -                                           Short.MAX_VALUE));
    -
             final Chapter c = this.viewer.getChapterCurrentlyEdited ();
    
             this.projectSessionWordCount = UIUtils.createInformationLabel (null);
    @@ -934,7 +935,7 @@ public class WordCountsSideBar extends AbstractSideBar<AbstractProjectViewer>
                 public void handlePress (MouseEvent ev)
                 {
    
    -                _this.viewer.viewWordCountHistory ();
    +                _this.viewer.viewStatistics ();
    
                 }
    
    @@ -964,6 +965,19 @@ public class WordCountsSideBar extends AbstractSideBar<AbstractProjectViewer>
    
             box.add (Box.createVerticalGlue ());
    
    +        UIUtils.doLater (new ActionListener ()
    +        {
    +
    +            @Override
    +            public void actionPerformed (ActionEvent ev)
    +            {
    +
    +                _this.update ();
    +
    +            }
    +
    +        });
    +
             return this.wrapInScrollPane (box);
    
         }
    @@ -1068,7 +1082,7 @@ public class WordCountsSideBar extends AbstractSideBar<AbstractProjectViewer>
    
             final WordCountsSideBar _this = this;
    
    -        this.timer = new Timer (2000,
    +        this.timer = new Timer (2 * Constants.SEC_IN_MILLIS,
                                     new ActionAdapter ()
                                     {

55	0	data/properties.xml
28	0	src/com/quollwriter/Constants.java
317	21	src/com/quollwriter/Environment.java
67	0	src/com/quollwriter/Utils.java
24	21	src/com/quollwriter/data/Session.java
334	0	src/com/quollwriter/data/TargetsData.java
314	0	src/com/quollwriter/data/UserSession.java
31	4	src/com/quollwriter/db/ProjectInfoObjectManager.java
2	2	src/com/quollwriter/editors/ui/EditorProjectViewer.java
2	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java
3	2	src/com/quollwriter/editors/ui/SendProjectWizard.java
5	6	src/com/quollwriter/editors/ui/panels/AdvertiseProjectPanel.java
4	5	src/com/quollwriter/editors/ui/panels/RegisterAsAnEditorPanel.java
1	1	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
1	1	src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java
18	0	src/com/quollwriter/events/MainPanelEvent.java
14	3	src/com/quollwriter/events/SideBarEvent.java
576	198	src/com/quollwriter/ui/AbstractProjectViewer.java
76	0	src/com/quollwriter/ui/AbstractViewer.java
9	0	src/com/quollwriter/ui/BackgroundImagePanel.java
1	1	src/com/quollwriter/ui/ChapterFieldAccordionItem.java
217	22	src/com/quollwriter/ui/FullScreenFrame.java
13	1	src/com/quollwriter/ui/FullScreenTextProperties.java
156	7	src/com/quollwriter/ui/Landing.java
16	0	src/com/quollwriter/ui/NamedObjectPreviewPopup.java
19	3	src/com/quollwriter/ui/Notification.java
2	0	src/com/quollwriter/ui/ProjectEvent.java
12	1	src/com/quollwriter/ui/ProjectTextProperties.java
34	72	src/com/quollwriter/ui/ProjectViewer.java
9	5	src/com/quollwriter/ui/QuollChart.java
27	21	src/com/quollwriter/ui/QuollPanel.java
1219	0	src/com/quollwriter/ui/Targets.java
505	27	src/com/quollwriter/ui/TextPropertiesEditPanel.java
1	1	src/com/quollwriter/ui/Tips.java
233	42	src/com/quollwriter/ui/UIUtils.java
5	23	src/com/quollwriter/ui/WarmupsViewer.java
106	0	src/com/quollwriter/ui/charts/AbstractQuollChart.java
194	37	src/com/quollwriter/ui/charts/AllWordCountsChart.java
545	54	src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java
374	4	src/com/quollwriter/ui/charts/QuollChartUtils.java
755	0	src/com/quollwriter/ui/charts/ReadabilityIndicesChart.java
661	0	src/com/quollwriter/ui/charts/SessionTimeChart.java
630	0	src/com/quollwriter/ui/charts/SessionWordCountChart.java
13	1	src/com/quollwriter/ui/components/QTextEditor.java
38	7	src/com/quollwriter/ui/components/TextProperties.java
2	0	src/com/quollwriter/ui/components/TextStylable.java
29	9	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
1	1	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
4	251	src/com/quollwriter/ui/panels/AchievementsPanel.java
279	0	src/com/quollwriter/ui/panels/BasicQuollPanel.java
10	21	src/com/quollwriter/ui/panels/BlankQuollPanel.java
30	7	src/com/quollwriter/ui/panels/FullScreenQuollPanel.java
8	22	src/com/quollwriter/ui/panels/HelpTextPanel.java
20	14	src/com/quollwriter/ui/panels/IdeaBoard.java
5	3153	src/com/quollwriter/ui/panels/OptionsPanel.java
152	0	src/com/quollwriter/ui/panels/ProjectObjectQuollPanel.java
441	0	src/com/quollwriter/ui/panels/StatisticsPanel.java
22	28	src/com/quollwriter/ui/panels/Timeline.java
4	5	src/com/quollwriter/ui/panels/WordCloudPanel.java
0	629	src/com/quollwriter/ui/panels/WordCountPanel.java
7	4	src/com/quollwriter/ui/sidebars/AbstractSideBar.java
52	18	src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java
1	1	src/com/quollwriter/ui/sidebars/ProjectSideBar.java
122	0	src/com/quollwriter/ui/sidebars/TargetsSideBar.java
1	1	src/com/quollwriter/ui/sidebars/WarmupsSideBar.java
26	12	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit 1f718d76a9dc352aaa32ce75f9f8f40a42686556
Author: Gary Bentley <gary@quollwriter.com>
Date:   Tue Feb 16 08:50:33 2016 +1000

    Fix NPE in projectClosed.

1	1	src/com/quollwriter/Environment.java

commit 6755090637fcbb2db00076c17285b5e4b8948f14
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Feb 15 23:02:42 2016 +1000

    Add in support for storing information about user sessions, for now, how many words were written
    in the session and when it began and ended.  As a consequence the project info schema has been
    updated to version 2.
    
    Handling of shutdown has been improved by ensuring that Environment.closeDown (previously
    Environment.landingClosed) is now called under the correct circumstances.  This should prevent
    some project information load issues occurring due to a closed connection pool.

1	1	data/project-info-schema-version.txt
12	0	data/project-info-schema/update-scripts/0-1.xml
14	0	data/project-info-schema/update-scripts/1-2.xml
50	5	src/com/quollwriter/Environment.java
41	3	src/com/quollwriter/data/Session.java
120	0	src/com/quollwriter/db/ProjectInfoObjectManager.java

commit 975948eb6a02742b8f4b1c323b111e31014b7eac
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Feb 13 20:44:44 2016 +1000

    Add support for a total session word count, separate out the project session word count from the total in the word count side bar.

23	1	src/com/quollwriter/Environment.java
63	0	src/com/quollwriter/data/Session.java
12	92	src/com/quollwriter/ui/AbstractProjectViewer.java
4	8	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
13	6	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit c9037b235d99fa09c1aa0a6b091d9a083e4dc5bc
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Feb 11 14:34:39 2016 +1000

    Remove unnecessary front padding.

2	2	src/com/quollwriter/ui/OptionsBox.java

commit ac19c8ef53b5f369ef6dab92136f766064e9d9fd
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Feb 11 14:31:27 2016 +1000

    Ensure that the auto save interval is saved before it is used to reset the auto saves, duh...

3	3	src/com/quollwriter/ui/Options.java

commit 36f8650e4d0e9177d936c27f723908599e36940c
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Feb 11 14:30:08 2016 +1000

    Add some null checks.

14	0	src/com/quollwriter/text/TextUtilities.java

commit f16ab2469f07edad5c21cf448b4da127b48abcbf
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Feb 11 14:28:50 2016 +1000

    More accurately detect dangling open quotation marks.

18	0	src/com/quollwriter/text/DialogueInd.java

commit b12e117ad3a71013338c7455dd32e15352a4c83b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Feb 11 14:28:00 2016 +1000

    Allow the return of the appears in chapters edit panel, useful for updating the appears in tree.

7	0	src/com/quollwriter/ui/panels/AssetViewPanel.java

commit 2866683dbdd86a0f9695d96f4f12b49c53fe76c0
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Feb 11 14:27:16 2016 +1000

    Update the iterator to more accurately iterate over the blocks.

144	6	src/com/quollwriter/text/TextBlockIterator.java

commit 50d66b69676bd55911421449f09c010a357f5efd
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Feb 11 13:23:35 2016 +1000

    Simplification and standardization of how word counts are handled.
    
    AbstractProjectViewer now has a "chapterCounts" set that holds an instance of ChapterCounts against a Chapter.
    
    The counts are inited when the project is opened to give the starting word counts, then refreshed
    whenever a change is made to a chapter (see: AbstractEditorPanel).
    
    Calculation and storage of the A4 page count has been moved out of ChapterCounts and is handled separately, see:
    AbstractProjectViewer.getChapterA4PageCount(Chapter) and AbstractProjectViewer.getAllChaptersA4PageCount().

1	2	src/com/quollwriter/achievements/rules/SentenceAchievementRule.java
1	1	src/com/quollwriter/achievements/rules/WordAchievementRule.java
2	2	src/com/quollwriter/achievements/rules/WordCountAchievementRule.java
0	2	src/com/quollwriter/data/ChapterCounts.java
109	85	src/com/quollwriter/ui/AbstractProjectViewer.java
20	3	src/com/quollwriter/ui/AbstractViewer.java
2	2	src/com/quollwriter/ui/WordCountTimer.java
4	97	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java
87	26	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
1	33	src/com/quollwriter/ui/panels/AbstractViewOnlyEditorPanel.java
7	6	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit 5fcf0053df4db70daaa34d55370a9edc6853cdea
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Feb 10 21:31:31 2016 +1000

    Move the appears in chapters updating to the ProjectViewer for performance reasons.

3	62	src/com/quollwriter/ui/AppearsInChaptersEditPanel.java
151	28	src/com/quollwriter/ui/ProjectViewer.java

commit 6c9bf232488da8d8f027bf67693e6cf168e5f474
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Feb 10 21:26:17 2016 +1000

    Allow the doForPanels method to perform the action on the event thread, or not.

37	6	src/com/quollwriter/ui/AbstractProjectViewer.java

commit ad6e2750c2b784cc3008c74c3e602af4ae278c92
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Feb 10 20:40:56 2016 +1000

    Move the auto backups to use the AbstractProject general timer.

3	2	src/com/quollwriter/ui/AbstractProjectViewer.java

commit bf001ed596448f4e97b3bc794ca176fddc7b6b27
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Feb 10 20:35:21 2016 +1000

    Move chapter auto-saving into AbstractProjectViewer and save all chapters with changes in a single task running on the AbstractViewer general Timer.

80	0	src/com/quollwriter/ui/AbstractProjectViewer.java
1	75	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java
0	644	src/com/quollwriter/ui/panels/AbstractEditorPanel.java

commit ef6de7afd992fa699ed623958625f465fff4612e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Feb 10 20:27:44 2016 +1000

    Modified to ensure that the action is performed on the event thread.

16	3	src/com/quollwriter/ui/AbstractProjectViewer.java

commit c8bfbd4cc9a59e916e44c70db81d2e4bdfdaad1f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Feb 10 20:26:59 2016 +1000

    Add a new timer for tasks relating to the project.

16	0	src/com/quollwriter/ui/AbstractViewer.java

commit f2ab6f03136848f4858251ebfad5ad57e707f79b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jan 30 23:12:04 2016 +1000

    Add an iterator for paragraphs and sentences.

262	0	src/com/quollwriter/text/TextBlockIterator.java

commit c6cdacdad4268b0d09caf598a67e615c3141032a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jan 30 23:09:50 2016 +1000

    Add some utility methods to help detect when at start and end of dialogue.

40	0	src/com/quollwriter/text/Word.java

commit 7095f4e29da9cd579fb7ffde473880a09ba1f6bd
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jan 30 23:07:58 2016 +1000

    Remove control characters and smart quotes from any text entered into a chapter.  This includes pasting into the QTextEditor.

3	1	src/com/quollwriter/data/Chapter.java
3	1	src/com/quollwriter/importer/MSWordDocumentImporter.java
87	0	src/com/quollwriter/text/TextUtilities.java
42	0	src/com/quollwriter/ui/components/QTextEditor.java

commit b725d98d0a4109e4ef619aa982bff4520a8c12f9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jan 23 14:12:20 2016 +1000

    Update what's new with changes and update version to 2.4.2.

26	2	build.xml
1	1	data/version.txt
7	0	data/whats-new.xml

commit 2d213bf24782826a4371dc43a9a9ef07f0d2e149
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jan 23 11:17:36 2016 +1000

    Remove hashcode from object properties toString call.

0	3	src/com/quollwriter/data/DataObject.java

commit bd09fdad62e0eecbbde2d2bbad65e519e64c794a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 22 22:15:00 2016 +1000

    Prevent NPE when getting the session word counts.

7	0	src/com/quollwriter/ui/AbstractProjectViewer.java

commit d592aacd980b7ef81e7124dbe22f77d2b410e45e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 22 21:59:58 2016 +1000

    Remove commented methods.

1	84	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 434cfa18d45bedf6de3a648b98cd26acbd37f83d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 22 21:54:33 2016 +1000

    Prevent NPE when viewer is null.

7	0	src/com/quollwriter/achievements/rules/WordCountAchievementRule.java

commit bced20f43c067b579d501beebd6a70bc1459fc84
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 22 17:25:21 2016 +1000

    Better error handling when something goes wrong when a panel is being readied.  Also force the error message to be displayed in a popup rather than a separate window.

13	7	src/com/quollwriter/ui/UIUtils.java

commit 21ade53c71c9da92e7773c8a113a8d68fdac1c87
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 22 16:37:52 2016 +1000

    Fix for NPE when trying to save a null object.

7	0	src/com/quollwriter/ui/AbstractProjectViewer.java

commit acb024c1984fcd9cb1f0c569a188990b40e1db8a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 22 16:31:42 2016 +1000

    Fix for an NPE when renaming a project and firing the project name change event.

9	2	src/com/quollwriter/ui/actionHandlers/RenameProjectActionHandler.java

commit 79bd65db7501cf82d72a8181ea0aa5ac68a02480
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 22 15:11:16 2016 +1000

    When checking for the end of a url, look for the < character as well as whitespace.  Carriage returns are replaced with <br> for HTML formatting so a url may look like http://www.google.com<br.  Since < isn't a valid url character it can be safely looked for as the terminator of a url.  Note: this is NOT the definitive handling of urls but is good enough for 99% of cases.

6	3	src/com/quollwriter/ui/UIUtils.java

commit b6ba79dfd020ec566bbd9d7ebef4c1100dcb7640
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 22 14:15:03 2016 +1000

    Allow resends of invites to pending Editors, to allow for rare times when an invite may fail to be delivered.

19	2	src/com/quollwriter/editors/EditorsEnvironment.java
19	0	src/com/quollwriter/editors/ui/EditorInfoBox.java

commit f58988cc523d5960cfedfad7c16147e25e05f9fe
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 22 13:06:52 2016 +1000

    Show the internal report a bug when an error occurs rather than sending the user to the QW website.

4	1	src/com/quollwriter/ui/UIUtils.java

commit 96d3c20840151cb58ae5c8b9bf480756fd7047f7
Merge: fefbb52 efb4491
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 22 12:28:49 2016 +1000

    Merge branch 'dev-v2.5' into dev-v2.4.2

commit efb449117199ad12e507ed7ab565513fb8ac7df5
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 15 15:58:17 2016 +1000

    Fix to prevent an NPE when there is no markup for a chapter.

10	1	src/com/quollwriter/editors/messages/TypeEncoder.java

commit 00aeb6be0d33680c464a2193fc41cb1273b21844
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 15 15:56:44 2016 +1000

    Remove hardcoded key sequence name since sometimes an extra key sequence can be generated (very rare).

3	0	src/com/quollwriter/db/ObjectManager.java

commit 6c31a6c956fd52ba5aa1835fe7feae7e0f37b3a6
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 15 15:54:54 2016 +1000

    Tweak to make sorting work when two objects have same name.

11	1	src/com/quollwriter/data/comparators/ChapterItemSorter.java

commit 94342cb8eea86c601df70936e75031be6a090b28
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jan 15 15:54:20 2016 +1000

    Not sure what changed here.

1	2	src/com/quollwriter/Startup.java

commit fefbb52d4757a56e5708030f20df0966c5016192
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 30 14:50:18 2015 +1000

    Use the correct insets when working out the location of the popup.

4	3	src/com/quollwriter/ui/FullScreenFrame.java

commit 5e43bf1cc027a566c438f1ee67306530a28c5527
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 30 14:45:24 2015 +1000

    Change to name of thread to prevent full object details being used instead.

3	3	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java

commit 637b9b08a15d463a3e57b9c7ddbd6aab394e8cb3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 30 14:42:46 2015 +1000

    Ensure that popup appears in correct place in full screen mode.

5	6	src/com/quollwriter/ui/actionHandlers/DeleteChapterItemActionHandler.java

commit c6c68a8f0ff59f290cda97789d013457ac564842
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 30 14:39:14 2015 +1000

    Ensure that onShow and event is fired when showing a sidebar in full screen mode.

6	13	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 6fc50b6d6f46ac05a666dc101fcfa622384a5be9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 30 14:38:18 2015 +1000

    Add in missing images.

-	-	imgs/restore16.png
-	-	imgs/warmups20.png
-	-	imgs/warning20.png

commit 178b2c13820cff96d96beec05fbb6b1cede53264
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Oct 24 11:23:15 2015 +1000

    Target 1.7 for the source.

2	1	build.xml

commit 1c004e731747548bad0ed2028e866c50d1f5de73
Merge: 20f07ce 3aa8223
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 23 22:20:16 2015 +1000

    Merge branch 'dev-v2.4.1'

commit 3aa82235e3e701309e679080830dc4217f910b0e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 23 21:28:54 2015 +1000

    Update the whats new.

5	0	data/whats-new.xml

commit 34a0861436ccc65a542e56be8394bd2e24fb5c04
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 23 21:22:46 2015 +1000

    Small tweak to width of landing to have 3 projects show up in a row.

1	1	src/com/quollwriter/ui/Landing.java

commit 81e4f253d1b36b08d1d0f63284fd91bf9f4e3b29
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 23 21:00:52 2015 +1000

    Revert the ErrorCode reference back for h2 1.3.175

11	5	src/com/quollwriter/db/ObjectManager.java

commit c5b8c1b41b05497cf18d128693758e40ad146519
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 23 20:57:27 2015 +1000

    Revert back to h2 1.3.175 since 176 was preventing some db files from being opened.

-	-	3rd-party-jars/h2-1.3.175.jar
-	-	3rd-party-jars/h2-1.3.176.jar

commit 014cad0b704473542465b895385d9e5bc3b88886
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 23 20:01:59 2015 +1000

    Update the version to 2.4.1 and update the what's new.

1	3	build.xml
1	1	data/version.txt
7	0	data/whats-new.xml

commit ee13c678686ef8af8a815fa170e0ddd52e3f6267
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 23 19:33:09 2015 +1000

    Fix for an NPE when checking for undealt with messages.

7	0	src/com/quollwriter/editors/EditorsEnvironment.java

commit 769027e274cc415f6750bb728380b3eb657a7415
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Oct 23 16:45:40 2015 +1000

    Fix for the reflow/invalid word break point bug when the text pane is resized.  Also disambiguate use of Base64 when compiling for java 8.

2	2	src/com/quollwriter/data/editors/Invite.java
3	3	src/com/quollwriter/editors/EditorsUtils.java
2	2	src/com/quollwriter/editors/EditorsWebServiceHandler.java
2	2	src/com/quollwriter/editors/messages/PublicKeyMessage.java
0	24	src/com/quollwriter/editors/ui/panels/EditorChapterPanel.java
2	2	src/com/quollwriter/ui/FullScreenFrame.java
101	0	src/com/quollwriter/ui/components/QStyledEditorKit.java
38	28	src/com/quollwriter/ui/components/QTextEditor.java
0	22	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
0	29	src/com/quollwriter/ui/panels/QuollEditorPanel.java

commit a25ea4f1f8131e21453eae2442d6680f7695b731
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Oct 22 10:21:33 2015 +1000

    Bring the landing viewer to the front when it is shown.

2	0	src/com/quollwriter/Environment.java

commit 3b564d478f14651c29790fbfb549b3748c04e839
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Oct 21 12:47:09 2015 +1000

    Add in missing projects window icons.

-	-	imgs/editors20.png
-	-	imgs/lock20.png

commit 9c1a851547d5300bb96f3252fd315e8a51ba5b52
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Oct 19 20:25:27 2015 +1000

    Fix for npe when trying to bring full screen frame to front

6	1	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 20f07cefad1c516770b08382957bf2b2defbac34
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Oct 19 20:21:13 2015 +1000

    Updated README

8	9	README.md

commit c956d868edf9e213be72660d32a276ae85d09ac1
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Oct 18 23:52:03 2015 +1000

    Add in image.

-	-	imgs/project-import24.png

commit 7f1bc6bc332917bf620d454faf5aac571ab7da44
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Oct 18 22:17:30 2015 +1000

    Tweak to the whats new

2	2	data/whats-new.xml

commit d17b7cb6d5870d101fcd01b56be16ba593349066
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Oct 18 21:24:11 2015 +1000

    Version 2.4 changes.
    
    New
    ===
    
      * Introduction of AbstractViewer as the foundation of all viewers.
      * Introduction of Landing which extends from AbstractViewer and allows management of all projects.
      * Added ProjectInfo which represents a project and is used by Landing.
      * Added a new db for storing project info.
      * Added FirstUseWizard which better handles a user's first project.
      * Added ObjectDocumentsEditPanel which displays and manages the documents for assets.
      * Added StringWithMarkup which allows a string and its markup to be held together, just about everywhere changed to now
        use this.
      * Added BackupManager to manage backups for a project.
      * Added ImportTransferHandler/ImportTransferHandlerOverlay to deal with top-level drag-n-drop of files onto windows to allow
        for imports.
      * Added a file lock mechanism to see if QW is already running.
    
    (Major) Changes
    ===============
    
      * Removed use of JTextArea and replaced with com.quollwriter.ui.TextArea which has been beefed up to support
        bold/italic/underline, spell checking and synonym lookup.
      * Asset descriptions, ideas, chapter goals, description and plan all now support bold/italic/underline.
      * Note, scene and outline item descriptions all now support bold/italic/underline.
      * Changed use of BreakIterators to com.quollwriter.text.TextIterator for more accurate text splitting.
      * Added a do warmup button to warmup viewer.
      * Allow middle click to close a tab, can right click and also close via menu.
      * Removed Czech as a spell check language option, the spell check for that is broken.
    
    Fixes
    =====
    
      * Spell check only when caret has left current word.
      * If there is no avatar for user then "Me" will now display instead of throwing an error.
      * Fixed an issue where, if you delete a chapter with unsaved changes and auto save is enabled then an internal error is thrown (the user never sees it).
      * Fixed an issue with invalid characters in chapter text preventing a save.
      * "Click to try out the typewriter sound" link in the tip now works.
      * Improved typewriter sound so it only triggers when the text changes.
      * Spellchecker now highlights the correct text when there are leading white space characters at the start of a line.
      * "Playtime is over" achievement now fires project is created not when the popup is shown.
      * Fixed broken word wrapping when moving from normal mode to full screen mode.

-	-	3rd-party-jars/JoSQL-2.1.jar
-	-	3rd-party-jars/JoSQL-2.2.jar
-	-	3rd-party-jars/h2-1.3.175.jar
-	-	3rd-party-jars/h2-1.3.176.jar
4	1	build.xml
2	2	data/achievements.xml
-	-	data/document-error.png
-	-	data/document-normal.png
16	0	data/editor-schema/update-scripts/1-2.xml
1	1	data/editors-schema-version.txt
1	0	data/project-info-schema-version.txt
116	0	data/project-info-schema/update-scripts/0-1.xml
39	0	data/project-info-schema/update-scripts/create-views.xml
17	0	data/project-info-schema/views/namedobject.v
27	0	data/project-info-schema/views/projectinfo.v
41	0	data/properties.xml
1	1	data/schema-version.txt
6	2	data/schema/update-scripts/0-1.xml
32	0	data/schema/update-scripts/9-10.xml
7	0	data/schema/update-scripts/create-views.xml
2	0	data/schema/views/book.v
5	1	data/schema/views/chapter.v
2	0	data/schema/views/character.v
2	0	data/schema/views/idea.v
2	0	data/schema/views/ideatype.v
2	0	data/schema/views/location.v
2	0	data/schema/views/namedobject.v
2	0	data/schema/views/note.v
2	0	data/schema/views/outlineitem.v
2	0	data/schema/views/project.v
1	0	data/schema/views/projectversion.v
2	0	data/schema/views/qobject.v
2	0	data/schema/views/researchitem.v
2	0	data/schema/views/scene.v
2	0	data/schema/views/warmup.v
12	12	data/tips.xml
24	1	data/whats-new.xml
43	2	src/com/quollwriter/Constants.java
93	21	src/com/quollwriter/DictionaryProvider.java
1841	496	src/com/quollwriter/Environment.java
51	33	src/com/quollwriter/Startup.java
119	0	src/com/quollwriter/StringWithMarkup.java
447	2	src/com/quollwriter/Utils.java
101	52	src/com/quollwriter/achievements/AchievementsManager.java
2	1	src/com/quollwriter/{ => achievements}/ui/AchievementBox.java
392	0	src/com/quollwriter/achievements/ui/Achievements.java
3	4	src/com/quollwriter/data/Asset.java
3	1	src/com/quollwriter/data/Book.java
66	37	src/com/quollwriter/data/Chapter.java
24	0	src/com/quollwriter/data/ChapterCounts.java
1	1	src/com/quollwriter/data/DataObject.java
9	4	src/com/quollwriter/data/Idea.java
88	8	src/com/quollwriter/data/NamedObject.java
7	11	src/com/quollwriter/data/Note.java
12	36	src/com/quollwriter/data/OutlineItem.java
174	11	src/com/quollwriter/data/Project.java
497	0	src/com/quollwriter/data/ProjectInfo.java
14	0	src/com/quollwriter/data/ReadabilityIndices.java
11	34	src/com/quollwriter/data/Scene.java
1	1	src/com/quollwriter/data/comparators/IdeaTypeComparator.java
54	0	src/com/quollwriter/data/comparators/ProjectInfoSorter.java
12	3	src/com/quollwriter/data/editors/AbstractEditorObject.java
2	3	src/com/quollwriter/data/editors/EditorEditor.java
4	2	src/com/quollwriter/db/BookDataHandler.java
105	23	src/com/quollwriter/db/ChapterDataHandler.java
4	2	src/com/quollwriter/db/CharacterDataHandler.java
7	7	src/com/quollwriter/db/EditorMessageDataHandler.java
1	1	src/com/quollwriter/db/EditorProjectDataHandler.java
4	2	src/com/quollwriter/db/IdeaDataHandler.java
3	3	src/com/quollwriter/db/IdeaTypeDataHandler.java
5	4	src/com/quollwriter/db/LocationDataHandler.java
4	4	src/com/quollwriter/db/NoteDataHandler.java
4	4	src/com/quollwriter/db/ObjectDataHandler.java
225	35	src/com/quollwriter/db/ObjectManager.java
2	1	src/com/quollwriter/db/ObjectProvider.java
4	4	src/com/quollwriter/db/OutlineItemDataHandler.java
5	5	src/com/quollwriter/db/ProjectDataHandler.java
6	6	src/com/quollwriter/db/ProjectEditorDataHandler.java
319	0	src/com/quollwriter/db/ProjectInfoDataHandler.java
146	0	src/com/quollwriter/db/ProjectInfoObjectManager.java
3	2	src/com/quollwriter/db/ProjectVersionDataHandler.java
4	4	src/com/quollwriter/db/ResearchItemDataHandler.java
5	5	src/com/quollwriter/db/SceneDataHandler.java
9	9	src/com/quollwriter/editors/DefaultEditorMessageProcessor.java
3	3	src/com/quollwriter/editors/DefaultEditorsWebServiceErrorAction.java
93	61	src/com/quollwriter/editors/EditorsEnvironment.java
2	2	src/com/quollwriter/editors/EditorsMessageHandler.java
47	72	src/com/quollwriter/editors/EditorsObjectManager.java
0	2	src/com/quollwriter/editors/EditorsUtils.java
3	3	src/com/quollwriter/editors/EditorsWebServiceHandler.java
11	11	src/com/quollwriter/editors/messages/AbstractProjectMessage.java
2	2	src/com/quollwriter/editors/messages/EditorMessage.java
25	9	src/com/quollwriter/editors/messages/TypeEncoder.java
2	2	src/com/quollwriter/editors/ui/ChatMessageAccordionItem.java
16	7	src/com/quollwriter/editors/ui/ChatMessageBox.java
13	17	src/com/quollwriter/editors/ui/CommentActionHandler.java
14	102	src/com/quollwriter/editors/ui/EditorChatBox.java
133	88	src/com/quollwriter/editors/ui/EditorInfoBox.java
4	4	src/com/quollwriter/editors/ui/EditorInfoMessageBox.java
4	5	src/com/quollwriter/editors/ui/EditorLogin.java
18	3	src/com/quollwriter/editors/ui/EditorProjectViewer.java
8	8	src/com/quollwriter/editors/ui/EditorRegister.java
6	6	src/com/quollwriter/editors/ui/EditorRemovedMessageBox.java
135	203	src/com/quollwriter/editors/ui/EditorsUIUtils.java
3	3	src/com/quollwriter/editors/ui/InviteMessageBox.java
3	3	src/com/quollwriter/editors/ui/InviteResponseMessageBox.java
6	6	src/com/quollwriter/editors/ui/MessageAccordionItem.java
7	7	src/com/quollwriter/editors/ui/MessageBox.java
3	3	src/com/quollwriter/editors/ui/MessageBoxFactory.java
16	32	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
35	21	src/com/quollwriter/editors/ui/NewProjectResponseMessageBox.java
9	37	src/com/quollwriter/editors/ui/ProjectCommentsChaptersAccordionItem.java
67	16	src/com/quollwriter/editors/ui/ProjectCommentsMessageBox.java
26	28	src/com/quollwriter/editors/ui/ProjectEditStopMessageBox.java
2	2	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java
29	4	src/com/quollwriter/editors/ui/ProjectSentReceivedViewer.java
26	26	src/com/quollwriter/editors/ui/SendProjectWizard.java
5	23	src/com/quollwriter/editors/ui/UpdateProjectMessageBox.java
1	1	src/com/quollwriter/editors/ui/panels/AdvertiseProjectPanel.java
1	1	src/com/quollwriter/editors/ui/panels/ChapterCommentsPanel.java
24	0	src/com/quollwriter/editors/ui/panels/EditorChapterPanel.java
18	8	src/com/quollwriter/editors/ui/sidebars/EditorPanel.java
5	7	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
40	40	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
9	9	src/com/quollwriter/editors/ui/sidebars/ProjectCommentsSideBar.java
2	2	src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java
184	1	src/com/quollwriter/events/MouseEventHandler.java
42	0	src/com/quollwriter/events/ProjectInfoChangedEvent.java
10	0	src/com/quollwriter/events/ProjectInfoChangedListener.java
8	64	src/com/quollwriter/exporter/EPUBDocumentExporter.java
13	4	src/com/quollwriter/exporter/MSWordDocDocumentExporter.java
47	102	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
5	5	src/com/quollwriter/importer/HTMLDocumentImporter.java
5	4	src/com/quollwriter/importer/MSWordDocumentImporter.java
40	4	src/com/quollwriter/text/Paragraph.java
7	0	src/com/quollwriter/text/ProblemFinder.java
1	0	src/com/quollwriter/text/Rule.java
59	69	src/com/quollwriter/text/Sentence.java
34	2	src/com/quollwriter/text/TextIterator.java
43	179	src/com/quollwriter/text/TextUtilities.java
16	1	src/com/quollwriter/text/rules/AbstractRule.java
49	13	src/com/quollwriter/text/rules/WordFinder.java
786	1069	src/com/quollwriter/ui/AbstractProjectViewer.java
3160	0	src/com/quollwriter/ui/AbstractViewer.java
8	0	src/com/quollwriter/ui/AccordionItem.java
11	7	src/com/quollwriter/ui/AppearsInChaptersEditPanel.java
12	38	src/com/quollwriter/ui/AssetAccordionItem.java
10	0	src/com/quollwriter/ui/BackgroundImagePanel.java
2	6	src/com/quollwriter/ui/BackgroundSelector.java
544	0	src/com/quollwriter/ui/BackupsManager.java
2	2	src/com/quollwriter/ui/ChapterDescriptionAccordionItem.java
0	209	src/com/quollwriter/ui/ChapterDetailsEditPanel.java
113	84	src/com/quollwriter/ui/ChapterFieldAccordionItem.java
3	3	src/com/quollwriter/ui/ChapterFindResultsBox.java
3	3	src/com/quollwriter/ui/ChapterGoalsAccordionItem.java
3	3	src/com/quollwriter/ui/ChapterPlanAccordionItem.java
20	45	src/com/quollwriter/ui/ChaptersAccordionItem.java
26	10	src/com/quollwriter/ui/CharacterDetailsEditPanel.java
0	236	src/com/quollwriter/ui/ChatAccordionItem.java
1	2	src/com/quollwriter/ui/ConvertWarmupToProject.java
22	15	src/com/quollwriter/ui/DebugConsole.java
4	4	src/com/quollwriter/ui/DefaultChapterItemViewPopupProvider.java
44	21	src/com/quollwriter/ui/DetailsEditPanel.java
10	13	src/com/quollwriter/ui/DictionaryManager.java
2	30	src/com/quollwriter/ui/EditItemTypes.java
4	4	src/com/quollwriter/ui/EditNoteTypes.java
110	96	src/com/quollwriter/ui/EditPanel.java
109	0	src/com/quollwriter/ui/EditProjectStatuses.java
2	2	src/com/quollwriter/ui/ErrorWindow.java
7	9	src/com/quollwriter/ui/ExportProject.java
69	18	src/com/quollwriter/ui/FileFinder.java
3	3	src/com/quollwriter/ui/FindOrOpen.java
6	5	src/com/quollwriter/ui/FindResultsBox.java
1329	0	src/com/quollwriter/ui/FirstUseWizard.java
156	12	src/com/quollwriter/ui/FullScreenFrame.java
22	22	src/com/quollwriter/ui/GetLatestVersion.java
16	34	src/com/quollwriter/ui/IconColumn.java
241	146	src/com/quollwriter/ui/ImportProject.java
173	0	src/com/quollwriter/ui/ImportTransferHandler.java
74	0	src/com/quollwriter/ui/ImportTransferHandlerOverlay.java
0	405	src/com/quollwriter/ui/ItemTypeHandler.java
4220	0	src/com/quollwriter/ui/Landing.java
28	2	src/com/quollwriter/ui/LinkedToAccordionItem.java
3	1	src/com/quollwriter/ui/LocationDetailsEditPanel.java
8	8	src/com/quollwriter/ui/MessageWindow.java
1	1	src/com/quollwriter/ui/NamedObjectFindResultsBox.java
5	3	src/com/quollwriter/ui/NamedObjectPreviewPopup.java
16	52	src/com/quollwriter/ui/NewProjectPanel.java
0	527	src/com/quollwriter/ui/NoteTypeHandler.java
22	49	src/com/quollwriter/ui/NotesAccordionItem.java
5	3	src/com/quollwriter/ui/ObjectDetailsEditPanel.java
682	0	src/com/quollwriter/ui/ObjectDocumentsEditPanel.java
216	126	src/com/quollwriter/ui/ObjectTypeNameChanger.java
4271	0	src/com/quollwriter/ui/Options.java
193	0	src/com/quollwriter/ui/OptionsBox.java
22	0	src/com/quollwriter/ui/PasswordInputWindow.java
44	23	src/com/quollwriter/ui/PopupWindow.java
21	28	src/com/quollwriter/ui/PopupWizard.java
23	8	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
23	29	src/com/quollwriter/ui/ProjectEvent.java
49	17	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
488	283	src/com/quollwriter/ui/ProjectViewer.java
6	4	src/com/quollwriter/ui/ResearchItemDetailsEditPanel.java
4	6	src/com/quollwriter/ui/ShareWritingPrompt.java
24	0	src/com/quollwriter/ui/SideBarsSupported.java
929	56	src/com/quollwriter/ui/TextArea.java
31	20	src/com/quollwriter/ui/TextInputWindow.java
47	33	src/com/quollwriter/ui/Tips.java
32	26	src/com/quollwriter/ui/TypesEditor.java
5	12	src/com/quollwriter/ui/TypesHandler.java
1355	441	src/com/quollwriter/ui/UIUtils.java
270	0	src/com/quollwriter/ui/UserPropertyHandler.java
30	39	src/com/quollwriter/ui/WarmupPromptSelect.java
15	14	src/com/quollwriter/ui/WarmupsAccordionItem.java
62	12	src/com/quollwriter/ui/WarmupsViewer.java
8	8	src/com/quollwriter/ui/WhatsNew.java
46	12	src/com/quollwriter/ui/Wizard.java
21	11	src/com/quollwriter/ui/WordCountTimerBox.java
4	2	src/com/quollwriter/ui/actionHandlers/AbstractActionHandler.java
2	1	src/com/quollwriter/ui/actionHandlers/AddChapterActionHandler.java
4	4	src/com/quollwriter/ui/actionHandlers/AddNewItemTypeActionHandler.java
3	3	src/com/quollwriter/ui/actionHandlers/AddNewNoteTypeActionHandler.java
60	62	src/com/quollwriter/ui/actionHandlers/AssetActionHandler.java
49	26	src/com/quollwriter/ui/actionHandlers/ChapterItemActionHandler.java
2	0	src/com/quollwriter/ui/actionHandlers/ChapterItemFormatDetails.java
0	17	src/com/quollwriter/ui/actionHandlers/DeleteProjectActionHandler.java
0	379	src/com/quollwriter/ui/actionHandlers/EditTextPropertiesActionHandler.java
2	2	src/com/quollwriter/ui/actionHandlers/FindSynonymsActionHandler.java
61	37	src/com/quollwriter/ui/actionHandlers/NoteActionHandler.java
4	4	src/com/quollwriter/ui/actionHandlers/NoteFormatDetails.java
52	41	src/com/quollwriter/ui/actionHandlers/OutlineItemChapterActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/OutlineItemFormatDetails.java
0	2	src/com/quollwriter/ui/actionHandlers/ProjectViewerActionHandler.java
145	0	src/com/quollwriter/ui/actionHandlers/RenameNoteTypeActionHandler.java
2	2	src/com/quollwriter/ui/actionHandlers/RenameProjectActionHandler.java
4	2	src/com/quollwriter/ui/actionHandlers/SceneFormatDetails.java
3	3	src/com/quollwriter/ui/actionHandlers/ShowChapterItemActionHandler.java
12	11	src/com/quollwriter/ui/actionHandlers/SplitChapterActionHandler.java
423	0	src/com/quollwriter/ui/components/DraggableToolbar.java
2	1	src/com/quollwriter/ui/components/Dragger.java
367	11	src/com/quollwriter/ui/components/Form.java
1	1	src/com/quollwriter/ui/components/Header.java
230	9	src/com/quollwriter/ui/components/Markup.java
33	4	src/com/quollwriter/ui/components/QPopup.java
112	7	src/com/quollwriter/ui/components/QSpellChecker.java
87	16	src/com/quollwriter/ui/components/QTextEditor.java
1	0	src/com/quollwriter/ui/components/ScrollablePanel.java
394	0	src/com/quollwriter/ui/components/TabHeader.java
20	3	src/com/quollwriter/ui/components/VerticalLayout.java
3	2	src/com/quollwriter/ui/forms/TextFormItem.java
19	10	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java
40	5	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
111	54	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
1	1	src/com/quollwriter/ui/panels/AbstractViewOnlyEditorPanel.java
15	108	src/com/quollwriter/ui/panels/AchievementsPanel.java
2	0	src/com/quollwriter/ui/panels/BlankQuollPanel.java
2	0	src/com/quollwriter/ui/panels/FullScreenQuollPanel.java
2	0	src/com/quollwriter/ui/panels/HelpTextPanel.java
68	115	src/com/quollwriter/ui/panels/IdeaBoard.java
407	276	src/com/quollwriter/ui/panels/OptionsPanel.java
59	11	src/com/quollwriter/ui/panels/QuollEditorPanel.java
1	0	src/com/quollwriter/ui/panels/Timeline.java
1	0	src/com/quollwriter/ui/panels/WarmupEditorPanel.java
1	0	src/com/quollwriter/ui/panels/WordCloudPanel.java
1	0	src/com/quollwriter/ui/panels/WordCountPanel.java
3	3	src/com/quollwriter/ui/renderers/ProjectTreeCellEditor.java
13	13	src/com/quollwriter/ui/sidebars/AbstractSideBar.java
3	2	src/com/quollwriter/ui/sidebars/AccordionItemsSideBar.java
2	2	src/com/quollwriter/ui/sidebars/AppearsInChaptersSideBar.java
7	6	src/com/quollwriter/ui/sidebars/ChapterInformationSideBar.java
11	11	src/com/quollwriter/ui/sidebars/Finder.java
4	4	src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java
5	16	src/com/quollwriter/ui/sidebars/ProjectSideBar.java
3	4	src/com/quollwriter/ui/sidebars/WarmupsSideBar.java
27	27	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java
2	2	src/com/quollwriter/ui/whatsnewcomps/WhatsNewComponentProvider.java
6	5	src/com/quollwriter/ui/whatsnewcomps/version_1_4_4.java
8	3	src/com/quollwriter/ui/whatsnewcomps/version_2_2.java

commit 4e9502fab32cdc09f05bd90167c37cadddd93088
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 9 08:41:02 2015 +1000

    Add in a check to see if the db is already in use for a project and thus can't be opened.

26	2	src/com/quollwriter/Environment.java
33	2	src/com/quollwriter/db/ObjectManager.java

commit dd7b60e2169f6665cde29465da5e2feddb50d788
Merge: 7c8d37b 725d172
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Aug 6 15:32:19 2015 +1000

    Merge branch 'master' of https://github.com/garybentley/quollwriter
    
    Conflicts:
            build.xml
            data/version.txt
            data/whats-new.xml
            src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java

commit 7c8d37b5d46d29f45a441b695f7693c104afc679
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Aug 6 14:11:13 2015 +1000

    Update version.

3	1	build.xml

commit ca22f7b135f4591d7d028734e0f5fcb534b81a1e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Aug 6 14:09:46 2015 +1000

    If opening a project fails then close the connection pool to prevent locking.

1	1	data/version.txt
14	1	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 240081c6f8542374d6037acfbc34976ce4f50227
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Aug 5 22:35:37 2015 +1000

    Add what's new for 2.3.1.

7	0	data/whats-new.xml

commit 1dfffe81b6e54bbccf56468057d2546c7b502ce6
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Aug 5 22:19:26 2015 +1000

    Add a TODO line for a future release.

1	0	src/com/quollwriter/ui/sidebars/ChapterInformationSideBar.java

commit 575d44f3f24c3b4416a308d1813ca464b1ca61d9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Aug 5 19:50:16 2015 +1000

    * Changed a number of dataobjects so that their parentage is correctly set.
    
    * If the background image used for the idea board is deleted then revert back to the default.
    
    * When you delete a chapter remove the associated chapter information sidebar (if present).
    
    * Top align the text area form fields and remove extra scrollpanes.
    
    * Change the labels for editing an asset.
    
    * Resize the parent popup when expanding/contracting the link to tree.
    
    * Change creating a new project so that the project object is correct in the objectmanager.

10	6	src/com/quollwriter/Environment.java
2	0	src/com/quollwriter/data/Idea.java
10	0	src/com/quollwriter/data/IdeaType.java
2	0	src/com/quollwriter/data/NamedObject.java
2	0	src/com/quollwriter/data/Project.java
0	7	src/com/quollwriter/data/QCharacter.java
2	0	src/com/quollwriter/data/Warmup.java
86	0	src/com/quollwriter/db/ChapterDataHandler.java
56	19	src/com/quollwriter/db/ObjectManager.java
4	2	src/com/quollwriter/editors/ui/EditorsUIUtils.java
27	14	src/com/quollwriter/ui/AbstractProjectViewer.java
10	3	src/com/quollwriter/ui/EditPanel.java
3	0	src/com/quollwriter/ui/ProjectViewer.java
41	2	src/com/quollwriter/ui/actionHandlers/AbstractActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/AssetActionHandler.java
4	2	src/com/quollwriter/ui/actionHandlers/ChapterItemActionHandler.java
6	4	src/com/quollwriter/ui/actionHandlers/NoteActionHandler.java
16	3	src/com/quollwriter/ui/panels/IdeaBoard.java

commit 20848301812402b46c8e5f319956baf2b36bb7b2
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 2 13:54:38 2015 +1000

    Yet another size change.

2	2	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java

commit 96e3aac3d3d57ddc8dee25b46b464aaba89bd398
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 2 12:27:51 2015 +1000

    Font size change.

1	1	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java

commit bccc2fbbf648ea0bc0f7ca8f7af1afc9bb7d332b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 2 12:24:55 2015 +1000

    Standardize size of button text in editors sidebar.

2	2	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java

commit 92a88dd9943dc324d736559627c94a60e346d055
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 2 12:21:48 2015 +1000

    Change size of "click to login" button text.

1	1	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java

commit 6aecc7f318368deee33e50fa5ec76602b61aa6f7
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 2 12:16:08 2015 +1000

    Fix compile errors.

1	1	src/com/quollwriter/ui/UIUtils.java
1	1	src/com/quollwriter/ui/panels/Timeline.java

commit fab596f4e2d4d664fd6af9360e7221791a8eb48a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 2 12:11:43 2015 +1000

    Tweak to method return to prevent issues with calls to Font.deriveFont.

5	3	src/com/quollwriter/ui/UIUtils.java

commit a129efe3190dfb68486431745eaaa32c0f169505
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 2 12:05:03 2015 +1000

    Change font scaling call.

1	1	src/com/quollwriter/ui/UIUtils.java

commit 65fc6781f0ccddb4b417aaa62af3cbeeb07096e3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Aug 2 12:03:38 2015 +1000

    Add in midsized status icons.

-	-	imgs/status-away20.png
-	-	imgs/status-busy20.png
-	-	imgs/status-offline20.png
-	-	imgs/status-online20.png
-	-	imgs/status-snooze20.png

commit 6daee8512fa3939a3dcef0a398d0b6738cffbf18
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Aug 1 15:47:50 2015 +1000

    Changes to make this a full release and editor mode a beta.
    
    Add in links/tips for the patreon page.
    
    Update the whats new for a full release.

1	1	data/properties.xml
3	0	data/tips.xml
17	2	data/whats-new.xml
1	1	src/com/quollwriter/editors/ui/EditorRegister.java
1	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java
35	30	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java
36	1	src/com/quollwriter/ui/AbstractProjectViewer.java
2	0	src/com/quollwriter/ui/UIUtils.java
10	6	src/com/quollwriter/ui/panels/OptionsPanel.java

commit 014e97bd9c94b68668b150cb9bc461f013150363
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 29 23:48:20 2015 +1000

    Tweak to what's new text.

1	1	data/whats-new.xml

commit 484151b385978cc922e0ddaa496cad14493ab6cc
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 29 16:15:30 2015 +1000

    Revert back to using a scrollablebox for the editors list wrapper to ensure that things have the correct width.

1	1	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java

commit aff3e30cce066c9f394c8d58d0619adfe25c82b6
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 29 15:36:28 2015 +1000

    Ensure that we resize the project sidebar properly when using a PS|CH|OS layout.

2	1	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 71505284a00d6e57eaa2bd023d1e82515dd056ef
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 29 15:01:52 2015 +1000

    Only show the select a project table if the user has projects.

9	3	src/com/quollwriter/ui/FindOrOpen.java

commit aee6b4c2d5c271c8aea0301b9902edde8b173065
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 29 14:00:23 2015 +1000

    Fix an NPE when deleting a project and the user hasn't yet signed up for editor mode.

20	9	src/com/quollwriter/editors/EditorsEnvironment.java

commit 6eeb8fdee579dd61ddd49e601d9298e15ceaa143
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 29 12:44:52 2015 +1000

    Show a report bug button on the header when the version is beta.
    
    Expand the text about the 2.3b1 release.
    
    Disable the "Send relevant log files" checkbox in the report a bug popup when the version is beta.

1	1	data/whats-new.xml
29	1	src/com/quollwriter/ui/AbstractProjectViewer.java

commit ce3cb846675ec99ba9932fe99e61d1b3874527ae
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 29 11:43:17 2015 +1000

    Tweaks and fixes.

3	2	src/com/quollwriter/Startup.java
1	7	src/com/quollwriter/achievements/AchievementsManager.java
8	0	src/com/quollwriter/editors/EditorsEnvironment.java
1	2	src/com/quollwriter/editors/EditorsMessageHandler.java
1	1	src/com/quollwriter/editors/ui/ChatMessageAccordionItem.java
13	0	src/com/quollwriter/editors/ui/EditorsUIUtils.java
104	99	src/com/quollwriter/editors/ui/ProjectCommentsMessageBox.java
3	1	src/com/quollwriter/ui/AbstractProjectViewer.java
7	0	src/com/quollwriter/ui/FindOrOpen.java

commit a68c80141f777ddd3305f4dc6e3dfc5331d042cc
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jul 27 11:08:49 2015 +1000

    Improve message shown when can't open the last edited project.

14	1	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java

commit 8e133bb8a1ddb96a9490bdd862a5161cfe6c5767
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jul 26 21:19:04 2015 +1000

    If a user rule cannot be loaded, note the error and keep going rather than barfing.  Also delete the faulty file.

6	3	src/com/quollwriter/text/rules/RuleFactory.java

commit 0a758a0853c3da65fd52747e1c88e5bf73122650
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jul 26 20:48:38 2015 +1000

    Change to how the edit for is handled for problem finder rules.

1	63	src/com/quollwriter/editors/ui/EditorInfoBox.java
3	1	src/com/quollwriter/editors/ui/sidebars/ProjectCommentsSideBar.java
6	2	src/com/quollwriter/text/Rule.java
8	0	src/com/quollwriter/text/rules/AbstractDialogueRule.java
8	0	src/com/quollwriter/text/rules/AbstractParagraphRule.java
132	0	src/com/quollwriter/text/rules/AbstractRule.java
8	0	src/com/quollwriter/text/rules/AbstractSentenceRule.java
8	0	src/com/quollwriter/text/rules/AdverbRule.java
10	0	src/com/quollwriter/text/rules/ParagraphLengthRule.java
10	0	src/com/quollwriter/text/rules/ParagraphReadabilityRule.java
10	0	src/com/quollwriter/text/rules/PassiveSentenceRule.java
7	0	src/com/quollwriter/text/rules/SentenceComplexityRule.java
8	1	src/com/quollwriter/text/rules/SentenceLengthRule.java
13	1	src/com/quollwriter/text/rules/TooManyClausesRule.java
117	4	src/com/quollwriter/text/rules/WordFinder.java
45	267	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
40	7	src/com/quollwriter/ui/components/Form.java
7	0	src/com/quollwriter/ui/components/QSpellChecker.java
1	1	src/com/quollwriter/ui/panels/OptionsPanel.java

commit 896096df89b1360af533809d574daf8c5e97cd99
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 25 23:23:30 2015 +1000

    Better handling of display scaling.
    
    Fix for having a url that contains the name of an asset.
    
    Stop specifying the location of windows and leave it to the underlying windows manager.

2	1	src/com/quollwriter/Environment.java
0	1	src/com/quollwriter/Utils.java
2	1	src/com/quollwriter/editors/EditorsEnvironment.java
1	1	src/com/quollwriter/editors/ui/ChatMessageBox.java
1	1	src/com/quollwriter/editors/ui/EditorInfoBox.java
1	1	src/com/quollwriter/editors/ui/EditorInfoMessageBox.java
7	4	src/com/quollwriter/editors/ui/EditorLogin.java
1	1	src/com/quollwriter/editors/ui/EditorProjectViewer.java
8	8	src/com/quollwriter/editors/ui/EditorsUIUtils.java
1	1	src/com/quollwriter/editors/ui/InviteResponseMessageBox.java
5	1	src/com/quollwriter/editors/ui/MessageBox.java
1	1	src/com/quollwriter/editors/ui/NewProjectResponseMessageBox.java
1	1	src/com/quollwriter/editors/ui/sidebars/EditorPanel.java
1	1	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
6	6	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
27	22	src/com/quollwriter/editors/ui/sidebars/ProjectCommentsSideBar.java
12	10	src/com/quollwriter/ui/AbstractProjectViewer.java
2	1	src/com/quollwriter/ui/AccordionItem.java
2	2	src/com/quollwriter/ui/AchievementBox.java
2	3	src/com/quollwriter/ui/EditPanel.java
11	1	src/com/quollwriter/ui/FindOrOpen.java
4	1	src/com/quollwriter/ui/FullScreenFrame.java
6	3	src/com/quollwriter/ui/PopupWindow.java
94	28	src/com/quollwriter/ui/UIUtils.java
1	1	src/com/quollwriter/ui/components/Accordion.java
2	1	src/com/quollwriter/ui/components/QPopup.java
1	1	src/com/quollwriter/ui/panels/OptionsPanel.java
1	1	src/com/quollwriter/ui/panels/Timeline.java
1	1	src/com/quollwriter/ui/sidebars/ProjectSideBar.java
2	2	src/com/quollwriter/ui/sidebars/TextPropertiesSideBar.java
1	1	src/com/quollwriter/ui/sidebars/WarmupsSideBar.java

commit d114de3fb90c9dfb128ba11622607a90e313dc18
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 25 10:39:50 2015 +1000

    Changes to how the editor information messages are handled.

2	2	src/com/quollwriter/editors/DefaultEditorMessageProcessor.java
53	7	src/com/quollwriter/editors/EditorsEnvironment.java
76	2	src/com/quollwriter/editors/messages/EditorInfoMessage.java
187	4	src/com/quollwriter/editors/ui/EditorInfoMessageBox.java
20	3	src/com/quollwriter/editors/ui/EditorsUIUtils.java

commit cca869dac5f5e3865d30656ea2c98068ca4c0f3b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 25 08:57:29 2015 +1000

    Fix an NPE for the tool tip text.

8	1	src/com/quollwriter/ui/FindOrOpen.java

commit 64d58e294c9624dd9b762ba3627a491b3b93db0d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 25 07:27:50 2015 +1000

    Fex fixes relating to editor mode.

70	13	src/com/quollwriter/editors/EditorsEnvironment.java
1	1	src/com/quollwriter/editors/ui/EditorLogin.java
19	7	src/com/quollwriter/editors/ui/EditorRegister.java
1	0	src/com/quollwriter/editors/ui/EditorsUIUtils.java
17	0	src/com/quollwriter/editors/ui/InviteMessageBox.java

commit 958b86a73afb2558fa61c296c1d776e073a0fa03
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 25 07:26:16 2015 +1000

    Ensure that the size of the window is correct when we close the project.

8	2	src/com/quollwriter/ui/AbstractProjectViewer.java

commit f6d09932842e9832b269110dbc63b45def4746bb
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jul 25 07:25:09 2015 +1000

    Changes to the editor message related achievements.

61	6	data/achievements.xml
17	3	src/com/quollwriter/achievements/AchievementsManager.java
14	3	src/com/quollwriter/achievements/rules/EditorMessageAchievementRule.java

commit 9f1e48afc9d247481cb7b7cd791eaa3d8702666d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jul 24 00:04:00 2015 +1000

    More tweaks to the version... lawd when will this thing be finished.

3	3	src/com/quollwriter/Version.java

commit 4cdf664ae53a7ba28c48b10ffafab9f91f2298e5
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 23 22:57:54 2015 +1000

    Fixed a problem with null versions in the whats new.  Also added more text for the 2.3b1 whats new description.

1	1	data/whats-new.xml
10	1	src/com/quollwriter/ui/WhatsNew.java

commit 76ecb75dfa45dc367090a62515ad4bbbc907f22b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 23 22:26:57 2015 +1000

    Change to ensure versions compare correctly.

1	1	src/com/quollwriter/Version.java

commit f6d8c8263dc404f08e78b890f1b02e16c2be9c56
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 22 13:43:30 2015 +1000

    More version tweaking.

3	3	src/com/quollwriter/Version.java

commit 34b1760e56a1e836c7c8909a8875469ef169e22a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 22 13:32:38 2015 +1000

    Tweaks to how versioning is handled.

0	156	src/com/quollwriter/Environment.java
47	3	src/com/quollwriter/Version.java

commit 0f9ee26e0e46285d26abeeed5d7e9cc7e61bc63d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jul 20 23:06:32 2015 +1000

    * Changes to how versions are handled, better handling of betas.  Changed over the whats new to deal with it.
    
    * More consistent mouse event handling, hopefully will be prep work for a mac version.
    
    * Performance fix for the IconColumn, no longer sucks up 100% cpu due to repeated draw calls.

3	11	data/whats-new.xml
17	30	src/com/quollwriter/Environment.java
248	0	src/com/quollwriter/Version.java
96	68	src/com/quollwriter/editors/EditorsEnvironment.java
6	2	src/com/quollwriter/editors/ui/EditorChatBox.java
175	26	src/com/quollwriter/editors/ui/EditorsUIUtils.java
2	0	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
3	60	src/com/quollwriter/editors/ui/UpdateProjectMessageBox.java
2	2	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
1	1	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
411	190	src/com/quollwriter/ui/AbstractProjectViewer.java
1	0	src/com/quollwriter/ui/DefaultChapterItemViewPopupProvider.java
15	6	src/com/quollwriter/ui/FullScreenFrame.java
1	1	src/com/quollwriter/ui/FullScreenTextProperties.java
4	5	src/com/quollwriter/ui/GetLatestVersion.java
12	18	src/com/quollwriter/ui/IconColumn.java
5	2	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
3	1	src/com/quollwriter/ui/QuollPanel.java
5	7	src/com/quollwriter/ui/TextArea.java
2	1	src/com/quollwriter/ui/TextPropertiesEditPanel.java
103	93	src/com/quollwriter/ui/UIUtils.java
122	62	src/com/quollwriter/ui/WhatsNew.java
8	0	src/com/quollwriter/ui/components/QSpellChecker.java
79	0	src/com/quollwriter/ui/components/QTextEditor.java
1	2	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
156	203	src/com/quollwriter/ui/panels/IdeaBoard.java
15	10	src/com/quollwriter/ui/panels/OptionsPanel.java
10	18	src/com/quollwriter/ui/panels/QuollEditorPanel.java
3	2	src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java
11	7	src/com/quollwriter/ui/sidebars/TextPropertiesSideBar.java

commit 489f80e118471de38f1801b1022cae4b6f228091
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 15 18:42:17 2015 +1000

    Few tweaks to ensure things are displayed properly and that the show send/update project menu items are displayed when they should.

75	17	src/com/quollwriter/editors/ui/EditorInfoBox.java
1	1	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
3	6	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java
3	3	src/com/quollwriter/ui/AccordionItem.java

commit 766ee136e0c5e5e72d031fbb60476e144ec6d359
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 15 17:00:07 2015 +1000

    More tweaks to how messages are displayed/handled.

23	2	src/com/quollwriter/data/editors/EditorEditor.java
42	1	src/com/quollwriter/editors/ui/EditorInfoBox.java
1	1	src/com/quollwriter/editors/ui/EditorRemovedMessageBox.java
22	3	src/com/quollwriter/editors/ui/EditorsUIUtils.java
1	1	src/com/quollwriter/editors/ui/MessageBox.java
61	1	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
27	10	src/com/quollwriter/editors/ui/NewProjectResponseMessageBox.java
4	1	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java
65	4	src/com/quollwriter/editors/ui/UpdateProjectMessageBox.java
3	1	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
2	6	src/com/quollwriter/ui/TextArea.java

commit b2f791d85d9ca1324247ba168bb5405b23e481c6
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 15 12:53:48 2015 +1000

    Fix an issue with the placeholder text in the TextArea.  Couple of fixes related to removing contacts.

16	2	src/com/quollwriter/editors/ui/EditorsUIUtils.java
8	6	src/com/quollwriter/ui/TextArea.java

commit 02b5f23d38436b2b58f01b0ea392ad4f5749cbc5
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 15 11:25:09 2015 +1000

    Changes to how information is presented for the contact.

212	224	src/com/quollwriter/editors/ui/EditorInfoBox.java
2	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java

commit 002bd90ac17bdddef9251c4437bcba3be4442513
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 15 10:38:38 2015 +1000

    More changes to how contact/editor removal is handled.

1	1	src/com/quollwriter/editors/EditorsMessageHandler.java
6	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java
91	76	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java

commit d1d262f22e0ade0e69c57314076f795bf79d1186
Author: Gary Bentley <gary@quollwriter.com>
Date:   Tue Jul 14 14:50:37 2015 +1000

    More changes to removal of contacts.

1	1	data/editor-schema/update-scripts/0-1.xml
1	0	src/com/quollwriter/data/editors/Invite.java
62	141	src/com/quollwriter/editors/EditorsEnvironment.java
8	0	src/com/quollwriter/editors/EditorsMessageHandler.java
1	8	src/com/quollwriter/editors/ui/EditorInfoBox.java
6	1	src/com/quollwriter/editors/ui/EditorRemovedMessageBox.java
129	113	src/com/quollwriter/editors/ui/EditorsUIUtils.java
4	1	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java

commit 437b1619735e67edd428bf3bc99ad044a0ce28f6
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon Jul 13 23:49:05 2015 +1000

    Changes to how removing an editor is handled.

11	0	src/com/quollwriter/Environment.java
9	3	src/com/quollwriter/editors/EditorsEnvironment.java
40	14	src/com/quollwriter/editors/EditorsMessageHandler.java
7	0	src/com/quollwriter/editors/ui/EditorChaptersAccordionItem.java
28	21	src/com/quollwriter/editors/ui/EditorInfoBox.java
12	47	src/com/quollwriter/editors/ui/EditorProjectViewer.java
15	7	src/com/quollwriter/editors/ui/EditorRemovedMessageBox.java
142	85	src/com/quollwriter/editors/ui/EditorsUIUtils.java
9	0	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
5	12	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java

commit 24a17cb934f36bc4a0cf1ad874321be40659b95b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jul 12 15:21:25 2015 +1000

    Set the editor from date when receive a project acceptance and the editor is pending.

1	1	src/com/quollwriter/editors/ui/NewProjectResponseMessageBox.java

commit 80bbd3175f33c3af329e6b447547135d7d3eaae4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jul 12 14:41:05 2015 +1000

    New event(s) for project editors.  Better handling of removing editors and a few bug fixes when dealing with project editors.

46	7	src/com/quollwriter/editors/DefaultEditorMessageProcessor.java
117	8	src/com/quollwriter/editors/EditorsEnvironment.java
43	0	src/com/quollwriter/editors/ProjectEditorChangedEvent.java
10	0	src/com/quollwriter/editors/ProjectEditorChangedListener.java
38	18	src/com/quollwriter/editors/ui/EditorInfoBox.java
3	0	src/com/quollwriter/editors/ui/EditorRemovedMessageBox.java
27	0	src/com/quollwriter/editors/ui/EditorsUIUtils.java
283	170	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java
4	1	src/com/quollwriter/ui/panels/OptionsPanel.java

commit 00b8fb0c7b7e95e369ca591e3eb7802a465ad9c8
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jul 10 23:36:57 2015 +1000

    Few fixes and more consistent handling of undealt with messages.

60	30	src/com/quollwriter/editors/ui/EditorInfoBox.java
7	0	src/com/quollwriter/editors/ui/EditorsUIUtils.java
1	2	src/com/quollwriter/editors/ui/ProjectCommentsMessageBox.java
24	1	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java
41	195	src/com/quollwriter/editors/ui/UpdateProjectMessageBox.java
11	0	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java

commit eacf23f115b5dd4ff4574779706955ca5540cff7
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 9 23:15:16 2015 +1000

    Fix compile errors, duh.

1	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java
1	1	src/com/quollwriter/editors/ui/NewProjectResponseMessageBox.java

commit 1c8774716a02a417ba2e475b6545ad0c7e3274d7
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 9 23:09:23 2015 +1000

    Handle updating of project editors correctly when receive a new project response message.

1	0	src/com/quollwriter/editors/ui/EditorsUIUtils.java
12	0	src/com/quollwriter/editors/ui/NewProjectResponseMessageBox.java

commit 4d0cf046dd900dea7e014eeaeaed58d1e56fa882
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jul 9 15:32:34 2015 +1000

    Better handling of invites when the user does not have an editors service account.

35	5	src/com/quollwriter/data/editors/ProjectEditor.java
16	0	src/com/quollwriter/editors/EditorsEnvironment.java
68	25	src/com/quollwriter/editors/EditorsMessageHandler.java
41	4	src/com/quollwriter/editors/EditorsWebServiceHandler.java
1	1	src/com/quollwriter/editors/ui/EditorChatBox.java
3	1	src/com/quollwriter/editors/ui/EditorInfoBox.java
2	1	src/com/quollwriter/editors/ui/NewProjectResponseMessageBox.java
1	1	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java

commit 88ad4705018a0e135ed2b205c37b0eeb8460928a
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 8 22:09:05 2015 +1000

    Update the no editors section of the editors sidebar to say contacts instead.
    
    Remove some commented code relating to the unused LayeredPaneLayout.

5	0	data/object-names.xml
2	2	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java
3	40	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
0	11	src/com/quollwriter/ui/sidebars/ProjectSideBar.java

commit 7802ff5055bc82ae45e0d7c51b74436fb10e646b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 8 21:44:08 2015 +1000

    Remove use of LayeredPaneLayout.

3	3	src/com/quollwriter/ui/sidebars/ProjectSideBar.java

commit f9e8d1ed72f62d51a1ecff899295f01d66a94542
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jul 8 21:40:07 2015 +1000

    Changes to support more interactivity in the editors sidebar.

12	10	data/editors-first-use-help.txt
19	0	src/com/quollwriter/Environment.java
21	0	src/com/quollwriter/data/Project.java
14	0	src/com/quollwriter/db/EditorEditorDataHandler.java
25	2	src/com/quollwriter/db/ProjectEditorDataHandler.java
42	26	src/com/quollwriter/editors/DefaultEditorMessageProcessor.java
28	2	src/com/quollwriter/editors/EditorsEnvironment.java
6	1	src/com/quollwriter/editors/EditorsWebServiceHandler.java
67	5	src/com/quollwriter/editors/messages/InviteResponseMessage.java
2	2	src/com/quollwriter/editors/ui/EditorChatBox.java
648	209	src/com/quollwriter/editors/ui/EditorInfoBox.java
120	5	src/com/quollwriter/editors/ui/EditorRemovedMessageBox.java
486	52	src/com/quollwriter/editors/ui/EditorsUIUtils.java
32	32	src/com/quollwriter/editors/ui/InviteMessageBox.java
177	1	src/com/quollwriter/editors/ui/InviteResponseMessageBox.java
2	2	src/com/quollwriter/editors/ui/MessageBox.java
92	633	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
423	97	src/com/quollwriter/editors/ui/NewProjectResponseMessageBox.java
55	1	src/com/quollwriter/editors/ui/ProjectCommentsMessageBox.java
105	4	src/com/quollwriter/editors/ui/ProjectEditStopMessageBox.java
535	0	src/com/quollwriter/editors/ui/ProjectEditorsAccordionItem.java
1	2	src/com/quollwriter/editors/ui/UpdateProjectMessageBox.java
1	1	src/com/quollwriter/editors/ui/sidebars/EditorPanel.java
2	2	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
102	29	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
1	1	src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java
7	8	src/com/quollwriter/ui/AbstractProjectViewer.java
49	6	src/com/quollwriter/ui/AccordionItem.java
21	14	src/com/quollwriter/ui/AssetAccordionItem.java
29	7	src/com/quollwriter/ui/ChapterFieldAccordionItem.java
12	5	src/com/quollwriter/ui/ChaptersAccordionItem.java
14	1	src/com/quollwriter/ui/FindOrOpen.java
28	5	src/com/quollwriter/ui/LinkedToAccordionItem.java
14	8	src/com/quollwriter/ui/NotesAccordionItem.java
1	0	src/com/quollwriter/ui/ProjectViewer.java
15	5	src/com/quollwriter/ui/UIUtils.java
13	5	src/com/quollwriter/ui/WarmupsAccordionItem.java
26	1	src/com/quollwriter/ui/components/Dragger.java
22	2	src/com/quollwriter/ui/components/QPopup.java
2	2	src/com/quollwriter/ui/panels/OptionsPanel.java
66	20	src/com/quollwriter/ui/sidebars/ProjectSideBar.java

commit cffdedd96466be703934172fd822eac7a63b40e7
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jun 27 22:36:20 2015 +1000

    * Add in avatar/name handling if they are sent back in the newprojectresponse message.

15	0	src/com/quollwriter/editors/DefaultEditorMessageProcessor.java
14	0	src/com/quollwriter/editors/messages/NewProjectResponseMessage.java
4	4	src/com/quollwriter/editors/ui/EditorChatBox.java

commit 9733868d654ec33c2afa1eda77169e304b182162
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jun 27 22:17:41 2015 +1000

    * Don't show comments indicator in editorsinfobox if editor is still pending.
    * Ensure we subscribe to editor when the newprojectresponse message is received with an accepted status.

8	1	src/com/quollwriter/editors/DefaultEditorMessageProcessor.java
4	1	src/com/quollwriter/editors/ui/EditorInfoBox.java

commit 38a570c958193d1c8aaafb7595b3eb9b6c0cbac0
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jun 27 21:54:27 2015 +1000

    Send the name/avatar in the newprojectresponse message.  Screen out some messages from the important messages.

2	2	src/com/quollwriter/editors/EditorsEnvironment.java
1	8	src/com/quollwriter/editors/messages/InviteResponseMessage.java
84	3	src/com/quollwriter/editors/messages/NewProjectResponseMessage.java
4	4	src/com/quollwriter/editors/ui/EditorChatBox.java
14	48	src/com/quollwriter/editors/ui/EditorsUIUtils.java

commit 587a18f8ea1ed307595e1ee65791382fe59ceca3
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jun 27 19:40:25 2015 +1000

    More fixes and removal of commented code.

11	212	src/com/quollwriter/editors/ui/EditorInfoBox.java
2	1	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
3	3	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java

commit 885c125dcc2dd7358ff200810f7044396bd2f93b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jun 27 14:33:07 2015 +1000

    Couple of bug fixes, movement of some listeners and changes to how editors are displayed in the editors sidebar.

15	1	src/com/quollwriter/db/EditorEditorDataHandler.java
12	22	src/com/quollwriter/editors/ui/EditorInfoBox.java
2	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java
4	38	src/com/quollwriter/editors/ui/sidebars/EditorPanel.java
1	1	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
19	249	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java

commit 4cea5f8cc999da738ccdfce707d8c99f48cc9fd5
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jun 27 11:55:16 2015 +1000

    Added better/more consistent handling of editors in the editors sidebar.

111	10	src/com/quollwriter/editors/ui/EditorInfoBox.java
268	259	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
7	0	src/com/quollwriter/ui/AccordionItem.java

commit 35e241b0d9fd1e50036b808d7ff336aac46d631e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jun 27 09:43:22 2015 +1000

    More changes to support the new way to handle messages.

3	0	src/com/quollwriter/Environment.java
2	0	src/com/quollwriter/editors/DefaultEditorMessageProcessor.java
7	3	src/com/quollwriter/editors/EditorsMessageHandler.java
23	112	src/com/quollwriter/editors/ui/ChatMessageAccordionItem.java
115	3	src/com/quollwriter/editors/ui/ChatMessageBox.java
152	132	src/com/quollwriter/editors/ui/EditorInfoBox.java
2	7	src/com/quollwriter/editors/ui/EditorProjectViewer.java
335	21	src/com/quollwriter/editors/ui/EditorsUIUtils.java
5	5	src/com/quollwriter/editors/ui/MessageAccordionItem.java
6	0	src/com/quollwriter/editors/ui/NewProjectResponseMessageBox.java
11	2	src/com/quollwriter/editors/ui/UpdateProjectMessageBox.java
42	147	src/com/quollwriter/editors/ui/sidebars/EditorPanel.java
28	6	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
2	260	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
1	146	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 04c06cd562a55f3763faaaa8d9ec8246aec70e4d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 25 13:45:33 2015 +1000

    * Added ability to log editor messages to their own log file and enable from options panel.
    * More changes to support new style of message display.

2	1	src/com/quollwriter/Constants.java
1	1	src/com/quollwriter/editors/DefaultEditorMessageProcessor.java
7	0	src/com/quollwriter/editors/EditorsEnvironment.java
60	5	src/com/quollwriter/editors/EditorsMessageHandler.java
3	0	src/com/quollwriter/editors/messages/EditorMessage.java
185	18	src/com/quollwriter/editors/ui/EditorInfoBox.java
90	3	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
1	1	src/com/quollwriter/editors/ui/ProjectCommentsMessageBox.java
166	89	src/com/quollwriter/editors/ui/sidebars/EditorPanel.java
21	1	src/com/quollwriter/ui/AbstractProjectViewer.java
27	19	src/com/quollwriter/ui/panels/OptionsPanel.java

commit 95b7b70e4fd8e23f48e63095b7c5f05688e4dbcd
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 24 14:47:31 2015 +1000

    Few changes/fixes for how project comments are handled.

4	0	src/com/quollwriter/editors/messages/ProjectCommentsMessage.java
8	2	src/com/quollwriter/editors/messages/TypeEncoder.java
6	2	src/com/quollwriter/editors/ui/EditorsUIUtils.java
2	12	src/com/quollwriter/editors/ui/sidebars/EditorPanel.java

commit ea179aaea613b1b709f12c2327f15d0e2b91bb7f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 24 12:00:47 2015 +1000

    Changes to support new way of displaying messages for an editor.

14	0	src/com/quollwriter/Environment.java
50	0	src/com/quollwriter/Utils.java
3	0	src/com/quollwriter/data/DataObject.java
1	1	src/com/quollwriter/data/editors/EditorEditor.java
5	2	src/com/quollwriter/db/EditorMessageDataHandler.java
10	7	src/com/quollwriter/db/ProjectDataHandler.java
5	5	src/com/quollwriter/editors/DefaultEditorMessageProcessor.java
6	29	src/com/quollwriter/editors/EditorsEnvironment.java
12	10	src/com/quollwriter/editors/EditorsMessageHandler.java
12	1	src/com/quollwriter/editors/messages/DefaultEditorMessageFilter.java
177	0	src/com/quollwriter/editors/ui/ChatMessageAccordionItem.java
461	318	src/com/quollwriter/editors/ui/EditorInfoBox.java
1	1	src/com/quollwriter/editors/ui/EditorLogin.java
2	37	src/com/quollwriter/editors/ui/EditorProjectViewer.java
1	1	src/com/quollwriter/editors/ui/EditorRegister.java
71	329	src/com/quollwriter/editors/ui/EditorsUIUtils.java
14	17	src/com/quollwriter/editors/ui/InviteMessageBox.java
84	24	src/com/quollwriter/editors/ui/MessageAccordionItem.java
7	6	src/com/quollwriter/editors/ui/MessageBox.java
451	83	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
50	101	src/com/quollwriter/editors/ui/ProjectCommentsMessageBox.java
58	26	src/com/quollwriter/editors/ui/UpdateProjectMessageBox.java
390	273	src/com/quollwriter/editors/ui/sidebars/EditorPanel.java
4	1	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
464	195	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
2	1	src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java
144	0	src/com/quollwriter/ui/AbstractProjectViewer.java
35	0	src/com/quollwriter/ui/FullScreenFrame.java
4	4	src/com/quollwriter/ui/Notification.java
36	18	src/com/quollwriter/ui/UIUtils.java
4	16	src/com/quollwriter/ui/components/Header.java
1	0	src/com/quollwriter/ui/panels/HelpTextPanel.java

commit 1709efb0c4cc77393da312f3d5cd059c5a07ed6b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 18 11:22:44 2015 +1000

    * Hide the typing notification when the normal interaction message is received.

7	0	src/com/quollwriter/editors/ui/EditorChatBox.java

commit 56d99fd1cbc063babf7ed824434d99c7192d7784
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 14 16:07:35 2015 +1000

    * Add the InteractionMessage to the message factory.
    * Fix a problem with filling the toString properties for EditorMessage when the editor hasn't been set.

1	1	src/com/quollwriter/editors/messages/EditorMessage.java
2	0	src/com/quollwriter/editors/messages/MessageFactory.java

commit bdd18fbebd7a001a899f006f0ba37400ac79f2e6
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 14 14:26:13 2015 +1000

    * Moved an error reporting message to be more visible.

4	4	src/com/quollwriter/editors/EditorsEnvironment.java
1	1	src/com/quollwriter/editors/ui/EditorsUIUtils.java

commit 31129e67bfc4d459ab52270b663d34498047a0ba
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 14 13:11:27 2015 +1000

    * The debug notification now only shows up when the debug mode is changed rather than at startup (regardless of the debug state)
    * Quick & dirty lockout (too late in development now to introduce a new feature) of the HelpTextPanel from saving state when a project is closed and thus causing an error when the project is reopened.

17	9	src/com/quollwriter/ui/AbstractProjectViewer.java

commit bb1cb3fa806a905ba5c85a9ad6beb5d63d23b581
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 14 12:38:41 2015 +1000

    * Changed editor services urls so that the correct host will be reached (allows for debug and non-debug servers)

9	9	data/properties.xml

commit b98aa4fe1207b155287a373b41c9682c8666f744
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jun 14 11:52:53 2015 +1000

    * Addition of new HelpTextPanel to show help text within a main panel.
    * Editors side bar now uses the new HelpTextPanel to show the first use help for editors mode.
    * First use help text updated.
    * Changed the tips to use a standard JTextPane and it now sets the border correctly when notifications are removed.
    * Tweaked the editors register so that it defaults to a /editors directory for storing the editors db.
    * Couple of fixes for not having the editors environment already setup.
    * Changed Environment so that it always calls EditorsEnvironment.init and the init will setup some properties.

8	9	data/editors-first-use-help.txt
1	21	src/com/quollwriter/Environment.java
55	7	src/com/quollwriter/editors/EditorsEnvironment.java
11	11	src/com/quollwriter/editors/EditorsWebServiceCall.java
3	1	src/com/quollwriter/editors/EditorsWebServiceHandler.java
1	1	src/com/quollwriter/editors/ui/EditorRegister.java
9	49	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
48	19	src/com/quollwriter/ui/AbstractProjectViewer.java
10	2	src/com/quollwriter/ui/WhatsNew.java
155	0	src/com/quollwriter/ui/panels/HelpTextPanel.java

commit 53e6512e72cd3de5f3541c27aa8a2325ea0bcea2
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 12 18:09:31 2015 +1000

    Tweaks to the first project window to ensure everything is correctly visible.

9	2	src/com/quollwriter/ui/FirstProject.java
4	2	src/com/quollwriter/ui/NewProjectPanel.java
18	31	src/com/quollwriter/ui/PopupWindow.java

commit 9915059b6c2f5579e7ace06c9b3ab87a54ccca13
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 12 14:19:56 2015 +1000

    Remove unneeded log statements.

3	3	src/com/quollwriter/ui/WhatsNew.java

commit 8a92b348bab544b861e551d46369bcf606e6ae99
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 12 13:34:42 2015 +1000

    Removal of commented old code.  Changes to make dictionary file download occur correctly.

7	223	src/com/quollwriter/DictionaryProvider.java
7	0	src/com/quollwriter/Environment.java
1	1	src/com/quollwriter/editors/EditorsEnvironment.java
36	254	src/com/quollwriter/ui/AbstractProjectViewer.java
3	2	src/com/quollwriter/ui/FirstProject.java
3	8	src/com/quollwriter/ui/components/QTextEditor.java
22	3	src/com/quollwriter/ui/panels/OptionsPanel.java

commit e74d00b019fa064761161ab1ee69bbf6af8123f0
Author: Gary Bentley <gary@quollwriter.com>
Date:   Fri Jun 12 11:40:13 2015 +1000

    Changing default layout to be project on left, chapters on right.

1	1	data/properties.xml

commit 19556585ba2817d31b435b52d9668299ef81c34f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 11 20:35:37 2015 +1000

    Remove mention of editorcomment.

1	25	data/schema/update-scripts/0-1.xml
0	24	data/schema/update-scripts/8-9.xml
1	13	data/schema/update-scripts/create-views.xml

commit 9024e513fbdc17ed8e8be9871cd0dcdbd791e520
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 11 11:16:04 2015 +1000

    Removing deleted files.

-	-	3rd-party-jars/h2-1.1.115.jar.old
0	18	data/schema/views/editor.v
-	-	imgs/online16.png
0	2037	src/com/quollwriter/EditorsWebServiceHandler.java
0	459	src/com/quollwriter/text/ParagraphIterator.java
0	189	src/com/quollwriter/ui/About.java
0	212	src/com/quollwriter/ui/ChatHistoryAccordionItem.java
0	208	src/com/quollwriter/ui/ContactSupport.java
0	199	src/com/quollwriter/ui/EditorChaptersAccordionItem.java
0	1201	src/com/quollwriter/ui/EditorViewer.java
0	237	src/com/quollwriter/ui/ReportAProblem.java
0	735	src/com/quollwriter/ui/panels/AdvertiseProjectPanel.java
0	1061	src/com/quollwriter/ui/panels/EditorEditorPanel.java
0	666	src/com/quollwriter/ui/panels/RegisterAsAnEditorPanel.java
0	133	src/com/quollwriter/ui/sidebars/EditorFindInfoBox.java
0	164	src/com/quollwriter/ui/sidebars/EditorFindPanel.java
0	173	src/com/quollwriter/ui/sidebars/EditorInfoBox.java
0	112	src/com/quollwriter/ui/sidebars/EditorList.java
0	640	src/com/quollwriter/ui/sidebars/EditorPanel.java
0	41	src/com/quollwriter/ui/sidebars/EditorProjectSideBar.java

commit 6a58b2e5358f228b046298c5c9dcb293b4c89355
Author: Gary Bentley <gary@quollwriter.com>
Date:   Thu Jun 11 10:40:29 2015 +1000

    Updating the what's new to support betas.

9	1	data/whats-new.xml
19	1	src/com/quollwriter/ui/WhatsNew.java

commit 09ca44dbed9536b4babb2df67ca02d50deb8798d
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Jun 10 23:28:17 2015 +1000

    Initial addition of all editor mode code and changes for version 2.3.

7	0	3rd-party-jars/bc-license.txt
-	-	3rd-party-jars/bcpg-jdk15on-151.jar
-	-	3rd-party-jars/bcprov-jdk15on-151.jar
-	-	3rd-party-jars/jazzy-core.jar
-	-	3rd-party-jars/jcalendar-1.4.jar
-	-	3rd-party-jars/jxmpp-core-0.4.1.jar
-	-	3rd-party-jars/jxmpp-util-cache-0.4.1.jar
-	-	3rd-party-jars/smack-core-4.1.0.jar
-	-	3rd-party-jars/smack-extensions-4.1.0.jar
-	-	3rd-party-jars/smack-im-4.1.0.jar
-	-	3rd-party-jars/smack-java7-4.1.0.jar
202	0	3rd-party-jars/smack-license.txt
-	-	3rd-party-jars/smack-sasl-provided-4.1.0.jar
-	-	3rd-party-jars/smack-tcp-4.1.0.jar
-	-	3rd-party-jars/suggester-1.1.2.jar
27	0	3rd-party-jars/suggester-license.txt
207	37	build.xml
88	1	data/achievements.xml
-	-	data/editor-no-avatar.png
232	0	data/editor-schema/update-scripts/0-1.xml
60	0	data/editor-schema/update-scripts/create-views.xml
24	0	data/editor-schema/views/editor.v
18	0	data/editor-schema/views/message.v
15	0	data/editor-schema/views/namedobject.v
20	0	data/editor-schema/views/projecteditor.v
17	0	data/editors-first-use-help.txt
1	0	data/editors-schema-version.txt
-	-	data/layout-ch-os-ps.png
-	-	data/layout-ch-ps.png
-	-	data/layout-os-ch-ps.png
-	-	data/layout-ps-ch-os.png
-	-	data/layout-ps-ch.png
-	-	data/layout-ps-os-ch.png
-	-	data/license.rtf
5	0	data/object-names.xml
2	2	data/problem-finder-rules.xml
41	13	data/properties.xml
-	-	data/qw-editors-message-popup.png
1	1	data/schema-version.txt
59	41	data/schema/update-scripts/0-1.xml
101	26	data/schema/update-scripts/8-9.xml
29	6	data/schema/update-scripts/create-views.xml
4	1	data/schema/views/book.v
5	1	data/schema/views/chapter.v
4	1	data/schema/views/character.v
4	1	data/schema/views/idea.v
4	1	data/schema/views/ideatype.v
4	1	data/schema/views/location.v
4	1	data/schema/views/namedobject.v
6	1	data/schema/views/note.v
4	1	data/schema/views/outlineitem.v
4	1	data/schema/views/project.v
16	0	data/schema/views/projectversion.v
4	1	data/schema/views/qobject.v
4	1	data/schema/views/researchitem.v
4	1	data/schema/views/scene.v
4	1	data/schema/views/warmup.v
19	19	data/tips.xml
1	1	data/version.txt
16	0	data/whats-new.xml
-	-	imgs/accepted16.png
-	-	imgs/accepted20.png
-	-	imgs/close24.png
-	-	imgs/comment16.png
-	-	imgs/comment24.png
-	-	imgs/edit-properties20.png
-	-	imgs/editor-edit-complete24.png
-	-	imgs/editor16.png
-	-	imgs/editor24.png
-	-	imgs/editors-list24.png
-	-	imgs/find24.png
-	-	imgs/left-quote16.png
-	-	imgs/project20.png
-	-	imgs/rejected16.png
-	-	imgs/rejected20.png
-	-	imgs/sidebars16.png
-	-	imgs/status-away16.png
-	-	imgs/status-busy16.png
-	-	imgs/status-offline16.png
-	-	imgs/status-online16.png
-	-	imgs/status-snooze16.png
-	-	imgs/typing24.gif
-	-	imgs/warning24.png
8	0	src/com/quollwriter/Base64.java
87	8	src/com/quollwriter/Constants.java
72	20	src/com/quollwriter/DefaultIconProvider.java
205	10	src/com/quollwriter/DictionaryProvider.java
1412	449	src/com/quollwriter/Environment.java
350	34	src/com/quollwriter/JSONEncoder.java
40	0	src/com/quollwriter/ObjectRefURLStreamHandlerFactory.java
13	13	src/com/quollwriter/Startup.java
210	3	src/com/quollwriter/Utils.java
3	3	src/com/quollwriter/achievements/AchievementsManager.java
8	0	src/com/quollwriter/achievements/rules/AchievementRuleFactory.java
209	0	src/com/quollwriter/achievements/rules/EditorMessageAchievementRule.java
10	0	src/com/quollwriter/achievements/rules/SessionAchievementRule.java
2	0	src/com/quollwriter/data/Asset.java
65	12	src/com/quollwriter/data/Book.java
98	14	src/com/quollwriter/data/Chapter.java
34	7	src/com/quollwriter/data/ChapterItem.java
203	24	src/com/quollwriter/data/DataObject.java
8	0	src/com/quollwriter/data/IdeaType.java
21	7	src/com/quollwriter/data/NamedObject.java
70	10	src/com/quollwriter/data/Note.java
2	0	src/com/quollwriter/data/OutlineItem.java
475	65	src/com/quollwriter/data/Project.java
56	0	src/com/quollwriter/data/ProjectVersion.java
15	1	src/com/quollwriter/data/Scene.java
11	3	src/com/quollwriter/data/comparators/ChapterItemSorter.java
19	5	src/com/quollwriter/data/comparators/NamedObjectSorter.java
15	20	src/com/quollwriter/data/editors/AbstractEditorObject.java
181	1	src/com/quollwriter/data/editors/EditorAccount.java
507	17	src/com/quollwriter/data/editors/EditorEditor.java
249	0	src/com/quollwriter/data/editors/Invite.java
214	0	src/com/quollwriter/data/editors/ProjectEditor.java
73	189	src/com/quollwriter/db/BookDataHandler.java
694	173	src/com/quollwriter/db/ChapterDataHandler.java
33	16	src/com/quollwriter/db/CharacterDataHandler.java
17	14	src/com/quollwriter/db/DataHandler.java
356	0	src/com/quollwriter/db/EditorEditorDataHandler.java
858	0	src/com/quollwriter/db/EditorMessageDataHandler.java
24	22	src/com/quollwriter/db/EditorProjectDataHandler.java
30	15	src/com/quollwriter/db/IdeaDataHandler.java
36	34	src/com/quollwriter/db/IdeaTypeDataHandler.java
22	16	src/com/quollwriter/db/LinkDataHandler.java
32	16	src/com/quollwriter/db/LocationDataHandler.java
292	118	src/com/quollwriter/db/NoteDataHandler.java
36	22	src/com/quollwriter/db/ObjectDataHandler.java
987	426	src/com/quollwriter/db/ObjectManager.java
161	205	src/com/quollwriter/db/OutlineItemDataHandler.java
312	148	src/com/quollwriter/db/ProjectDataHandler.java
272	0	src/com/quollwriter/db/ProjectEditorDataHandler.java
341	0	src/com/quollwriter/db/ProjectVersionDataHandler.java
41	26	src/com/quollwriter/db/ResearchItemDataHandler.java
62	189	src/com/quollwriter/db/SceneDataHandler.java
21	20	src/com/quollwriter/db/WarmupDataHandler.java
857	0	src/com/quollwriter/editors/DefaultEditorMessageProcessor.java
185	0	src/com/quollwriter/editors/DefaultEditorsWebServiceErrorAction.java
33	0	src/com/quollwriter/editors/EditorChangedEvent.java
10	0	src/com/quollwriter/editors/EditorChangedListener.java
28	0	src/com/quollwriter/editors/EditorEvent.java
30	0	src/com/quollwriter/editors/EditorInteractionEvent.java
10	0	src/com/quollwriter/editors/EditorInteractionListener.java
44	0	src/com/quollwriter/editors/EditorMessageEvent.java
10	0	src/com/quollwriter/editors/EditorMessageListener.java
18	0	src/com/quollwriter/editors/EditorMessageProcessor.java
3011	0	src/com/quollwriter/editors/EditorsEnvironment.java
1769	0	src/com/quollwriter/editors/EditorsMessageHandler.java
577	0	src/com/quollwriter/editors/EditorsObjectManager.java
417	0	src/com/quollwriter/editors/EditorsUtils.java
8	0	src/com/quollwriter/editors/EditorsWebServiceAction.java
543	0	src/com/quollwriter/editors/EditorsWebServiceCall.java
2483	0	src/com/quollwriter/editors/EditorsWebServiceHandler.java
216	0	src/com/quollwriter/editors/EditorsWebServiceResult.java
28	0	src/com/quollwriter/editors/UserOnlineStatusEvent.java
10	0	src/com/quollwriter/editors/UserOnlineStatusListener.java
508	0	src/com/quollwriter/editors/messages/AbstractProjectMessage.java
43	0	src/com/quollwriter/editors/messages/DefaultEditorMessageFilter.java
112	0	src/com/quollwriter/editors/messages/EditorChatMessage.java
139	0	src/com/quollwriter/editors/messages/EditorInfoMessage.java
477	0	src/com/quollwriter/editors/messages/EditorMessage.java
8	0	src/com/quollwriter/editors/messages/EditorMessageFilter.java
71	0	src/com/quollwriter/editors/messages/EditorRemovedMessage.java
165	0	src/com/quollwriter/editors/messages/ErrorMessage.java
118	0	src/com/quollwriter/editors/messages/InteractionMessage.java
152	0	src/com/quollwriter/editors/messages/InviteMessage.java
186	0	src/com/quollwriter/editors/messages/InviteResponseMessage.java
160	0	src/com/quollwriter/editors/messages/MessageFactory.java
38	0	src/com/quollwriter/editors/messages/MessageFieldNames.java
16	0	src/com/quollwriter/editors/messages/MessageType.java
737	0	src/com/quollwriter/editors/messages/NewProjectMessage.java
171	0	src/com/quollwriter/editors/messages/NewProjectResponseMessage.java
369	0	src/com/quollwriter/editors/messages/ProjectCommentsMessage.java
151	0	src/com/quollwriter/editors/messages/ProjectEditStopMessage.java
115	0	src/com/quollwriter/editors/messages/PublicKeyMessage.java
414	0	src/com/quollwriter/editors/messages/TypeEncoder.java
498	0	src/com/quollwriter/editors/messages/UpdateProjectMessage.java
51	0	src/com/quollwriter/editors/ui/ChatMessageBox.java
385	0	src/com/quollwriter/editors/ui/CommentActionHandler.java
110	0	src/com/quollwriter/editors/ui/DeleteCommentActionHandler.java
244	0	src/com/quollwriter/editors/ui/EditorChaptersAccordionItem.java
424	0	src/com/quollwriter/editors/ui/EditorChatBox.java
1147	0	src/com/quollwriter/editors/ui/EditorInfoBox.java
48	0	src/com/quollwriter/editors/ui/EditorInfoMessageBox.java
620	0	src/com/quollwriter/editors/ui/EditorLogin.java
1820	0	src/com/quollwriter/editors/ui/EditorProjectViewer.java
1031	0	src/com/quollwriter/editors/ui/EditorRegister.java
63	0	src/com/quollwriter/editors/ui/EditorRemovedMessageBox.java
5417	0	src/com/quollwriter/editors/ui/EditorsUIUtils.java
186	0	src/com/quollwriter/editors/ui/InviteMessageBox.java
69	0	src/com/quollwriter/editors/ui/InviteResponseMessageBox.java
260	0	src/com/quollwriter/editors/ui/MessageAccordionItem.java
358	0	src/com/quollwriter/editors/ui/MessageBox.java
132	0	src/com/quollwriter/editors/ui/MessageBoxFactory.java
839	0	src/com/quollwriter/editors/ui/NewProjectMessageBox.java
258	0	src/com/quollwriter/editors/ui/NewProjectResponseMessageBox.java
251	0	src/com/quollwriter/editors/ui/ProjectCommentsChaptersAccordionItem.java
386	0	src/com/quollwriter/editors/ui/ProjectCommentsMessageBox.java
173	0	src/com/quollwriter/editors/ui/ProjectCommentsViewer.java
173	0	src/com/quollwriter/editors/ui/ProjectEditStopMessageBox.java
793	0	src/com/quollwriter/editors/ui/ProjectSentReceivedViewer.java
1245	0	src/com/quollwriter/editors/ui/SendProjectWizard.java
325	0	src/com/quollwriter/editors/ui/UpdateProjectMessageBox.java
736	0	src/com/quollwriter/editors/ui/panels/AdvertiseProjectPanel.java
513	0	src/com/quollwriter/editors/ui/panels/ChapterCommentsPanel.java
1032	0	src/com/quollwriter/editors/ui/panels/EditorChapterPanel.java
666	0	src/com/quollwriter/editors/ui/panels/RegisterAsAnEditorPanel.java
133	0	src/com/quollwriter/editors/ui/sidebars/EditorFindInfoBox.java
166	0	src/com/quollwriter/editors/ui/sidebars/EditorFindPanel.java
112	0	src/com/quollwriter/editors/ui/sidebars/EditorList.java.old
663	0	src/com/quollwriter/editors/ui/sidebars/EditorPanel.java
615	0	src/com/quollwriter/editors/ui/sidebars/EditorProjectSideBar.java
2261	0	src/com/quollwriter/editors/ui/sidebars/EditorsSideBar.java
456	0	src/com/quollwriter/editors/ui/sidebars/ProjectCommentsSideBar.java
219	0	src/com/quollwriter/editors/ui/sidebars/ProjectSentReceivedSideBar.java
57	2	src/com/quollwriter/events/MouseEventHandler.java
7	6	src/com/quollwriter/events/SideBarEvent.java
2	0	src/com/quollwriter/events/SideBarListener.java
7	44	src/com/quollwriter/exporter/EPUBDocumentExporter.java
195	29	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
76	77	src/com/quollwriter/text/IgnoreCheckbox.java
65	10	src/com/quollwriter/text/Issue.java
32	8	src/com/quollwriter/text/Paragraph.java
460	498	src/com/quollwriter/text/ProblemFinder.java
45	9	src/com/quollwriter/text/Sentence.java
40	5	src/com/quollwriter/text/TextIterator.java
83	453	src/com/quollwriter/text/TextUtilities.java
15	1	src/com/quollwriter/text/Word.java
21	107	src/com/quollwriter/text/rules/AdverbRule.java
50	2	src/com/quollwriter/text/rules/ParagraphLengthRule.java
17	0	src/com/quollwriter/text/rules/ParagraphReadabilityRule.java
37	12	src/com/quollwriter/text/rules/PassiveSentenceRule.java
13	0	src/com/quollwriter/text/rules/SentenceComplexityRule.java
11	0	src/com/quollwriter/text/rules/SentenceLengthRule.java
11	0	src/com/quollwriter/text/rules/TooManyClausesRule.java
32	2	src/com/quollwriter/text/rules/WordFinder.java
2731	723	src/com/quollwriter/ui/AbstractProjectViewer.java
18	6	src/com/quollwriter/ui/AccordionItem.java
43	4	src/com/quollwriter/ui/AppearsInChaptersEditPanel.java
15	17	src/com/quollwriter/ui/AssetAccordionItem.java
2	1	src/com/quollwriter/ui/ChapterFieldAccordionItem.java
156	0	src/com/quollwriter/ui/ChapterFindResultsBox.java
17	18	src/com/quollwriter/ui/ChapterItemMoveHandler.java
0	0	src/com/quollwriter/ui/ChapterItemViewPanelProvider.java
17	0	src/com/quollwriter/ui/ChapterItemViewPopupProvider.java
25	0	src/com/quollwriter/ui/ChapterItemViewer.java
68	29	src/com/quollwriter/ui/ChaptersAccordionItem.java
3	0	src/com/quollwriter/ui/ConvertWarmupToProject.java
177	6	src/com/quollwriter/ui/DebugConsole.java
417	0	src/com/quollwriter/ui/DefaultChapterItemViewPopupProvider.java
21	3	src/com/quollwriter/ui/DetailsEditPanel.java
35	92	src/com/quollwriter/ui/DictionaryManager.java
2	2	src/com/quollwriter/ui/EditItemTypes.java
1	1	src/com/quollwriter/ui/EditNoteTypes.java
107	52	src/com/quollwriter/ui/ExportProject.java
47	9	src/com/quollwriter/ui/FileFinder.java
178	62	src/com/quollwriter/ui/FindOrOpen.java
99	0	src/com/quollwriter/ui/FindResultsBox.java
29	37	src/com/quollwriter/ui/FullScreenFrame.java
1	0	src/com/quollwriter/ui/FullScreenOverlay.java
127	196	src/com/quollwriter/ui/GetLatestVersion.java
12	4	src/com/quollwriter/ui/HTMLPanel.java
244	77	src/com/quollwriter/ui/IconColumn.java
43	17	src/com/quollwriter/ui/ImageSelector.java
162	120	src/com/quollwriter/ui/ImportProject.java
91	19	src/com/quollwriter/ui/ItemTypeHandler.java
28	2	src/com/quollwriter/ui/MessageWindow.java
52	0	src/com/quollwriter/ui/NamedObjectFindResultsBox.java
10	1	src/com/quollwriter/ui/NamedObjectPreviewPopup.java
62	15	src/com/quollwriter/ui/NewProjectPanel.java
95	16	src/com/quollwriter/ui/NoteTypeHandler.java
6	8	src/com/quollwriter/ui/NotesAccordionItem.java
100	16	src/com/quollwriter/ui/Notification.java
45	73	src/com/quollwriter/ui/ObjectTypeNameChanger.java
47	28	src/com/quollwriter/ui/PopupWindow.java
95	16	src/com/quollwriter/ui/PopupWizard.java
4	2	src/com/quollwriter/ui/PopupsSupported.java
90	128	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
4	0	src/com/quollwriter/ui/ProjectEvent.java
28	11	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
290	127	src/com/quollwriter/ui/ProjectViewer.java
8	0	src/com/quollwriter/ui/ProjectViewerAction.java
29	15	src/com/quollwriter/ui/QuollPanel.java
20	4	src/com/quollwriter/ui/SplashScreen.java
3	0	src/com/quollwriter/ui/StarBar.java
243	0	src/com/quollwriter/ui/TextArea.java
30	9	src/com/quollwriter/ui/TextInputWindow.java
6	3	src/com/quollwriter/ui/TextPropertiesEditPanel.java
68	36	src/com/quollwriter/ui/TypesEditor.java
9	1	src/com/quollwriter/ui/TypesHandler.java
1872	337	src/com/quollwriter/ui/UIUtils.java
283	289	src/com/quollwriter/ui/WarmupPromptSelect.java
9	21	src/com/quollwriter/ui/WarmupsAccordionItem.java
240	57	src/com/quollwriter/ui/WarmupsViewer.java
9	9	src/com/quollwriter/ui/WhatsNew.java
510	0	src/com/quollwriter/ui/Wizard.java
1	0	src/com/quollwriter/ui/WizardStep.java
85	33	src/com/quollwriter/ui/WordCountTimerBox.java
100	35	src/com/quollwriter/ui/actionHandlers/AbstractActionHandler.java
8	1	src/com/quollwriter/ui/actionHandlers/AddNewItemTypeActionHandler.java
8	1	src/com/quollwriter/ui/actionHandlers/AddNewNoteTypeActionHandler.java
13	1	src/com/quollwriter/ui/actionHandlers/ChapterItemActionHandler.java
2	0	src/com/quollwriter/ui/actionHandlers/DeleteChapterItemActionHandler.java
1	0	src/com/quollwriter/ui/actionHandlers/DeleteOutlineItemActionHandler.java
2	33	src/com/quollwriter/ui/actionHandlers/DeleteProjectActionHandler.java
55	0	src/com/quollwriter/ui/actionHandlers/DeleteWarmupActionHandler.java
2	1	src/com/quollwriter/ui/actionHandlers/FindSynonymsActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/NewIdeaTypeActionHandler.java
108	14	src/com/quollwriter/ui/actionHandlers/NoteActionHandler.java
13	1	src/com/quollwriter/ui/actionHandlers/OutlineItemChapterActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/OutlineItemFormatDetails.java
2	2	src/com/quollwriter/ui/actionHandlers/ProjectViewerActionHandler.java
174	0	src/com/quollwriter/ui/actionHandlers/RenameWarmupActionHandler.java
13	3	src/com/quollwriter/ui/actionHandlers/ShowChapterItemActionHandler.java
9	0	src/com/quollwriter/ui/actionHandlers/TextInputActionHandler.java
1	1	src/com/quollwriter/ui/charts/AllWordCountsChart.java
16	2	src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java
5	4	src/com/quollwriter/ui/components/Accordion.java
1	1	src/com/quollwriter/ui/components/Form.java
18	2	src/com/quollwriter/ui/components/Header.java
2	2	src/com/quollwriter/ui/components/IconProvider.java
17	2	src/com/quollwriter/ui/components/Markup.java
10	0	src/com/quollwriter/ui/components/PopupAdapter.java
26	0	src/com/quollwriter/ui/components/PopupEvent.java
14	0	src/com/quollwriter/ui/components/PopupListener.java
153	12	src/com/quollwriter/ui/components/QPopup.java
59	75	src/com/quollwriter/ui/components/QSpellChecker.java
67	9	src/com/quollwriter/ui/components/QTextEditor.java
1	0	src/com/quollwriter/ui/components/ScrollableBox.java
14	0	src/com/quollwriter/ui/components/SpellChecker.java
27	2	src/com/quollwriter/ui/components/TabHeader.java
1	1	src/com/quollwriter/ui/events/DictionaryChangedEvent.java
8	16	src/com/quollwriter/ui/forms/SelectFormItem.java
1153	0	src/com/quollwriter/ui/panels/AbstractEditableEditorPanel.java
287	720	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
30	14	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
220	0	src/com/quollwriter/ui/panels/AbstractViewOnlyEditorPanel.java
34	18	src/com/quollwriter/ui/panels/AssetViewPanel.java
7	2	src/com/quollwriter/ui/panels/IdeaBoard.java
736	82	src/com/quollwriter/ui/panels/OptionsPanel.java
171	95	src/com/quollwriter/ui/panels/QuollEditorPanel.java
105	111	src/com/quollwriter/ui/panels/WarmupEditorPanel.java
118	2	src/com/quollwriter/ui/renderers/ProjectTreeCellRenderer.java
22	2	src/com/quollwriter/ui/renderers/SelectableProjectTreeCellRenderer.java
90	16	src/com/quollwriter/ui/sidebars/AbstractSideBar.java
14	0	src/com/quollwriter/ui/sidebars/AccordionItemsSideBar.java
31	4	src/com/quollwriter/ui/sidebars/AppearsInChaptersSideBar.java
9	0	src/com/quollwriter/ui/sidebars/ChapterInformationSideBar.java
0	637	src/com/quollwriter/ui/sidebars/EditorsSideBar.java
54	469	src/com/quollwriter/ui/sidebars/Finder.java
14	0	src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java
67	4	src/com/quollwriter/ui/sidebars/ProjectSideBar.java
13	0	src/com/quollwriter/ui/sidebars/TextPropertiesSideBar.java
87	16	src/com/quollwriter/ui/sidebars/WarmupsSideBar.java
226	171	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit 725d1720dc5e50da377616c70224c1780ec3c5a6
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jan 25 12:20:34 2015 +1000

    Fix broken line.

1	2	src/com/quollwriter/ui/AbstractProjectViewer.java

commit 5e46453d4b45aae7d7ae6e92ea038b45b2a12800
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Jan 25 11:04:31 2015 +1000

    Version 2.2.5 changes.
    
    Fixes
    =====
    
      * Fixed an error with the .docx project exporter that prevented the project from being exported when there was style information at the end of a paragraph.
      * Removed some old text utility code that is no longer needed (most is superceeded by the TextIterator/Paragraph/Sentence/Word model).

2	2	build.xml
1	1	data/version.txt
8	0	data/whats-new.xml
1	7	src/com/quollwriter/Environment.java
159	63	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
83	453	src/com/quollwriter/text/TextUtilities.java
2	1	src/com/quollwriter/ui/AbstractProjectViewer.java
17	2	src/com/quollwriter/ui/components/Markup.java

commit adc4efb85e639fb3b71af8129b43d905a32038fb
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Aug 2 22:11:48 2014 +1000

    Version 2.2.4 changes.
    
    Fixes
    =====
    
      * Fixed an error where a project couldn't be exported properly if the project name contained an OS reserved character (such as /).
      * Keyboard shortcuts for bold/italic/underline now toggle on and off.
      * Adding a choice to not save changes when you exit QW with unsaved changes present.
      * Updated the encoding for a couple of files to allow for compilation on Java 1.8.  Also fixed a compile conflict with the Base64 class.
      * Fixed an issue with the export where leading unformatted text would be missing from a sentence upon export.
      * Linking of asset names in descriptions now works on the full name rather than potential partial word matches.
      * Added some prep work for changing over dictionaries to use the disk mechanism.
      * Modified the TextIterator/Sentence/Paragraph to use NavigableSet/NavigableMap to allow for easier iteration over search results.

1	1	data/version.txt
9	1	data/whats-new.xml
203	1	src/com/quollwriter/DictionaryProvider.java
1	13	src/com/quollwriter/Environment.java
3	1	src/com/quollwriter/exporter/EPUBDocumentExporter.java
2	0	src/com/quollwriter/exporter/HTMLDocumentExporter.java
49	23	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
2	1	src/com/quollwriter/exporter/PDFDocumentExporter.java
5	5	src/com/quollwriter/text/Paragraph.java
5	5	src/com/quollwriter/text/Sentence.java
49	3	src/com/quollwriter/text/TextIterator.java
36	1	src/com/quollwriter/text/TextUtilities.java
1	1	src/com/quollwriter/tools/CreateThesaurusFiles.java
2	2	src/com/quollwriter/tools/EncodeStrings.java
54	24	src/com/quollwriter/ui/AbstractProjectViewer.java
1	1	src/com/quollwriter/ui/GetLatestVersion.java
61	73	src/com/quollwriter/ui/UIUtils.java
37	1	src/com/quollwriter/ui/components/QTextEditor.java
2	2	src/com/quollwriter/ui/panels/OptionsPanel.java

commit 27ad3dc5cf938c6c45d93b3109cb55f38d43adc9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat Jun 14 21:38:48 2014 +1000

    Version 2.2.3 changes.
    
    Fixes:
    ======
    
    * Fixed finder not displaying all results and no scrollbars showing when needed.
    * Removed broken achievement: addresearchitemsocialweblink
    * Fixed an error where you cannot export an empty chapter.
    * Fixed the tab state not saving the order correctly.

1	1	build.xml
3	2	data/achievements.xml
1	1	data/version.txt
8	0	data/whats-new.xml
7	0	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
22	13	src/com/quollwriter/ui/AbstractProjectViewer.java
0	2	src/com/quollwriter/ui/sidebars/Finder.java

commit 0ab40b1ebbfe0a20711ef3feae4de4a1e61cf019
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 18 22:24:21 2014 +1000

    Fixes an edge case where an invalid object link (unlikely to happen) can lock up the UI.

0	3	src/com/quollwriter/data/DataObject.java
14	0	src/com/quollwriter/db/ObjectManager.java

commit 1838462cfe110d8c9c864e5a1b641f8c0708b6e4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun May 18 21:53:27 2014 +1000

    Fixes a problem with the Readability Indices not having sane values.  Also the chapter information should display fully now.  Finally, the sidebars should have a more consistent size.

9	1	data/whats-new.xml
6	4	src/com/quollwriter/data/ReadabilityIndices.java
17	1	src/com/quollwriter/text/TextIterator.java
26	49	src/com/quollwriter/ui/AbstractProjectViewer.java
14	6	src/com/quollwriter/ui/sidebars/AccordionItemsSideBar.java
2	1	src/com/quollwriter/ui/sidebars/ChapterInformationSideBar.java
1	1	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit 715bda3beae945ded5d81b7ac205223231f1abba
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 17 23:50:22 2014 +1000

    Removal of full stop, yes I'm that finicky.

1	1	data/whats-new.xml

commit 9e99bcfec4a49ded85a9baef4d66f3e6cb034e85
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 17 23:41:57 2014 +1000

    Updating the whats new information for version 2.2.1

8	0	data/whats-new.xml

commit 2ad1cf3a92cb1e25f7066ff3425a4c8cb09ed909
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 17 23:20:38 2014 +1000

    Modified build file to no longer append version to jar file names.  Updated version to 2.2.1 in preparation for next release.

7	7	build.xml
1	1	data/version.txt

commit f830b88bae334b03fce97136ad919478a62f0efb
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 17 22:05:33 2014 +1000

      * Enusred that changing the name of an asset in the sidebar will update the associated tab for that asset (if open).

15	1	src/com/quollwriter/ui/ProjectViewer.java
5	3	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
7	0	src/com/quollwriter/ui/panels/AssetViewPanel.java

commit f5f84c8ee9d59abbe944b8beab2fd662491e5f1b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sat May 17 21:49:48 2014 +1000

      * ReadabilityIndices now use the TextIterator/Paragraph/Sentence.
      * Added methods to TextIterator/Paragraph/Sentence to get information about word and syllable counts.
      * Fixed an issue where the appears in chapters panel was showing no results when an asset had an alias that wasn't used within the text.
      * Multiple word searches will show in the find.  Multi-word names will now show in the appears in chapters panel (and side bar).
      * When an item from the appears in chapters panel/find they will now open to the correct sentence if the chapter doesn't have a tab open.
      * Ideas now need to be explicitly opened/closed and will remain open rather than auto closing.
      * Removed use of ParagraphIterator/SentenceIterator.  They are deprecated and will be removed in a future release.
      * When splitting a chapter and got some text selected, if an undo is performed the text highlight is removed.
      * Middle clicking on a tab label to close it no longer causes an error (and thus prevents the tab from being closed).
      * Added a flag to QuollPanel to indicate when it is "ready for use".  A number of actions are performed out of sequence on the event thread, the flag is set on a per panel basis (usually at the end of the "setState" method) to indicate that it has completed its setup and is ready for use/modification.  This is needed for actions that require multiple things to happen such as showing a chapter item when the chapter isn't currently being edited.
      * Renaming a chapter or asset will now display a popup window asking for the name rather than editing the name in the tree.

23	0	src/com/quollwriter/data/Book.java
92	0	src/com/quollwriter/data/Project.java
13	6	src/com/quollwriter/data/ReadabilityIndices.java
35	3	src/com/quollwriter/text/Paragraph.java
3	2	src/com/quollwriter/text/ParagraphIterator.java
66	18	src/com/quollwriter/text/Sentence.java
3	2	src/com/quollwriter/text/SentenceIterator.java
56	1	src/com/quollwriter/text/TextIterator.java
17	21	src/com/quollwriter/text/TextUtilities.java
14	0	src/com/quollwriter/text/Word.java
0	107	src/com/quollwriter/text/rules/RuleFactory.java
1	1	src/com/quollwriter/text/rules/WordFinder.java
12	6	src/com/quollwriter/ui/AbstractProjectViewer.java
45	35	src/com/quollwriter/ui/AppearsInChaptersEditPanel.java
6	1	src/com/quollwriter/ui/AssetAccordionItem.java
2	12	src/com/quollwriter/ui/ChaptersAccordionItem.java
8	0	src/com/quollwriter/ui/EditorViewer.java
7	6	src/com/quollwriter/ui/NamedObjectPreviewPopup.java
2	0	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
122	104	src/com/quollwriter/ui/ProjectViewer.java
16	1	src/com/quollwriter/ui/QuollPanel.java
141	24	src/com/quollwriter/ui/UIUtils.java
8	0	src/com/quollwriter/ui/WarmupsViewer.java
179	0	src/com/quollwriter/ui/actionHandlers/RenameAssetActionHandler.java
108	89	src/com/quollwriter/ui/actionHandlers/RenameChapterActionHandler.java
12	4	src/com/quollwriter/ui/actionHandlers/SplitChapterActionHandler.java
2	0	src/com/quollwriter/ui/components/QTextEditor.java
11	2	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
3	1	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
2	0	src/com/quollwriter/ui/panels/AchievementsPanel.java
2	0	src/com/quollwriter/ui/panels/AdvertiseProjectPanel.java
17	7	src/com/quollwriter/ui/panels/AssetViewPanel.java
2	0	src/com/quollwriter/ui/panels/FullScreenQuollPanel.java
51	70	src/com/quollwriter/ui/panels/IdeaBoard.java
2	0	src/com/quollwriter/ui/panels/OptionsPanel.java
2	0	src/com/quollwriter/ui/panels/RegisterAsAnEditorPanel.java
2	0	src/com/quollwriter/ui/panels/WordCloudPanel.java
2	0	src/com/quollwriter/ui/panels/WordCountPanel.java
1	1	src/com/quollwriter/ui/renderers/ProjectTreeCellRenderer.java
6	0	src/com/quollwriter/ui/sidebars/AppearsInChaptersSideBar.java
29	34	src/com/quollwriter/ui/sidebars/Finder.java

commit 58f9fcffd3080d323cdabfa1d64f5a6183b0c58e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon May 5 22:36:58 2014 +1000

    Removing dependence on installer log4j config file

1	15	build.xml

commit f6e8f8cc4f19393ae11f932473d9dd3ce0e4ad13
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon May 5 21:34:25 2014 +1000

    Updating readme... again to remove 4 spaces before *s

5	7	README.md

commit ec0d2a30a703f3df256aa4d2cbf88627e9c019a4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon May 5 21:33:01 2014 +1000

    Updating readme

10	2	README.md

commit f8eb81e5dc790348d345184d121d2fb43fce65c9
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon May 5 21:25:28 2014 +1000

    Updating build file

74	158	build.xml

commit d5a5926bdbf6302bebac5d9640fecfa803ccb97b
Author: Gary Bentley <gary@quollwriter.com>
Date:   Mon May 5 20:41:27 2014 +1000

    Changes for version 2.2

3	0	.gitignore
202	0	3rd-party-jars/apache-pool-license.txt
-	-	3rd-party-jars/cue.language.jar
-	-	3rd-party-jars/epublib-core-3.1.jar
-	-	3rd-party-jars/forms-1.3.0.jar
-	-	3rd-party-jars/h2-1.2.127.jar
-	-	3rd-party-jars/h2-1.3.175.jar
-	-	3rd-party-jars/h2mig_pagestore_addon.jar
-	-	3rd-party-jars/imgscalr-lib-4.2.jar
-	-	3rd-party-jars/jgoodies-common-1.8.0.jar
-	-	3rd-party-jars/jgoodies-forms-1.8.0.jar
-	-	3rd-party-jars/jgoodies-looks-2.6.0.jar
-	-	3rd-party-jars/jsoup-1.7.2.jar
-	-	3rd-party-jars/kxml2-2.3.0.jar
-	-	3rd-party-jars/looks-2.3.1.jar
-	-	3rd-party-jars/old-jars-maybe-needed/JDateChooser.jar
-	-	3rd-party-jars/old-jars-maybe-needed/gentlyWEB-properties-1.3.jar
-	-	3rd-party-jars/old-jars-maybe-needed/l2fprod-common-all.jar.old
-	-	3rd-party-jars/xmlpull-1.1.3.4d_b4_min.jar
1	1	data/achievements.xml
-	-	data/compressed-chapter-context-menu.png
-	-	data/default-find-image.png
1	7	data/default-project-properties.xml
0	45	data/dictionaries/README
0	239	data/dictionaries/altamer.0
0	51	data/dictionaries/altamer.1
0	90	data/dictionaries/altamer.2
0	1835	data/dictionaries/american.0
0	741	data/dictionaries/american.1
0	6767	data/dictionaries/american.2
0	1899	data/dictionaries/british.0
0	743	data/dictionaries/british.1
0	6688	data/dictionaries/british.2
0	1835	data/dictionaries/en/american.0
0	741	data/dictionaries/en/american.1
0	6767	data/dictionaries/en/american.2
0	1899	data/dictionaries/en/british.0
0	743	data/dictionaries/en/british.1
0	6688	data/dictionaries/en/british.2
0	47160	data/dictionaries/en/english.0
0	20864	data/dictionaries/en/english.1
0	37616	data/dictionaries/en/english.2
0	19708	data/dictionaries/en/english.3
0	47158	data/dictionaries/english.0
0	20864	data/dictionaries/english.1
0	37616	data/dictionaries/english.2
0	19708	data/dictionaries/english.3
0	1003	data/dictionaries/moby/mwords/10001fr.equ
0	1002	data/dictionaries/moby/mwords/10002fr.equ
0	10196	data/dictionaries/moby/mwords/10196pla.ces
0	113809	data/dictionaries/moby/mwords/113809of.fic
0	1185	data/dictionaries/moby/mwords/1185kjvf.req
0	21986	data/dictionaries/moby/mwords/21986na.mes
0	256772	data/dictionaries/moby/mwords/256772co.mpo
0	354984	data/dictionaries/moby/mwords/354984si.ngl
0	366	data/dictionaries/moby/mwords/366often.mis
0	3897	data/dictionaries/moby/mwords/3897male.nam
0	4160	data/dictionaries/moby/mwords/4160offi.cia
0	467	data/dictionaries/moby/mwords/467popul.arf
0	4946	data/dictionaries/moby/mwords/4946fema.len
0	6213	data/dictionaries/moby/mwords/6213acro.nym
0	74550	data/dictionaries/moby/mwords/74550com.mon
0	128	data/dictionaries/moby/mwords/readme.txt
0	832	data/dictionaries/moby/mwords/usaconst.itu
0	0	data/dictionaries/not-found.txt
0	28564	data/dictionaries/rogets-thesaurus.txt
0	102683	data/dictionaries/thesaurus-1.0.txt
0	102683	data/dictionaries/thesaurus-index-1.0.txt
-	-	data/dictionaries/thesaurus-new.rar
0	30261	data/dictionaries/thesaurus.txt
0	102683	data/dictionaries/word-file-index.txt
0	1	data/dictionaries/words-parts-of-speech.txt
-	-	data/edit-position-example.png
1	1	data/export/epub/appendix-template.xml
1	1	data/export/epub/chapter-template.xml
2	0	data/export/epub/css-template.xml
-	-	data/none-compressed-chapter-context-menu.png
57	0	data/object-names.xml
28	0	data/problem-finder-rules.xml
143	0	data/properties.xml
1	1	data/schema-version.txt
55	0	data/schema/update-scripts/0-1.xml
16	0	data/schema/update-scripts/7-8.xml
55	0	data/schema/update-scripts/8-9.xml
102	69	data/schema/update-scripts/create-views.xml
17	15	data/schema/views/chapter.v
18	0	data/schema/views/editor.v
16	0	data/schema/views/editorproject.v
5	0	data/test-book.xml
25	1	data/tips.xml
1	1	data/version.txt
57	1	data/whats-new.xml
-	-	imgs/bold20.png
-	-	imgs/chapter-split16.png
-	-	imgs/clear16.png
-	-	imgs/copy20.png
-	-	imgs/cut16.png
-	-	imgs/cut20.png
-	-	imgs/dialogue16.png
-	-	imgs/distraction-free-exit24.png
-	-	imgs/distraction-free24.png
-	-	imgs/download16.png
-	-	imgs/download24.png
-	-	imgs/edit-complete16.png
-	-	imgs/edit-in-progress16.png
-	-	imgs/edit-marker16.png
-	-	imgs/edit-point16.png
-	-	imgs/editors16.png
-	-	imgs/editors24.png
-	-	imgs/error-red16.png
-	-	imgs/folder16.png
-	-	imgs/italic20.png
-	-	imgs/loading24.gif
-	-	imgs/lock16.png
-	-	imgs/logo.png
-	-	imgs/logo2.png
-	-	imgs/logo3.png
-	-	imgs/message16.png
-	-	imgs/move16.png
-	-	imgs/noavatar.png
-	-	imgs/ok-green16.png
-	-	imgs/online16.png
-	-	imgs/paste16.png
-	-	imgs/paste20.png
-	-	imgs/redo20.png
-	-	imgs/remove-edit-point16.png
-	-	imgs/save-green16.png
-	-	imgs/send-message16.png
-	-	imgs/stop16.png
-	-	imgs/stop24.png
-	-	imgs/tools16.png
-	-	imgs/underline20.png
-	-	imgs/undo20.png
-	-	imgs/warmup16.png
-	-	imgs/warning16.png
-	-	imgs/whats-new16.png
-	-	imgs/whats-new24.png
-	-	imgs/window-icon-new.png
49	0	src/com/quollwriter/ByteArrayDataSource.java
131	4	src/com/quollwriter/Constants.java
37	11	src/com/quollwriter/DictionaryProvider.java
13	0	src/com/quollwriter/DownloadListener.java
2037	0	src/com/quollwriter/EditorsWebServiceHandler.java
1499	322	src/com/quollwriter/Environment.java
524	0	src/com/quollwriter/JSONEncoder.java
20	0	src/com/quollwriter/ObjectRefURLStreamHandlerFactory.java
3	4	src/com/quollwriter/Startup.java
163	0	src/com/quollwriter/UrlDownloader.java
284	1	src/com/quollwriter/Utils.java
3	1	src/com/quollwriter/achievements/AchievementsManager.java
330	5	src/com/quollwriter/data/Chapter.java
28	9	src/com/quollwriter/data/ChapterItem.java
3	0	src/com/quollwriter/data/DataObject.java
148	0	src/com/quollwriter/data/DateRange.java
35	3	src/com/quollwriter/data/NamedObject.java
10	1	src/com/quollwriter/data/Note.java
15	2	src/com/quollwriter/data/OutlineItem.java
301	1	src/com/quollwriter/data/Project.java
8	1	src/com/quollwriter/data/QObject.java
2	3	src/com/quollwriter/data/ReadabilityIndices.java
8	1	src/com/quollwriter/data/ResearchItem.java
56	1	src/com/quollwriter/data/Scene.java
37	3	src/com/quollwriter/data/comparators/ChapterItemSorter.java
108	0	src/com/quollwriter/data/editors/AbstractEditorObject.java
44	0	src/com/quollwriter/data/editors/ChatMessage.java
74	0	src/com/quollwriter/data/editors/EditorAccount.java
115	0	src/com/quollwriter/data/editors/EditorAuthor.java
350	0	src/com/quollwriter/data/editors/EditorEditor.java
287	0	src/com/quollwriter/data/editors/EditorProject.java
12	117	src/com/quollwriter/db/ChapterDataHandler.java
243	0	src/com/quollwriter/db/EditorProjectDataHandler.java
11	0	src/com/quollwriter/db/GeneralObjectProvider.java
172	41	src/com/quollwriter/db/ObjectManager.java
21	0	src/com/quollwriter/db/ObjectProvider.java
8	2	src/com/quollwriter/db/ProjectDataHandler.java
120	314	src/com/quollwriter/exporter/EPUBDocumentExporter.java
111	10	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
1	1	src/com/quollwriter/importer/HTMLDocumentImporter.java
1	1	src/com/quollwriter/importer/MSWordDocumentImporter.java
5	0	src/com/quollwriter/synonyms/SynonymProvider.java
16	0	src/com/quollwriter/synonyms/providers/BigHugeLabsSynonymProvider.java
184	33	src/com/quollwriter/synonyms/providers/BuiltInSynonymProvider.java
66	0	src/com/quollwriter/text/DialogueInd.java
14	7	src/com/quollwriter/text/IgnoreCheckbox.java
41	22	src/com/quollwriter/text/Issue.java
4	4	src/com/quollwriter/text/IssueSorter.java
76	0	src/com/quollwriter/text/NoTextBlock.java
423	0	src/com/quollwriter/text/Paragraph.java
458	0	src/com/quollwriter/text/ParagraphIterator.java
633	189	src/com/quollwriter/text/ProblemFinder.java
7	3	src/com/quollwriter/text/Rule.java
500	0	src/com/quollwriter/text/Sentence.java
92	18	src/com/quollwriter/text/SentenceIterator.java
31	0	src/com/quollwriter/text/TextBlock.java
305	0	src/com/quollwriter/text/TextIterator.java
393	26	src/com/quollwriter/text/TextUtilities.java
200	0	src/com/quollwriter/text/Word.java
121	0	src/com/quollwriter/text/WordsCapitalizer.java
1	1	src/com/quollwriter/text/rules/AbstractDialogueRule.java
33	0	src/com/quollwriter/text/rules/AbstractParagraphRule.java
1	1	src/com/quollwriter/text/rules/AbstractRule.java
3	1	src/com/quollwriter/text/rules/AbstractSentenceRule.java
93	2	src/com/quollwriter/text/rules/AdverbRule.java
1	1	src/com/quollwriter/text/rules/DialogueRule.java
238	0	src/com/quollwriter/text/rules/ParagraphLengthRule.java
323	0	src/com/quollwriter/text/rules/ParagraphReadabilityRule.java
12	0	src/com/quollwriter/text/rules/ParagraphRule.java
166	7	src/com/quollwriter/text/rules/PassiveSentenceRule.java
222	19	src/com/quollwriter/text/rules/RuleFactory.java
241	0	src/com/quollwriter/text/rules/SentenceComplexityRule.java
24	1	src/com/quollwriter/text/rules/SentenceLengthRule.java
5	3	src/com/quollwriter/text/rules/SentenceRule.java
44	1	src/com/quollwriter/text/rules/TooManyClausesRule.java
60	32	src/com/quollwriter/text/rules/WordFinder.java
3	3	src/com/quollwriter/ui/About.java
1747	645	src/com/quollwriter/ui/AbstractProjectViewer.java
17	9	src/com/quollwriter/ui/AccordionItem.java
5	5	src/com/quollwriter/ui/AppearsInChaptersEditPanel.java
14	5	src/com/quollwriter/ui/BackgroundImagePanel.java
10	8	src/com/quollwriter/ui/BackgroundSelector.java
7	0	src/com/quollwriter/ui/ChapterDetailsEditPanel.java
332	0	src/com/quollwriter/ui/ChapterItemMoveHandler.java
82	0	src/com/quollwriter/ui/ChapterItemMoveMouseHandler.java
128	0	src/com/quollwriter/ui/ChapterItemTransferHandler.java
10	0	src/com/quollwriter/ui/ChapterItemViewer.java
185	120	src/com/quollwriter/ui/ChaptersAccordionItem.java
15	2	src/com/quollwriter/ui/CharacterDetailsEditPanel.java
236	0	src/com/quollwriter/ui/ChatAccordionItem.java
212	0	src/com/quollwriter/ui/ChatHistoryAccordionItem.java
101	56	src/com/quollwriter/ui/ContactSupport.java
86	112	src/com/quollwriter/ui/ConvertWarmupToProject.java
2	1	src/com/quollwriter/ui/DebugConsole.java
39	3	src/com/quollwriter/ui/DetailsEditPanel.java
104	84	src/com/quollwriter/ui/DictionaryManager.java
1	1	src/com/quollwriter/ui/EditItemTypes.java
2	2	src/com/quollwriter/ui/EditNoteTypes.java
52	29	src/com/quollwriter/ui/EditPanel.java
199	0	src/com/quollwriter/ui/EditorChaptersAccordionItem.java
1193	0	src/com/quollwriter/ui/EditorViewer.java
125	0	src/com/quollwriter/ui/ErrorWindow.java
2	0	src/com/quollwriter/ui/ExportProject.java
5	4	src/com/quollwriter/ui/FileFinder.java
792	493	src/com/quollwriter/ui/FindOrOpen.java
147	0	src/com/quollwriter/ui/FirstProject.java
486	205	src/com/quollwriter/ui/FullScreenFrame.java
90	0	src/com/quollwriter/ui/FullScreenOverlay.java
27	3	src/com/quollwriter/ui/FullScreenTextProperties.java
35	12	src/com/quollwriter/ui/HTMLPanel.java
530	429	src/com/quollwriter/ui/IconColumn.java
310	0	src/com/quollwriter/ui/ImageSelector.java
5	1	src/com/quollwriter/ui/ImportProject.java
114	19	src/com/quollwriter/ui/ItemTypeHandler.java
9	2	src/com/quollwriter/ui/LocationDetailsEditPanel.java
128	0	src/com/quollwriter/ui/MessageWindow.java
3	2	src/com/quollwriter/ui/NamedObjectPreviewPopup.java
256	57	src/com/quollwriter/ui/NewProjectPanel.java
138	15	src/com/quollwriter/ui/NoteTypeHandler.java
8	8	src/com/quollwriter/ui/NotesAccordionItem.java
56	5	src/com/quollwriter/ui/Notification.java
18	6	src/com/quollwriter/ui/ObjectDetailsEditPanel.java
449	0	src/com/quollwriter/ui/ObjectTypeNameChanger.java
144	0	src/com/quollwriter/ui/PasswordInputWindow.java
122	30	src/com/quollwriter/ui/PopupWindow.java
8	6	src/com/quollwriter/ui/PopupWizard.java
649	269	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
1	0	src/com/quollwriter/ui/ProjectEvent.java
48	7	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
0	1074	src/com/quollwriter/ui/ProjectOptions.java
23	1	src/com/quollwriter/ui/ProjectTextProperties.java
432	212	src/com/quollwriter/ui/ProjectViewer.java
1	0	src/com/quollwriter/ui/QColorChooser.java
262	0	src/com/quollwriter/ui/QuestionWindow.java
10	16	src/com/quollwriter/ui/QuollPanel.java
111	62	src/com/quollwriter/ui/ReportAProblem.java
17	3	src/com/quollwriter/ui/ResearchItemDetailsEditPanel.java
339	0	src/com/quollwriter/ui/TextInputWindow.java
128	5	src/com/quollwriter/ui/TextPropertiesEditPanel.java
18	135	src/com/quollwriter/ui/Tips.java
58	75	src/com/quollwriter/ui/TypesEditor.java
11	1	src/com/quollwriter/ui/TypesHandler.java
2001	273	src/com/quollwriter/ui/UIUtils.java
8	0	src/com/quollwriter/ui/ValueValidator.java
17	15	src/com/quollwriter/ui/WarmupPromptSelect.java
33	50	src/com/quollwriter/ui/WarmupsAccordionItem.java
121	20	src/com/quollwriter/ui/WarmupsViewer.java
40	18	src/com/quollwriter/ui/WhatsNew.java
8	3	src/com/quollwriter/ui/WordCountTimer.java
117	75	src/com/quollwriter/ui/actionHandlers/AbstractActionHandler.java
3	124	src/com/quollwriter/ui/actionHandlers/AddChapterActionHandler.java
71	87	src/com/quollwriter/ui/actionHandlers/AddNewItemTypeActionHandler.java
74	94	src/com/quollwriter/ui/actionHandlers/AddNewNoteTypeActionHandler.java
26	5	src/com/quollwriter/ui/actionHandlers/AssetActionHandler.java
17	22	src/com/quollwriter/ui/actionHandlers/ChapterItemActionHandler.java
25	0	src/com/quollwriter/ui/actionHandlers/ChapterItemFormatDetails.java
22	54	src/com/quollwriter/ui/actionHandlers/DeleteChapterActionHandler.java
141	61	src/com/quollwriter/ui/actionHandlers/DeleteChapterItemActionHandler.java
0	48	src/com/quollwriter/ui/actionHandlers/DeleteCharacterActionHandler.java
24	51	src/com/quollwriter/ui/actionHandlers/DeleteIdeaTypeActionHandler.java
0	66	src/com/quollwriter/ui/actionHandlers/DeleteNoteActionHandler.java
42	29	src/com/quollwriter/ui/actionHandlers/DeleteOutlineItemActionHandler.java
113	0	src/com/quollwriter/ui/actionHandlers/DeleteProjectActionHandler.java
114	6	src/com/quollwriter/ui/actionHandlers/EditIdeaTypeActionHandler.java
24	20	src/com/quollwriter/ui/actionHandlers/FindSynonymsActionHandler.java
103	6	src/com/quollwriter/ui/actionHandlers/NewIdeaTypeActionHandler.java
75	67	src/com/quollwriter/ui/actionHandlers/NoteActionHandler.java
101	0	src/com/quollwriter/ui/actionHandlers/NoteFormatDetails.java
3	3	src/com/quollwriter/ui/actionHandlers/OutlineItemChapterActionHandler.java
67	0	src/com/quollwriter/ui/actionHandlers/OutlineItemFormatDetails.java
7	43	src/com/quollwriter/ui/actionHandlers/ProjectViewerActionHandler.java
1	1	src/com/quollwriter/ui/actionHandlers/RenameChapterActionHandler.java
165	182	src/com/quollwriter/ui/actionHandlers/RenameProjectActionHandler.java
58	0	src/com/quollwriter/ui/actionHandlers/SceneFormatDetails.java
167	104	src/com/quollwriter/ui/actionHandlers/ShowChapterItemActionHandler.java
0	80	src/com/quollwriter/ui/actionHandlers/ShowNoteActionHandler.java
0	60	src/com/quollwriter/ui/actionHandlers/ShowOutlineItemActionHandler.java
0	49	src/com/quollwriter/ui/actionHandlers/ShowSceneActionHandler.java
359	0	src/com/quollwriter/ui/actionHandlers/SplitChapterActionHandler.java
112	0	src/com/quollwriter/ui/actionHandlers/TextInputActionHandler.java
125	0	src/com/quollwriter/ui/actionHandlers/YesDeleteConfirmTextInputActionHandler.java
1	1	src/com/quollwriter/ui/charts/AllWordCountsChart.java
1	1	src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java
180	143	src/com/quollwriter/ui/components/Accordion.java
1	0	src/com/quollwriter/ui/components/CompoundUndoManager.java
4	4	src/com/quollwriter/ui/components/Form.java
1	1	src/com/quollwriter/ui/components/Header.java
16	26	src/com/quollwriter/ui/components/ImagePanel.java
217	0	src/com/quollwriter/ui/components/LineHighlighter.java
87	20	src/com/quollwriter/ui/components/Markup.java
19	0	src/com/quollwriter/ui/components/QPopup.java
22	3	src/com/quollwriter/ui/components/QSpellChecker.java
274	9	src/com/quollwriter/ui/components/QTextEditor.java
37	0	src/com/quollwriter/ui/components/ScrollableBox.java
44	0	src/com/quollwriter/ui/components/ScrollablePanel.java
3	0	src/com/quollwriter/ui/components/StyleChangeEvent.java
8	0	src/com/quollwriter/ui/components/TabHeader.java
174	0	src/com/quollwriter/ui/components/TableCellListener.java
72	7	src/com/quollwriter/ui/components/TextProperties.java
4	0	src/com/quollwriter/ui/components/TextStylable.java
0	11	src/com/quollwriter/ui/components/UIUtils.java
118	0	src/com/quollwriter/ui/forms/CheckboxFormItem.java
59	0	src/com/quollwriter/ui/forms/ComboBoxFormItem.java
203	0	src/com/quollwriter/ui/forms/FormItem.java
98	0	src/com/quollwriter/ui/forms/ImageSelectorFormItem.java
201	0	src/com/quollwriter/ui/forms/SelectFormItem.java
349	0	src/com/quollwriter/ui/forms/TextFormItem.java
975	438	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
53	14	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
3	3	src/com/quollwriter/ui/panels/AchievementsPanel.java
733	0	src/com/quollwriter/ui/panels/AdvertiseProjectPanel.java
88	226	src/com/quollwriter/ui/panels/AssetViewPanel.java
24	1	src/com/quollwriter/ui/panels/BlankQuollPanel.java
0	379	src/com/quollwriter/ui/panels/ChapterViewPanel.java
1061	0	src/com/quollwriter/ui/panels/EditorEditorPanel.java
1	2	src/com/quollwriter/ui/panels/FullScreenQuollPanel.java
86	35	src/com/quollwriter/ui/panels/IdeaBoard.java
1244	227	src/com/quollwriter/ui/panels/OptionsPanel.java
1231	337	src/com/quollwriter/ui/panels/QuollEditorPanel.java
664	0	src/com/quollwriter/ui/panels/RegisterAsAnEditorPanel.java
2	1	src/com/quollwriter/ui/panels/Timeline.java
56	12	src/com/quollwriter/ui/panels/WarmupEditorPanel.java
149	0	src/com/quollwriter/ui/panels/WordCloudPanel.java
6	4	src/com/quollwriter/ui/panels/WordCountPanel.java
63	48	src/com/quollwriter/ui/renderers/ProjectTreeCellEditor.java
84	19	src/com/quollwriter/ui/renderers/ProjectTreeCellRenderer.java
1	1	src/com/quollwriter/ui/renderers/WarmupsProjectTreeCellEditor.java
25	1	src/com/quollwriter/ui/sidebars/AbstractSideBar.java
11	2	src/com/quollwriter/ui/sidebars/AccordionItemsSideBar.java
5	4	src/com/quollwriter/ui/sidebars/AppearsInChaptersSideBar.java
10	18	src/com/quollwriter/ui/sidebars/ChapterInformationSideBar.java
133	0	src/com/quollwriter/ui/sidebars/EditorFindInfoBox.java
164	0	src/com/quollwriter/ui/sidebars/EditorFindPanel.java
173	0	src/com/quollwriter/ui/sidebars/EditorInfoBox.java
112	0	src/com/quollwriter/ui/sidebars/EditorList.java
640	0	src/com/quollwriter/ui/sidebars/EditorPanel.java
41	0	src/com/quollwriter/ui/sidebars/EditorProjectSideBar.java
637	0	src/com/quollwriter/ui/sidebars/EditorsSideBar.java
15	10	src/com/quollwriter/ui/sidebars/Finder.java
11	344	src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java
113	65	src/com/quollwriter/ui/sidebars/ProjectSideBar.java
7	0	src/com/quollwriter/ui/sidebars/TextPropertiesSideBar.java
1	1	src/com/quollwriter/ui/sidebars/WarmupsSideBar.java
295	137	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java
1	1	src/com/quollwriter/ui/whatsnewcomps/version_1_4_4.java
153	0	src/com/quollwriter/ui/whatsnewcomps/version_2_2.java

commit bb2f8469d221b1c2bb81f2b4b48fe4e3b1f47f08
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Mar 13 21:44:31 2013 +1000

    Changes for version 2.0.1.
    
    See: http://quollwriter.com/user-guide/index.html#version-changes/2_0_1
    for details.

9	48	build.xml
6	1	data/default-project-properties.xml
1	1	data/version.txt
17	0	data/whats-new.xml
2	0	src/com/quollwriter/Constants.java
103	37	src/com/quollwriter/Environment.java
20	0	src/com/quollwriter/ObjectRefURLStreamHandlerFactory.java
3	3	src/com/quollwriter/achievements/AchievementsManager.java
21	0	src/com/quollwriter/text/SentenceIterator.java
156	16	src/com/quollwriter/tools/DeleteInstallJars.java
239	0	src/com/quollwriter/tools/UpgradeQuollWriter.java
75	39	src/com/quollwriter/ui/AbstractProjectViewer.java
59	8	src/com/quollwriter/ui/ChapterFieldAccordionItem.java
27	65	src/com/quollwriter/ui/GetLatestVersion.java
4	0	src/com/quollwriter/ui/HTMLPanel.java
0	8	src/com/quollwriter/ui/LinkedToAccordionItem.java
259	0	src/com/quollwriter/ui/NamedObjectPreviewPopup.java
124	1	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
1	1	src/com/quollwriter/ui/TextPropertiesEditPanel.java
43	1	src/com/quollwriter/ui/UIUtils.java
10	1	src/com/quollwriter/ui/WhatsNew.java
2	2	src/com/quollwriter/ui/sidebars/AccordionItemsSideBar.java
1	1	src/com/quollwriter/ui/sidebars/AppearsInChaptersSideBar.java
40	27	src/com/quollwriter/ui/sidebars/Finder.java
1	1	src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java
41	11	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java

commit 807669434ff9a9908d22018aa7316e384f1af32e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Feb 24 22:31:56 2013 +1000

    Updated readme.

0	1	README.md

commit 815b2f13222ee6080c2326a15c5618a7f2d1de84
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Feb 24 22:25:54 2013 +1000

    Update readme.

5	4	README.md

commit 0cc89e0a12b759a7c12cdbf76039212e9ee10794
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Feb 24 22:19:46 2013 +1000

    Updated readme.

45	1	README.md

commit 7ce10c502f80d0b67c02fc3fe19c6177bd0d8986
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Feb 24 21:57:40 2013 +1000

    Updated readme.

26	1	README.md

commit 80253cffa1e0bd7685758c0a619a60485eba0561
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Feb 24 21:42:45 2013 +1000

    Update to readme.

23	6	README.md

commit fd1bdd37308885f31ae5df75ca2adbc993739db4
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Feb 24 21:32:23 2013 +1000

    Added readme file.

59	0	README.md

commit 294150ca892ca9d2a98060bb039da939f2242e04
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Feb 24 15:50:52 2013 +1000

    Initial import of version 2 code.

-	-	3rd-party-jars/JoSQL-2.1.jar
-	-	3rd-party-jars/antlr-2.7.6.jar
3	0	3rd-party-jars/antlr-license.txt
3	0	3rd-party-jars/apache-commons-license.txt
202	0	3rd-party-jars/apache-dbcp-license.txt
-	-	3rd-party-jars/commons-collections-3.1.jar
-	-	3rd-party-jars/commons-dbcp-1.4.jar
-	-	3rd-party-jars/commons-pool-1.5.4.jar
-	-	3rd-party-jars/core-renderer.jar
-	-	3rd-party-jars/docx4j-jars/avalon-framework-api-4.3.1.jar
-	-	3rd-party-jars/docx4j-jars/avalon-framework-impl-4.3.1.jar
-	-	3rd-party-jars/docx4j-jars/commons-codec-1.3.jar
-	-	3rd-party-jars/docx4j-jars/commons-io-1.3.1.jar
-	-	3rd-party-jars/docx4j-jars/commons-lang-2.4.jar
-	-	3rd-party-jars/docx4j-jars/commons-logging-1.1.1.jar
-	-	3rd-party-jars/docx4j-jars/commons-vfs-patched-1.9.1.jar
-	-	3rd-party-jars/docx4j-jars/core-renderer-R8pre2.jar
-	-	3rd-party-jars/docx4j-jars/docx4j-2.3.0.jar
-	-	3rd-party-jars/docx4j-jars/fop-patched-0.95.756437.jar
-	-	3rd-party-jars/docx4j-jars/hwpf-3.4.0.jar
-	-	3rd-party-jars/docx4j-jars/itext-unsigned-2.0.8.jar
-	-	3rd-party-jars/docx4j-jars/jcr-1.0.jar
-	-	3rd-party-jars/docx4j-jars/junit-4.4.jar
-	-	3rd-party-jars/docx4j-jars/log4j-1.2.15.jar
-	-	3rd-party-jars/docx4j-jars/minium-0.1.jar
-	-	3rd-party-jars/docx4j-jars/parent-pointer-plugin-1.0.jar
-	-	3rd-party-jars/docx4j-jars/pdf-renderer-0.2009.0324.jar
-	-	3rd-party-jars/docx4j-jars/xalan-patched-2.7.0.jar
-	-	3rd-party-jars/docx4j-jars/xmlgraphics-commons-1.3.757686.jar
202	0	3rd-party-jars/docx4j-license.txt
-	-	3rd-party-jars/dom4j-1.6.1.jar
3	0	3rd-party-jars/dom4j-license.txt
-	-	3rd-party-jars/forms-1.3.0.jar
-	-	3rd-party-jars/gentlyWEB-io-1.0.jar
1	0	3rd-party-jars/gentlyWEB-license.txt
-	-	3rd-party-jars/gentlyWEB-logging-1.0.jar
-	-	3rd-party-jars/gentlyWEB-properties-1.2.jar
-	-	3rd-party-jars/gentlyWEB-utils-1.1.jar
-	-	3rd-party-jars/gentlyWEB-xml-1.1.jar
-	-	3rd-party-jars/h2-1.1.115.jar.old
-	-	3rd-party-jars/h2-1.2.127.jar
3	0	3rd-party-jars/h2-license.txt
3	0	3rd-party-jars/hibernate-license.txt
55	0	3rd-party-jars/jai-license.txt
-	-	3rd-party-jars/jai_codec.jar
-	-	3rd-party-jars/jai_core.jar
27	0	3rd-party-jars/javadiff-license.txt
-	-	3rd-party-jars/javadiff.jar
-	-	3rd-party-jars/jazzy-core.jar
3	0	3rd-party-jars/jazzy-license.txt
-	-	3rd-party-jars/jazzy-swing.jar
-	-	3rd-party-jars/jcommon-1.0.16.jar
-	-	3rd-party-jars/jdom-1.0.jar
58	0	3rd-party-jars/jdom-license.txt
-	-	3rd-party-jars/jfreechart-1.0.13.jar
504	0	3rd-party-jars/jfreechart-license.txt
32	0	3rd-party-jars/jgoodies-license.txt
-	-	3rd-party-jars/jh-labs-filters.jar
202	0	3rd-party-jars/josql-license.txt
-	-	3rd-party-jars/looks-2.3.1.jar
-	-	3rd-party-jars/old-jars-maybe-needed/JDateChooser.jar
-	-	3rd-party-jars/old-jars-maybe-needed/gentlyWEB-properties-1.3.jar
-	-	3rd-party-jars/old-jars-maybe-needed/l2fprod-common-all.jar.old
-	-	3rd-party-jars/poi-3.6-20100306.jar
202	0	3rd-party-jars/poi-license.txt
-	-	3rd-party-jars/poi-scratchpad-3.6-20100306.jar
3	0	3rd-party-jars/slf4-license.txt
-	-	3rd-party-jars/slf4j-api-1.5.8.jar
-	-	3rd-party-jars/slf4j-jdk14-1.5.8.jar
-	-	3rd-party-jars/slf4j-jre-1.5.8.jar
-	-	3rd-party-jars/swingx-gui.1.3.jar
510	0	build.xml
-	-	data/achievement.wav
568	0	data/achievements.xml
10	0	data/default-project-properties.xml
45	0	data/dictionaries/README
239	0	data/dictionaries/altamer.0
51	0	data/dictionaries/altamer.1
90	0	data/dictionaries/altamer.2
1835	0	data/dictionaries/american.0
741	0	data/dictionaries/american.1
6767	0	data/dictionaries/american.2
1899	0	data/dictionaries/british.0
743	0	data/dictionaries/british.1
6688	0	data/dictionaries/british.2
1835	0	data/dictionaries/en/american.0
741	0	data/dictionaries/en/american.1
6767	0	data/dictionaries/en/american.2
1899	0	data/dictionaries/en/british.0
743	0	data/dictionaries/en/british.1
6688	0	data/dictionaries/en/british.2
47160	0	data/dictionaries/en/english.0
20864	0	data/dictionaries/en/english.1
37616	0	data/dictionaries/en/english.2
19708	0	data/dictionaries/en/english.3
47158	0	data/dictionaries/english.0
20864	0	data/dictionaries/english.1
37616	0	data/dictionaries/english.2
19708	0	data/dictionaries/english.3
1003	0	data/dictionaries/moby/mwords/10001fr.equ
1002	0	data/dictionaries/moby/mwords/10002fr.equ
10196	0	data/dictionaries/moby/mwords/10196pla.ces
113809	0	data/dictionaries/moby/mwords/113809of.fic
1185	0	data/dictionaries/moby/mwords/1185kjvf.req
21986	0	data/dictionaries/moby/mwords/21986na.mes
256772	0	data/dictionaries/moby/mwords/256772co.mpo
354984	0	data/dictionaries/moby/mwords/354984si.ngl
366	0	data/dictionaries/moby/mwords/366often.mis
3897	0	data/dictionaries/moby/mwords/3897male.nam
4160	0	data/dictionaries/moby/mwords/4160offi.cia
467	0	data/dictionaries/moby/mwords/467popul.arf
4946	0	data/dictionaries/moby/mwords/4946fema.len
6213	0	data/dictionaries/moby/mwords/6213acro.nym
74550	0	data/dictionaries/moby/mwords/74550com.mon
128	0	data/dictionaries/moby/mwords/readme.txt
832	0	data/dictionaries/moby/mwords/usaconst.itu
0	0	data/dictionaries/not-found.txt
28564	0	data/dictionaries/rogets-thesaurus.txt
102683	0	data/dictionaries/thesaurus-1.0.txt
102683	0	data/dictionaries/thesaurus-index-1.0.txt
-	-	data/dictionaries/thesaurus-new.rar
30261	0	data/dictionaries/thesaurus.txt
102683	0	data/dictionaries/word-file-index.txt
1	0	data/dictionaries/words-parts-of-speech.txt
-	-	data/doc-import-init.doc
-	-	data/docx-import-init.docx
13	0	data/export/epub/appendix-template.xml
12	0	data/export/epub/chapter-template.xml
13	0	data/export/epub/character-template.xml
6	0	data/export/epub/container-template.xml
48	0	data/export/epub/css-template.xml
26	0	data/export/epub/ncx-template.xml
21	0	data/export/epub/opf-template.xml
16	0	data/html-export-template.html
-	-	data/license.rtf
54	0	data/logging.properties
199	0	data/problem-finder-rules.xml
14	0	data/prompt-websites.xml
1	0	data/prompts/00999a07b406.txt
1	0	data/prompts/01bdca2acf28.txt
1	0	data/prompts/0245f9da6f98.txt
1	0	data/prompts/02a1637b4732.txt
1	0	data/prompts/02b2b5cce29f.txt
1	0	data/prompts/052f02bfb250.txt
1	0	data/prompts/0795b22e0052.txt
1	0	data/prompts/0c70948a1b6c.txt
1	0	data/prompts/1027210bab44.txt
1	0	data/prompts/113a9153b3fc.txt
1	0	data/prompts/1308b663e765.txt
1	0	data/prompts/14da29a98bf5.txt
1	0	data/prompts/15768690e803.txt
1	0	data/prompts/1638e99ce1cc.txt
1	0	data/prompts/176888905481.txt
1	0	data/prompts/17d409cdf96d.txt
1	0	data/prompts/1988f5fb5e43.txt
1	0	data/prompts/1c26961c2ea5.txt
1	0	data/prompts/1f264e4e7266.txt
1	0	data/prompts/20804810f610.txt
1	0	data/prompts/211e510c9f20.txt
1	0	data/prompts/23e51d556d1e.txt
1	0	data/prompts/26a0328db531.txt
1	0	data/prompts/26c7f9425fa8.txt
1	0	data/prompts/27d15a557bd3.txt
1	0	data/prompts/2814361ac88a.txt
1	0	data/prompts/289e699bccac.txt
1	0	data/prompts/293c5544a8f0.txt
1	0	data/prompts/2da670f44a2b.txt
1	0	data/prompts/2ea640d14af6.txt
1	0	data/prompts/30d5cd9dccc1.txt
1	0	data/prompts/31e43b97c0a8.txt
1	0	data/prompts/3367c69ef983.txt
1	0	data/prompts/339282d4e3c7.txt
1	0	data/prompts/34197517725c.txt
1	0	data/prompts/34309c5854ad.txt
1	0	data/prompts/343c3efdd41b.txt
1	0	data/prompts/344b315e81bf.txt
1	0	data/prompts/3454312a53bc.txt
1	0	data/prompts/35a1c406da4f.txt
1	0	data/prompts/36026c2f1164.txt
1	0	data/prompts/37a7588d6835.txt
1	0	data/prompts/39d1984f936c.txt
1	0	data/prompts/3a82d349056c.txt
1	0	data/prompts/3a842065f957.txt
1	0	data/prompts/3aba5d7c1547.txt
1	0	data/prompts/3c8a68578580.txt
1	0	data/prompts/3da9ffa186b1.txt
1	0	data/prompts/3dc7b572b75f.txt
1	0	data/prompts/3f009fb21954.txt
1	0	data/prompts/3f2416411062.txt
1	0	data/prompts/400a1880ca00.txt
1	0	data/prompts/40b3cf16e0cc.txt
1	0	data/prompts/40bb402ad73d.txt
1	0	data/prompts/40d3a4180bd7.txt
1	0	data/prompts/415a7ffbcdb9.txt
1	0	data/prompts/466f82be3bfd.txt
1	0	data/prompts/4925753f69c8.txt
1	0	data/prompts/4d031e480988.txt
1	0	data/prompts/4e19183c99d8.txt
1	0	data/prompts/4e22f4dfc413.txt
1	0	data/prompts/4ea8f407158e.txt
1	0	data/prompts/4f5fa444abad.txt
1	0	data/prompts/5148672f441b.txt
1	0	data/prompts/517d00ce1367.txt
1	0	data/prompts/51a043919e3e.txt
1	0	data/prompts/522100a02fa9.txt
1	0	data/prompts/52afe813c908.txt
1	0	data/prompts/54d5517916a9.txt
1	0	data/prompts/54f50be93e8e.txt
1	0	data/prompts/553baeb66608.txt
1	0	data/prompts/5552bbd64a3d.txt
1	0	data/prompts/55c964efdfc4.txt
1	0	data/prompts/560a4c28a855.txt
1	0	data/prompts/562ec484ba59.txt
1	0	data/prompts/56922a4bdc9e.txt
1	0	data/prompts/5741d9a62b32.txt
1	0	data/prompts/575b06f2b996.txt
1	0	data/prompts/5776b5a9dc2c.txt
1	0	data/prompts/5988354dbe16.txt
1	0	data/prompts/59a24c84d2e1.txt
1	0	data/prompts/5a22c0ff510e.txt
1	0	data/prompts/5a2a5c2a0f7d.txt
1	0	data/prompts/5b9527de1e2e.txt
1	0	data/prompts/5bbed1abfd4f.txt
1	0	data/prompts/5bc86b0258ba.txt
1	0	data/prompts/5c47ed869689.txt
1	0	data/prompts/5f4a96727374.txt
1	0	data/prompts/603cfa232cce.txt
1	0	data/prompts/630b6f4f0a1b.txt
1	0	data/prompts/66552758b8cc.txt
1	0	data/prompts/69b740e34f8b.txt
1	0	data/prompts/69dc47dd2706.txt
1	0	data/prompts/6af113969e98.txt
1	0	data/prompts/6b98f78e2433.txt
1	0	data/prompts/6c4a89ff5493.txt
1	0	data/prompts/6d1195b877de.txt
1	0	data/prompts/6d14ffb80792.txt
1	0	data/prompts/6db3905adc5a.txt
1	0	data/prompts/6fd6460d1fc1.txt
1	0	data/prompts/6fec64f5bec2.txt
1	0	data/prompts/701ee7dfd74d.txt
1	0	data/prompts/70b11291942a.txt
1	0	data/prompts/728690c6dd15.txt
1	0	data/prompts/72a041553663.txt
1	0	data/prompts/7405856c0605.txt
1	0	data/prompts/74a08f5f1c07.txt
1	0	data/prompts/74da233ecdfc.txt
1	0	data/prompts/752b739ebc1c.txt
1	0	data/prompts/76219f6386ad.txt
1	0	data/prompts/763afed2a307.txt
1	0	data/prompts/76cff71c2814.txt
1	0	data/prompts/77f9e6ebc867.txt
1	0	data/prompts/7859df74df79.txt
1	0	data/prompts/792837f9a6e0.txt
1	0	data/prompts/7a333a34e819.txt
1	0	data/prompts/7aa60f318704.txt
1	0	data/prompts/7baefc010e35.txt
1	0	data/prompts/7d4da5cfec39.txt
1	0	data/prompts/7d93930cd626.txt
1	0	data/prompts/7ef14df59add.txt
1	0	data/prompts/7fe087a827fc.txt
1	0	data/prompts/7fe9b142a1cc.txt
1	0	data/prompts/824554b795ca.txt
1	0	data/prompts/83b402bb0ce2.txt
1	0	data/prompts/84ab99c306f7.txt
1	0	data/prompts/86db097ee6c7.txt
1	0	data/prompts/87ffa81c95f7.txt
1	0	data/prompts/8a9b59509ce2.txt
1	0	data/prompts/8ae3e67d4299.txt
1	0	data/prompts/8c20e221812c.txt
1	0	data/prompts/8e23090630dd.txt
1	0	data/prompts/8fd8d292390b.txt
1	0	data/prompts/90083f4507de.txt
1	0	data/prompts/94d211658166.txt
1	0	data/prompts/9837d25bc6ec.txt
1	0	data/prompts/99ee52f166e9.txt
1	0	data/prompts/9b4dfdefe31a.txt
1	0	data/prompts/9bc83901dccc.txt
1	0	data/prompts/9e96b28705f8.txt
1	0	data/prompts/9ecc5e268d3f.txt
1	0	data/prompts/9ee88c78b7fb.txt
1	0	data/prompts/a089a06d70a7.txt
1	0	data/prompts/a0ff9c0e82b2.txt
1	0	data/prompts/a1854dcd3920.txt
1	0	data/prompts/a3700bd6f7b9.txt
1	0	data/prompts/a505c0c895d9.txt
1	0	data/prompts/a5457ebecb38.txt
1	0	data/prompts/a5b54e71d7fd.txt
1	0	data/prompts/a5b69aa5adef.txt
1	0	data/prompts/a7345f2b48b2.txt
1	0	data/prompts/a74874c9bb0b.txt
1	0	data/prompts/a8bec1760fe1.txt
1	0	data/prompts/a9f2a7cd076a.txt
1	0	data/prompts/aa23d3ba295b.txt
1	0	data/prompts/aa2bdff46fd2.txt
1	0	data/prompts/aada98ef3f57.txt
1	0	data/prompts/acf542d5b627.txt
1	0	data/prompts/ae3a13a20ab1.txt
1	0	data/prompts/af4e4aac5b6b.txt
1	0	data/prompts/afd34e19df07.txt
1	0	data/prompts/b0c76c92e0e6.txt
1	0	data/prompts/b1f87f488e1d.txt
1	0	data/prompts/b2aeee5e1eb1.txt
1	0	data/prompts/b41a97eab99c.txt
1	0	data/prompts/b44f6de37df8.txt
1	0	data/prompts/b479b8bf8648.txt
1	0	data/prompts/b4c7017558f2.txt
1	0	data/prompts/b5b8b3003e34.txt
1	0	data/prompts/b614ad215765.txt
1	0	data/prompts/b635457470ee.txt
1	0	data/prompts/b78a872df285.txt
1	0	data/prompts/b8184003fea1.txt
1	0	data/prompts/b8c1caa96220.txt
1	0	data/prompts/b9271aa939f3.txt
1	0	data/prompts/b92fe63db745.txt
1	0	data/prompts/bc0a4d57f038.txt
1	0	data/prompts/bc367e11cc07.txt
1	0	data/prompts/beecf6566432.txt
1	0	data/prompts/c0123f7a2362.txt
1	0	data/prompts/c2424135f05a.txt
1	0	data/prompts/c4750e37e255.txt
1	0	data/prompts/c4bf5fada4c8.txt
1	0	data/prompts/c4c2d3835e29.txt
1	0	data/prompts/c5c5113c66bb.txt
1	0	data/prompts/c6c889d89c59.txt
1	0	data/prompts/c7763340d609.txt
1	0	data/prompts/c899a060ac9d.txt
1	0	data/prompts/c8be8e6f7104.txt
1	0	data/prompts/c8d43092a5bd.txt
1	0	data/prompts/caa414617eef.txt
1	0	data/prompts/cafa80a76524.txt
1	0	data/prompts/cb00a03c651c.txt
1	0	data/prompts/cbf7b29635fe.txt
1	0	data/prompts/cc0039dfff1d.txt
1	0	data/prompts/cd30dca33d6d.txt
1	0	data/prompts/cda4b131ffc8.txt
1	0	data/prompts/ce2d62babd0a.txt
1	0	data/prompts/ce8ab3c9e44f.txt
1	0	data/prompts/cf730fb0e080.txt
1	0	data/prompts/d1cf7d91811a.txt
1	0	data/prompts/d37e0625316b.txt
1	0	data/prompts/d3ae44787cd3.txt
1	0	data/prompts/d43bec521456.txt
1	0	data/prompts/d8195589bb64.txt
1	0	data/prompts/d911409ebb6e.txt
1	0	data/prompts/d995a99e1d6b.txt
1	0	data/prompts/db84ee97e91c.txt
1	0	data/prompts/dc40af67e38b.txt
1	0	data/prompts/dcba6a8e87a2.txt
1	0	data/prompts/df8b11780c4a.txt
1	0	data/prompts/e201664003a8.txt
1	0	data/prompts/e3ad7c799c71.txt
1	0	data/prompts/e3dad0690d6e.txt
1	0	data/prompts/e4671c821dcc.txt
1	0	data/prompts/e6987fae6180.txt
1	0	data/prompts/e6adf2317282.txt
1	0	data/prompts/e73ad13e2b3d.txt
1	0	data/prompts/e84fa01d417f.txt
1	0	data/prompts/ea6615257995.txt
1	0	data/prompts/eeee70bf82d3.txt
1	0	data/prompts/efefb137c2c8.txt
1	0	data/prompts/f060f406af64.txt
1	0	data/prompts/f1c7ca70de42.txt
1	0	data/prompts/f21f9a6db917.txt
1	0	data/prompts/f2de4a857560.txt
1	0	data/prompts/f304b23eab95.txt
1	0	data/prompts/f337d8435709.txt
1	0	data/prompts/f4ca6de882df.txt
1	0	data/prompts/f791842ebbdb.txt
1	0	data/prompts/f839e158b191.txt
1	0	data/prompts/f9bfa72c4326.txt
1	0	data/prompts/fbbaaa3d0264.txt
1	0	data/prompts/fce2753b88a5.txt
234	0	data/prompts/ids.txt
229	0	data/properties.xml
1	0	data/schema-version.txt
472	0	data/schema/update-scripts/0-1.xml
219	0	data/schema/update-scripts/1-2.xml
107	0	data/schema/update-scripts/2-3.xml
9	0	data/schema/update-scripts/3-4.xml
9	0	data/schema/update-scripts/4-5.xml
35	0	data/schema/update-scripts/5-6.xml
9	0	data/schema/update-scripts/6-7.xml
174	0	data/schema/update-scripts/create-views.xml
13	0	data/schema/views/book.v
18	0	data/schema/views/chapter.v
14	0	data/schema/views/character.v
13	0	data/schema/views/idea.v
14	0	data/schema/views/ideatype.v
13	0	data/schema/views/location.v
12	0	data/schema/views/namedobject.v
17	0	data/schema/views/note.v
15	0	data/schema/views/outlineitem.v
15	0	data/schema/views/project.v
14	0	data/schema/views/qobject.v
14	0	data/schema/views/researchitem.v
14	0	data/schema/views/scene.v
14	0	data/schema/views/warmup.v
91	0	data/tips.xml
-	-	data/typewriter-key.wav
1	0	data/version.txt
49	0	data/whats-new.xml
173	0	data/word-syllable-counts.txt
-	-	imgs/16x16-transparent.png
-	-	imgs/about16.png
-	-	imgs/achievement16.png
-	-	imgs/achievement24.png
-	-	imgs/add16.png
-	-	imgs/add20.png
-	-	imgs/add24.png
-	-	imgs/add37.png
-	-	imgs/assets16.png
-	-	imgs/assets24.png
-	-	imgs/bg-select16.png
-	-	imgs/bg-select20.png
-	-	imgs/bg-select24.png
-	-	imgs/bgs/1-park.jpg
-	-	imgs/bgs/1-sand.jpg
-	-	imgs/bgs/1-skyline.jpg
-	-	imgs/bgs/bamboo-1.jpg
-	-	imgs/bgs/bamboo-2.jpg
-	-	imgs/bgs/bamboo-3.jpg
-	-	imgs/bgs/beige-flowers-1.jpg
-	-	imgs/bgs/beige-squares-1.gif
-	-	imgs/bgs/black-dots-1.gif
-	-	imgs/bgs/black-flowers-1.jpg
-	-	imgs/bgs/black-squares-1.jpg
-	-	imgs/bgs/black-squares-2.gif
-	-	imgs/bgs/blue-dots-1.gif
-	-	imgs/bgs/blue-dots-2.gif
-	-	imgs/bgs/blue-flowers-1.jpg
-	-	imgs/bgs/blue-snowflakes-1.jpg
-	-	imgs/bgs/blue-squares-1.jpg
-	-	imgs/bgs/blue-teardrops-1.png
-	-	imgs/bgs/brick-1.jpg
-	-	imgs/bgs/brick-2.jpg
-	-	imgs/bgs/brick-3.jpg
-	-	imgs/bgs/brick-4.jpg
-	-	imgs/bgs/brown-blobs-1.gif
-	-	imgs/bgs/brown-circles-1.jpg
-	-	imgs/bgs/brown-flowers-1.jpg
-	-	imgs/bgs/brown-squares-1.gif
-	-	imgs/bgs/clouds-1.jpg
-	-	imgs/bgs/clouds-2.jpg
-	-	imgs/bgs/clouds-3.jpg
-	-	imgs/bgs/clouds-4.jpg
-	-	imgs/bgs/clouds-5.jpg
-	-	imgs/bgs/clouds-6.jpg
-	-	imgs/bgs/clouds-7.jpg
-	-	imgs/bgs/grass-1.jpg
-	-	imgs/bgs/grass-2.jpg
-	-	imgs/bgs/green-circles-1.jpg
-	-	imgs/bgs/green-circles-2.jpg
-	-	imgs/bgs/green-diagonal-1.gif
-	-	imgs/bgs/green-flowers-1.jpg
-	-	imgs/bgs/green-light-bulb-1.jpg
-	-	imgs/bgs/green-squares-1.jpg
-	-	imgs/bgs/grey-squares-1.jpg
-	-	imgs/bgs/grey-squares-2.png
-	-	imgs/bgs/grey-squares-3.gif
-	-	imgs/bgs/grey-tribal-1.jpg
-	-	imgs/bgs/orange-diagonal.gif
-	-	imgs/bgs/orange-flowers-1.jpg
-	-	imgs/bgs/orange-flowers-2.jpg
-	-	imgs/bgs/orange-squares-1.jpg
-	-	imgs/bgs/paper-1.jpg
-	-	imgs/bgs/paper-2.jpg
-	-	imgs/bgs/paper-3.jpg
-	-	imgs/bgs/paper-4.jpg
-	-	imgs/bgs/paper-5.jpg
-	-	imgs/bgs/paper-6.jpg
-	-	imgs/bgs/pink-butterfly-1.gif
-	-	imgs/bgs/pink-circles-1.jpg
-	-	imgs/bgs/pink-dots-1.gif
-	-	imgs/bgs/pink-dots-2.gif
-	-	imgs/bgs/pink-flowers-1.png
-	-	imgs/bgs/pink-flowers-2.jpg
-	-	imgs/bgs/pink-flowers-3.gif
-	-	imgs/bgs/pink-squares-1.png
-	-	imgs/bgs/pink-squares-2.gif
-	-	imgs/bgs/pink-squares-3.gif
-	-	imgs/bgs/pink-squares-4.jpg
-	-	imgs/bgs/pink-stars-1.jpg
-	-	imgs/bgs/pink-stars-2.gif
-	-	imgs/bgs/pink-strips-1.gif
-	-	imgs/bgs/purple-dots.gif
-	-	imgs/bgs/purple-flowers-1.jpg
-	-	imgs/bgs/purple-squares-1.gif
-	-	imgs/bgs/purple-squares-2.jpg
-	-	imgs/bgs/purple-squares-3.png
-	-	imgs/bgs/purple-stars-1.gif
-	-	imgs/bgs/red-stars-1.jpg
-	-	imgs/bgs/thumbs/1-park.jpg
-	-	imgs/bgs/thumbs/1-sand.jpg
-	-	imgs/bgs/thumbs/1-skyline.jpg
-	-	imgs/bgs/thumbs/bamboo-1.jpg
-	-	imgs/bgs/thumbs/bamboo-2.jpg
-	-	imgs/bgs/thumbs/bamboo-3.jpg
-	-	imgs/bgs/thumbs/beige-flowers-1.jpg
-	-	imgs/bgs/thumbs/beige-squares-1.gif
-	-	imgs/bgs/thumbs/black-dots-1.gif
-	-	imgs/bgs/thumbs/black-flowers-1.jpg
-	-	imgs/bgs/thumbs/black-squares-1.jpg
-	-	imgs/bgs/thumbs/black-squares-2.gif
-	-	imgs/bgs/thumbs/blue-dots-1.gif
-	-	imgs/bgs/thumbs/blue-dots-2.gif
-	-	imgs/bgs/thumbs/blue-flowers-1.jpg
-	-	imgs/bgs/thumbs/blue-snowflakes-1.jpg
-	-	imgs/bgs/thumbs/blue-squares-1.jpg
-	-	imgs/bgs/thumbs/blue-teardrops-1.png
-	-	imgs/bgs/thumbs/brick-1.jpg
-	-	imgs/bgs/thumbs/brick-2.jpg
-	-	imgs/bgs/thumbs/brick-3.jpg
-	-	imgs/bgs/thumbs/brick-4.jpg
-	-	imgs/bgs/thumbs/brown-blobs-1.gif
-	-	imgs/bgs/thumbs/brown-circles-1.jpg
-	-	imgs/bgs/thumbs/brown-flowers-1.jpg
-	-	imgs/bgs/thumbs/brown-squares-1.gif
-	-	imgs/bgs/thumbs/clouds-1.jpg
-	-	imgs/bgs/thumbs/clouds-2.jpg
-	-	imgs/bgs/thumbs/clouds-3.jpg
-	-	imgs/bgs/thumbs/clouds-4.jpg
-	-	imgs/bgs/thumbs/clouds-5.jpg
-	-	imgs/bgs/thumbs/clouds-6.jpg
-	-	imgs/bgs/thumbs/clouds-7.jpg
-	-	imgs/bgs/thumbs/grass-1.jpg
-	-	imgs/bgs/thumbs/grass-2.jpg
-	-	imgs/bgs/thumbs/green-circles-1.jpg
-	-	imgs/bgs/thumbs/green-circles-2.jpg
-	-	imgs/bgs/thumbs/green-diagonal-1.gif
-	-	imgs/bgs/thumbs/green-flowers-1.jpg
-	-	imgs/bgs/thumbs/green-light-bulb-1.jpg
-	-	imgs/bgs/thumbs/green-squares-1.jpg
-	-	imgs/bgs/thumbs/grey-squares-1.jpg
-	-	imgs/bgs/thumbs/grey-squares-2.png
-	-	imgs/bgs/thumbs/grey-squares-3.gif
-	-	imgs/bgs/thumbs/grey-tribal-1.jpg
-	-	imgs/bgs/thumbs/orange-diagonal.gif
-	-	imgs/bgs/thumbs/orange-flowers-1.jpg
-	-	imgs/bgs/thumbs/orange-flowers-2.jpg
-	-	imgs/bgs/thumbs/orange-squares-1.jpg
-	-	imgs/bgs/thumbs/paper-1.jpg
-	-	imgs/bgs/thumbs/paper-2.jpg
-	-	imgs/bgs/thumbs/paper-3.jpg
-	-	imgs/bgs/thumbs/paper-4.jpg
-	-	imgs/bgs/thumbs/paper-5.jpg
-	-	imgs/bgs/thumbs/paper-6.jpg
-	-	imgs/bgs/thumbs/pink-butterfly-1.gif
-	-	imgs/bgs/thumbs/pink-circles-1.jpg
-	-	imgs/bgs/thumbs/pink-dots-1.gif
-	-	imgs/bgs/thumbs/pink-dots-2.gif
-	-	imgs/bgs/thumbs/pink-flowers-1.png
-	-	imgs/bgs/thumbs/pink-flowers-2.jpg
-	-	imgs/bgs/thumbs/pink-flowers-3.gif
-	-	imgs/bgs/thumbs/pink-squares-1.png
-	-	imgs/bgs/thumbs/pink-squares-2.gif
-	-	imgs/bgs/thumbs/pink-squares-3.gif
-	-	imgs/bgs/thumbs/pink-squares-4.jpg
-	-	imgs/bgs/thumbs/pink-stars-1.jpg
-	-	imgs/bgs/thumbs/pink-stars-2.gif
-	-	imgs/bgs/thumbs/pink-strips-1.gif
-	-	imgs/bgs/thumbs/purple-dots.gif
-	-	imgs/bgs/thumbs/purple-flowers-1.jpg
-	-	imgs/bgs/thumbs/purple-squares-1.gif
-	-	imgs/bgs/thumbs/purple-squares-2.jpg
-	-	imgs/bgs/thumbs/purple-squares-3.png
-	-	imgs/bgs/thumbs/purple-stars-1.gif
-	-	imgs/bgs/thumbs/red-stars-1.jpg
-	-	imgs/bgs/thumbs/trees-1.png
-	-	imgs/bgs/thumbs/wood-1.jpg
-	-	imgs/bgs/thumbs/wood-10.jpg
-	-	imgs/bgs/thumbs/wood-11.jpg
-	-	imgs/bgs/thumbs/wood-2.jpg
-	-	imgs/bgs/thumbs/wood-3.jpg
-	-	imgs/bgs/thumbs/wood-4.jpg
-	-	imgs/bgs/thumbs/wood-5.jpg
-	-	imgs/bgs/thumbs/wood-6.jpg
-	-	imgs/bgs/thumbs/wood-7.jpg
-	-	imgs/bgs/thumbs/wood-8.jpg
-	-	imgs/bgs/thumbs/wood-9.jpg
-	-	imgs/bgs/thumbs/yellow-dots-1.gif
-	-	imgs/bgs/thumbs/yellow-flowers-1.jpg
-	-	imgs/bgs/thumbs/yellow-flowers-2.jpg
-	-	imgs/bgs/thumbs/yellow-light-bulb-1.jpg
-	-	imgs/bgs/thumbs/yellow-squares-1.gif
-	-	imgs/bgs/thumbs/yellow-squares-3.png
-	-	imgs/bgs/trees-1.png
-	-	imgs/bgs/wood-1.jpg
-	-	imgs/bgs/wood-10.jpg
-	-	imgs/bgs/wood-11.jpg
-	-	imgs/bgs/wood-2.jpg
-	-	imgs/bgs/wood-3.jpg
-	-	imgs/bgs/wood-4.jpg
-	-	imgs/bgs/wood-5.jpg
-	-	imgs/bgs/wood-6.jpg
-	-	imgs/bgs/wood-7.jpg
-	-	imgs/bgs/wood-8.jpg
-	-	imgs/bgs/wood-9.jpg
-	-	imgs/bgs/yellow-dots-1.gif
-	-	imgs/bgs/yellow-flowers-1.jpg
-	-	imgs/bgs/yellow-flowers-2.jpg
-	-	imgs/bgs/yellow-light-bulb-1.jpg
-	-	imgs/bgs/yellow-squares-1.gif
-	-	imgs/bgs/yellow-squares-2.png
-	-	imgs/bgs/yellow-squares-3.png
-	-	imgs/bold16.png
-	-	imgs/bold24.png
-	-	imgs/book16.png
-	-	imgs/book24.png
-	-	imgs/bug-edit24.png
-	-	imgs/bug16.png
-	-	imgs/bug24.png
-	-	imgs/bullet-black16.png
-	-	imgs/bullet16.png
-	-	imgs/cancel-edit16.png
-	-	imgs/cancel16.png
-	-	imgs/cancel20.png
-	-	imgs/chapter-information16.png
-	-	imgs/chapter-information24.png
-	-	imgs/chapter16.png
-	-	imgs/chapter24.png
-	-	imgs/character16.png
-	-	imgs/character24.png
-	-	imgs/chart16.png
-	-	imgs/chart24.png
-	-	imgs/clear24.png
-	-	imgs/clear37.png
-	-	imgs/clock-edit24.png
-	-	imgs/clock16.png
-	-	imgs/clock24.png
-	-	imgs/close-project16.png
-	-	imgs/close16.png
-	-	imgs/config-add16.png
-	-	imgs/config16.png
-	-	imgs/console-open16.png
-	-	imgs/console16.png
-	-	imgs/convert16.png
-	-	imgs/convert20.png
-	-	imgs/convert24.png
-	-	imgs/copy16.png
-	-	imgs/date16.png
-	-	imgs/date24.png
-	-	imgs/delete-all16.png
-	-	imgs/delete16.png
-	-	imgs/delete20.png
-	-	imgs/delete24.png
-	-	imgs/dictionary16.png
-	-	imgs/dictionary24.png
-	-	imgs/down16.png
-	-	imgs/down20.png
-	-	imgs/down24.png
-	-	imgs/edit-needed-note16.png
-	-	imgs/edit-needed-note24.png
-	-	imgs/edit-properties16.png
-	-	imgs/edit-properties24.png
-	-	imgs/edit16.png
-	-	imgs/edit24.png
-	-	imgs/email16.png
-	-	imgs/email24.png
-	-	imgs/eye16.png
-	-	imgs/eye24.png
-	-	imgs/find-chapter16.png
-	-	imgs/find-chapter24.png
-	-	imgs/find16.png
-	-	imgs/find24.png
-	-	imgs/fullscreen-exit16.png
-	-	imgs/fullscreen-exit24.png
-	-	imgs/fullscreen16.png
-	-	imgs/fullscreen20.png
-	-	imgs/fullscreen24.png
-	-	imgs/goals16.png
-	-	imgs/goals24.png
-	-	imgs/help16.png
-	-	imgs/help20.png
-	-	imgs/help24.png
-	-	imgs/idea16.png
-	-	imgs/idea24.png
-	-	imgs/information16.png
-	-	imgs/information20.png
-	-	imgs/information24.png
-	-	imgs/install16.png
-	-	imgs/install24.png
-	-	imgs/italic16.png
-	-	imgs/italic24.png
-	-	imgs/link16.png
-	-	imgs/link24.png
-	-	imgs/loading16.gif
-	-	imgs/location16.png
-	-	imgs/location24.png
-	-	imgs/logo-v2.png
-	-	imgs/new-project16.png
-	-	imgs/new-project24.png
-	-	imgs/new16.png
-	-	imgs/new20.png
-	-	imgs/new24.png
-	-	imgs/next16.png
-	-	imgs/note16.png
-	-	imgs/note24.png
-	-	imgs/notify16.png
-	-	imgs/notify24.png
-	-	imgs/object16.png
-	-	imgs/object24.png
-	-	imgs/open-project16.png
-	-	imgs/options16.png
-	-	imgs/options20.png
-	-	imgs/options24.png
-	-	imgs/outlineitem16.png
-	-	imgs/outlineitem24.png
-	-	imgs/plan16.png
-	-	imgs/play16.png
-	-	imgs/play24.png
-	-	imgs/previous16.png
-	-	imgs/print16.png
-	-	imgs/print20.png
-	-	imgs/print24.png
-	-	imgs/project-export16.png
-	-	imgs/project-import16.png
-	-	imgs/project16.png
-	-	imgs/project24.png
-	-	imgs/readability16.png
-	-	imgs/readability24.png
-	-	imgs/redo16.png
-	-	imgs/rename16.png
-	-	imgs/research16.png
-	-	imgs/researchitem16.png
-	-	imgs/researchitem24.png
-	-	imgs/save16.png
-	-	imgs/save20.png
-	-	imgs/save24.png
-	-	imgs/scene16.png
-	-	imgs/scene24.png
-	-	imgs/sendout-24.png
-	-	imgs/sendout16.png
-	-	imgs/settings16.png
-	-	imgs/settings24.png
-	-	imgs/share16.png
-	-	imgs/share24.png
-	-	imgs/snapshot16.png
-	-	imgs/snapshot24.png
-	-	imgs/sort16.png
-	-	imgs/sort24.png
-	-	imgs/spellchecker-turn-off20.png
-	-	imgs/spellchecker-turn-on20.png
-	-	imgs/spellchecker-turn-on24.png
-	-	imgs/spellchecker16.png
-	-	imgs/spellchecker24.png
-	-	imgs/star-disabled16.png
-	-	imgs/star-disabled16x.png
-	-	imgs/star16.png
-	-	imgs/star24.png
-	-	imgs/stop_12x12.png
-	-	imgs/tick16.png
-	-	imgs/tick24.png
-	-	imgs/timer16.png
-	-	imgs/timer20.png
-	-	imgs/timer24.png
-	-	imgs/tools20.png
-	-	imgs/tools24.png
-	-	imgs/transparency16.png
-	-	imgs/transparency20.png
-	-	imgs/transparency24.png
-	-	imgs/underline16.png
-	-	imgs/underline24.png
-	-	imgs/undo16.png
-	-	imgs/up16.png
-	-	imgs/up20.png
-	-	imgs/up24.png
-	-	imgs/upload16.png
-	-	imgs/upload24.png
-	-	imgs/view16.png
-	-	imgs/view24.png
-	-	imgs/warmups16.png
-	-	imgs/warmups24.png
-	-	imgs/warning16.png
-	-	imgs/warning24.png
-	-	imgs/website-links16.png
-	-	imgs/window-icon-v2.png
-	-	imgs/wordcount16.png
-	-	imgs/wordcount20.png
-	-	imgs/wordcount24.png
202	0	license.txt
1690	0	src/com/quollwriter/Base64.java
14	0	src/com/quollwriter/BlankTimerTask.java
372	0	src/com/quollwriter/Constants.java
49	0	src/com/quollwriter/DefaultIconProvider.java
215	0	src/com/quollwriter/DictionaryProvider.java
2755	0	src/com/quollwriter/Environment.java
15	0	src/com/quollwriter/FilenameFilterAdapter.java
22	0	src/com/quollwriter/GeneralException.java
379	0	src/com/quollwriter/JSONDecoder.java
0	0	src/com/quollwriter/NullOutputStream.java
124	0	src/com/quollwriter/ObjectRefURLStreamHandlerFactory.java
92	0	src/com/quollwriter/QWSpellDictionaryHashMap.java
46	0	src/com/quollwriter/QuollWriterSecurityManager.java
129	0	src/com/quollwriter/Startup.java
384	0	src/com/quollwriter/Utils.java
28	0	src/com/quollwriter/achievements/AchievementReachedEvent.java
10	0	src/com/quollwriter/achievements/AchievementReachedListener.java
1243	0	src/com/quollwriter/achievements/AchievementsManager.java
200	0	src/com/quollwriter/achievements/rules/AbstractAchievementRule.java
44	0	src/com/quollwriter/achievements/rules/AchievementRule.java
71	0	src/com/quollwriter/achievements/rules/AchievementRuleFactory.java
157	0	src/com/quollwriter/achievements/rules/EventAchievementRule.java
204	0	src/com/quollwriter/achievements/rules/ItemAchievementRule.java
155	0	src/com/quollwriter/achievements/rules/ObjectMatch.java
113	0	src/com/quollwriter/achievements/rules/SentenceAchievementRule.java
463	0	src/com/quollwriter/achievements/rules/SessionAchievementRule.java
166	0	src/com/quollwriter/achievements/rules/WordAchievementRule.java
134	0	src/com/quollwriter/achievements/rules/WordCountAchievementRule.java
109	0	src/com/quollwriter/data/Asset.java
47	0	src/com/quollwriter/data/BlankNamedObject.java
421	0	src/com/quollwriter/data/Book.java
732	0	src/com/quollwriter/data/Chapter.java
67	0	src/com/quollwriter/data/ChapterCounts.java
217	0	src/com/quollwriter/data/ChapterItem.java
479	0	src/com/quollwriter/data/DataObject.java
95	0	src/com/quollwriter/data/Idea.java
138	0	src/com/quollwriter/data/IdeaType.java
140	0	src/com/quollwriter/data/Link.java
24	0	src/com/quollwriter/data/Location.java
514	0	src/com/quollwriter/data/NamedObject.java
72	0	src/com/quollwriter/data/NamedObjectNameWrapper.java
142	0	src/com/quollwriter/data/Note.java
156	0	src/com/quollwriter/data/ObjectReference.java
124	0	src/com/quollwriter/data/OutlineItem.java
0	0	src/com/quollwriter/data/Positionable.java
832	0	src/com/quollwriter/data/Project.java
237	0	src/com/quollwriter/data/Prompt.java
59	0	src/com/quollwriter/data/PromptWebsite.java
391	0	src/com/quollwriter/data/Prompts.java
33	0	src/com/quollwriter/data/QCharacter.java
47	0	src/com/quollwriter/data/QObject.java
131	0	src/com/quollwriter/data/ReadabilityIndices.java
47	0	src/com/quollwriter/data/ResearchItem.java
244	0	src/com/quollwriter/data/Scene.java
24	0	src/com/quollwriter/data/SelectableDataObject.java
108	0	src/com/quollwriter/data/Warmup.java
127	0	src/com/quollwriter/data/WordCount.java
47	0	src/com/quollwriter/data/comparators/ChapterItemSorter.java
65	0	src/com/quollwriter/data/comparators/ChapterSorter.java
61	0	src/com/quollwriter/data/comparators/IdeaTypeComparator.java
136	0	src/com/quollwriter/data/comparators/NamedObjectSorter.java
26	0	src/com/quollwriter/data/comparators/NoteSorter.java
26	0	src/com/quollwriter/data/comparators/OutlineItemSorter.java
47	0	src/com/quollwriter/data/comparators/ProjectSorter.java
368	0	src/com/quollwriter/db/BookDataHandler.java
669	0	src/com/quollwriter/db/ChapterDataHandler.java
217	0	src/com/quollwriter/db/CharacterDataHandler.java
38	0	src/com/quollwriter/db/DataHandler.java
194	0	src/com/quollwriter/db/IdeaDataHandler.java
232	0	src/com/quollwriter/db/IdeaTypeDataHandler.java
88	0	src/com/quollwriter/db/LinkDataHandler.java
212	0	src/com/quollwriter/db/LocationDataHandler.java
315	0	src/com/quollwriter/db/NoteDataHandler.java
214	0	src/com/quollwriter/db/ObjectDataHandler.java
2135	0	src/com/quollwriter/db/ObjectManager.java
396	0	src/com/quollwriter/db/OutlineItemDataHandler.java
367	0	src/com/quollwriter/db/ProjectDataHandler.java
215	0	src/com/quollwriter/db/ResearchItemDataHandler.java
395	0	src/com/quollwriter/db/SceneDataHandler.java
219	0	src/com/quollwriter/db/WarmupDataHandler.java
29	0	src/com/quollwriter/events/MainPanelEvent.java
10	0	src/com/quollwriter/events/MainPanelListener.java
35	0	src/com/quollwriter/events/MouseEventHandler.java
14	0	src/com/quollwriter/events/PropertyChangeAdapter.java
11	0	src/com/quollwriter/events/PropertyChangedAdapter.java
48	0	src/com/quollwriter/events/PropertyChangedEvent.java
11	0	src/com/quollwriter/events/PropertyChangedListener.java
28	0	src/com/quollwriter/events/SideBarEvent.java
10	0	src/com/quollwriter/events/SideBarListener.java
264	0	src/com/quollwriter/exporter/AbstractDocumentExporter.java
28	0	src/com/quollwriter/exporter/DocumentExporter.java
759	0	src/com/quollwriter/exporter/EPUBDocumentExporter.java
35	0	src/com/quollwriter/exporter/ExportSettings.java
71	0	src/com/quollwriter/exporter/ExportUtils.java
64	0	src/com/quollwriter/exporter/HTMLDocumentExporter.java
406	0	src/com/quollwriter/exporter/MSWordDocDocumentExporter.java
1191	0	src/com/quollwriter/exporter/MSWordDocXDocumentExporter.java
64	0	src/com/quollwriter/exporter/PDFDocumentExporter.java
15	0	src/com/quollwriter/importer/DocumentImporter.java
206	0	src/com/quollwriter/importer/HTMLDocumentImporter.java
17	0	src/com/quollwriter/importer/ImportCallback.java
184	0	src/com/quollwriter/importer/Importer.java
423	0	src/com/quollwriter/importer/MSWordDocumentImporter.java
22	0	src/com/quollwriter/synonyms/SynonymProvider.java
229	0	src/com/quollwriter/synonyms/Synonyms.java
273	0	src/com/quollwriter/synonyms/providers/BigHugeLabsSynonymProvider.java
503	0	src/com/quollwriter/synonyms/providers/BuiltInSynonymProvider.java
17	0	src/com/quollwriter/synonyms/providers/SynonymIndex.java
44	0	src/com/quollwriter/text/DialogueConstraints.java
242	0	src/com/quollwriter/text/IgnoreCheckbox.java
131	0	src/com/quollwriter/text/Issue.java
57	0	src/com/quollwriter/text/IssueSorter.java
707	0	src/com/quollwriter/text/ProblemFinder.java
50	0	src/com/quollwriter/text/Rule.java
0	0	src/com/quollwriter/text/Sentence.java
241	0	src/com/quollwriter/text/SentenceIterator.java
746	0	src/com/quollwriter/text/TextUtilities.java
143	0	src/com/quollwriter/text/rules/AbstractDialogueRule.java
146	0	src/com/quollwriter/text/rules/AbstractRule.java
27	0	src/com/quollwriter/text/rules/AbstractSentenceRule.java
335	0	src/com/quollwriter/text/rules/AdverbRule.java
28	0	src/com/quollwriter/text/rules/DialogueRule.java
267	0	src/com/quollwriter/text/rules/PassiveSentenceRule.java
599	0	src/com/quollwriter/text/rules/RuleFactory.java
160	0	src/com/quollwriter/text/rules/SentenceLengthRule.java
10	0	src/com/quollwriter/text/rules/SentenceRule.java
180	0	src/com/quollwriter/text/rules/TooManyClausesRule.java
230	0	src/com/quollwriter/text/rules/WordFinder.java
26	0	src/com/quollwriter/tools/CreateObfuscatedString.java
188	0	src/com/quollwriter/tools/CreatePromptFiles.java
287	0	src/com/quollwriter/tools/CreateThesaurusFiles.java
104	0	src/com/quollwriter/tools/DeleteInstallJars.java
275	0	src/com/quollwriter/tools/EncodeStrings.java
86	0	src/com/quollwriter/tools/GetPromptAuthors.java
189	0	src/com/quollwriter/ui/About.java
5506	0	src/com/quollwriter/ui/AbstractProjectViewer.java
286	0	src/com/quollwriter/ui/AccordionItem.java
135	0	src/com/quollwriter/ui/AchievementBox.java
418	0	src/com/quollwriter/ui/AppearsInChaptersEditPanel.java
259	0	src/com/quollwriter/ui/AssetAccordionItem.java
28	0	src/com/quollwriter/ui/BackgroundChangeEvent.java
70	0	src/com/quollwriter/ui/BackgroundImage.java
308	0	src/com/quollwriter/ui/BackgroundImagePanel.java
732	0	src/com/quollwriter/ui/BackgroundSelector.java
83	0	src/com/quollwriter/ui/ChapterDescriptionAccordionItem.java
202	0	src/com/quollwriter/ui/ChapterDetailsEditPanel.java
547	0	src/com/quollwriter/ui/ChapterFieldAccordionItem.java
83	0	src/com/quollwriter/ui/ChapterGoalsAccordionItem.java
72	0	src/com/quollwriter/ui/ChapterPlanAccordionItem.java
443	0	src/com/quollwriter/ui/ChaptersAccordionItem.java
172	0	src/com/quollwriter/ui/CharacterDetailsEditPanel.java
56	0	src/com/quollwriter/ui/ComponentShowHide.java
163	0	src/com/quollwriter/ui/ContactSupport.java
182	0	src/com/quollwriter/ui/ConvertWarmupToProject.java
599	0	src/com/quollwriter/ui/DataObjectTransferHandler.java
509	0	src/com/quollwriter/ui/DebugConsole.java
11	0	src/com/quollwriter/ui/DefaultQuollPanelAction.java
300	0	src/com/quollwriter/ui/DetailsEditPanel.java
370	0	src/com/quollwriter/ui/DictionaryManager.java
17	0	src/com/quollwriter/ui/DragActionHandler.java
95	0	src/com/quollwriter/ui/EditItemTypes.java
96	0	src/com/quollwriter/ui/EditNoteTypes.java
754	0	src/com/quollwriter/ui/EditPanel.java
466	0	src/com/quollwriter/ui/EditorPanePrinter.java
576	0	src/com/quollwriter/ui/ExportProject.java
297	0	src/com/quollwriter/ui/FileFinder.java
837	0	src/com/quollwriter/ui/FindOrOpen.java
2555	0	src/com/quollwriter/ui/FullScreenFrame.java
217	0	src/com/quollwriter/ui/FullScreenTextProperties.java
576	0	src/com/quollwriter/ui/GetLatestVersion.java
257	0	src/com/quollwriter/ui/HTMLPanel.java
8	0	src/com/quollwriter/ui/HTMLPanelActionHandler.java
878	0	src/com/quollwriter/ui/IconColumn.java
1005	0	src/com/quollwriter/ui/ImportProject.java
238	0	src/com/quollwriter/ui/ItemTypeHandler.java
316	0	src/com/quollwriter/ui/LinkedToAccordionItem.java
68	0	src/com/quollwriter/ui/LocationDetailsEditPanel.java
28	0	src/com/quollwriter/ui/NewColorStateChangeEvent.java
324	0	src/com/quollwriter/ui/NewProjectPanel.java
325	0	src/com/quollwriter/ui/NoteTypeHandler.java
249	0	src/com/quollwriter/ui/NotesAccordionItem.java
148	0	src/com/quollwriter/ui/Notification.java
273	0	src/com/quollwriter/ui/ObjectDetailsEditPanel.java
262	0	src/com/quollwriter/ui/PopupWindow.java
414	0	src/com/quollwriter/ui/PopupWizard.java
22	0	src/com/quollwriter/ui/PopupsSupported.java
20	0	src/com/quollwriter/ui/PositionActionAdapter.java
1148	0	src/com/quollwriter/ui/ProblemFinderRuleConfig.java
187	0	src/com/quollwriter/ui/ProjectEvent.java
10	0	src/com/quollwriter/ui/ProjectEventListener.java
38	0	src/com/quollwriter/ui/ProjectObjectEvent.java
288	0	src/com/quollwriter/ui/ProjectObjectsAccordionItem.java
1074	0	src/com/quollwriter/ui/ProjectOptions.java
206	0	src/com/quollwriter/ui/ProjectTextProperties.java
2567	0	src/com/quollwriter/ui/ProjectViewer.java
8	0	src/com/quollwriter/ui/ProjectViewerInitable.java
425	0	src/com/quollwriter/ui/QColorChooser.java
25	0	src/com/quollwriter/ui/QuollChart.java
1669	0	src/com/quollwriter/ui/QuollEditorPanel.java.old
688	0	src/com/quollwriter/ui/QuollPanel.java
8	0	src/com/quollwriter/ui/QuollPanelAction.java
188	0	src/com/quollwriter/ui/ReportAProblem.java
123	0	src/com/quollwriter/ui/ResearchItemDetailsEditPanel.java
150	0	src/com/quollwriter/ui/ShareWritingPrompt.java
15	0	src/com/quollwriter/ui/SpellCheckSupported.java
117	0	src/com/quollwriter/ui/SplashScreen.java
159	0	src/com/quollwriter/ui/StarBar.java
14	0	src/com/quollwriter/ui/Stateful.java
452	0	src/com/quollwriter/ui/TextPropertiesEditPanel.java
408	0	src/com/quollwriter/ui/Tips.java
122	0	src/com/quollwriter/ui/TreeParentNode.java
328	0	src/com/quollwriter/ui/TypesEditor.java
22	0	src/com/quollwriter/ui/TypesHandler.java
5005	0	src/com/quollwriter/ui/UIUtils.java
1029	0	src/com/quollwriter/ui/WarmupPromptSelect.java
206	0	src/com/quollwriter/ui/WarmupsAccordionItem.java
859	0	src/com/quollwriter/ui/WarmupsViewer.java
475	0	src/com/quollwriter/ui/WhatsNew.java
18	0	src/com/quollwriter/ui/WizardStep.java
278	0	src/com/quollwriter/ui/WordCountTimer.java
355	0	src/com/quollwriter/ui/WordCountTimerBox.java
914	0	src/com/quollwriter/ui/actionHandlers/AbstractActionHandler.java
36	0	src/com/quollwriter/ui/actionHandlers/AddBookActionHandler.java
304	0	src/com/quollwriter/ui/actionHandlers/AddChapterActionHandler.java
128	0	src/com/quollwriter/ui/actionHandlers/AddNewItemTypeActionHandler.java
128	0	src/com/quollwriter/ui/actionHandlers/AddNewNoteTypeActionHandler.java
373	0	src/com/quollwriter/ui/actionHandlers/AssetActionHandler.java
324	0	src/com/quollwriter/ui/actionHandlers/ChapterItemActionHandler.java
87	0	src/com/quollwriter/ui/actionHandlers/DeleteChapterActionHandler.java
98	0	src/com/quollwriter/ui/actionHandlers/DeleteChapterItemActionHandler.java
48	0	src/com/quollwriter/ui/actionHandlers/DeleteCharacterActionHandler.java
84	0	src/com/quollwriter/ui/actionHandlers/DeleteIdeaTypeActionHandler.java
66	0	src/com/quollwriter/ui/actionHandlers/DeleteNoteActionHandler.java
65	0	src/com/quollwriter/ui/actionHandlers/DeleteOutlineItemActionHandler.java
147	0	src/com/quollwriter/ui/actionHandlers/EditIdeaTypeActionHandler.java
379	0	src/com/quollwriter/ui/actionHandlers/EditTextPropertiesActionHandler.java
448	0	src/com/quollwriter/ui/actionHandlers/FindSynonymsActionHandler.java
160	0	src/com/quollwriter/ui/actionHandlers/NewIdeaTypeActionHandler.java
437	0	src/com/quollwriter/ui/actionHandlers/NoteActionHandler.java
332	0	src/com/quollwriter/ui/actionHandlers/OutlineItemChapterActionHandler.java
128	0	src/com/quollwriter/ui/actionHandlers/ProjectViewerActionHandler.java
156	0	src/com/quollwriter/ui/actionHandlers/RenameChapterActionHandler.java
272	0	src/com/quollwriter/ui/actionHandlers/RenameProjectActionHandler.java
433	0	src/com/quollwriter/ui/actionHandlers/ShowChapterItemActionHandler.java
80	0	src/com/quollwriter/ui/actionHandlers/ShowNoteActionHandler.java
60	0	src/com/quollwriter/ui/actionHandlers/ShowOutlineItemActionHandler.java
49	0	src/com/quollwriter/ui/actionHandlers/ShowSceneActionHandler.java
226	0	src/com/quollwriter/ui/charts/AllWordCountsChart.java
306	0	src/com/quollwriter/ui/charts/PerChapterWordCountsChart.java
189	0	src/com/quollwriter/ui/charts/QuollChartUtils.java
676	0	src/com/quollwriter/ui/components/Accordion.java
0	0	src/com/quollwriter/ui/components/AccordionItem.java
16	0	src/com/quollwriter/ui/components/ActionAdapter.java
62	0	src/com/quollwriter/ui/components/BlockPainter.java
19	0	src/com/quollwriter/ui/components/CellEditorAdapter.java
14	0	src/com/quollwriter/ui/components/ChangeAdapter.java
397	0	src/com/quollwriter/ui/components/CompoundUndoManager.java
595	0	src/com/quollwriter/ui/components/DnDTabbedPane.java
24	0	src/com/quollwriter/ui/components/DocumentAdapter.java
63	0	src/com/quollwriter/ui/components/DragEvent.java
14	0	src/com/quollwriter/ui/components/DragListener.java
190	0	src/com/quollwriter/ui/components/Dragger.java
602	0	src/com/quollwriter/ui/components/DropShadowBorderX.java
0	0	src/com/quollwriter/ui/components/FileFindField.java
545	0	src/com/quollwriter/ui/components/FindBar.java
431	0	src/com/quollwriter/ui/components/Form.java
21	0	src/com/quollwriter/ui/components/FormAdapter.java
37	0	src/com/quollwriter/ui/components/FormEvent.java
34	0	src/com/quollwriter/ui/components/FormItem.java
11	0	src/com/quollwriter/ui/components/FormListener.java
72	0	src/com/quollwriter/ui/components/FormattedTextField.java
71	0	src/com/quollwriter/ui/components/GradientPainter.java
73	0	src/com/quollwriter/ui/components/GradientPanel.java
343	0	src/com/quollwriter/ui/components/Header.java
130	0	src/com/quollwriter/ui/components/HeaderFactory.java
14	0	src/com/quollwriter/ui/components/HyperlinkAdapter.java
12	0	src/com/quollwriter/ui/components/IconProvider.java
108	0	src/com/quollwriter/ui/components/ImagePanel.java
14	0	src/com/quollwriter/ui/components/ItemAdapter.java
72	0	src/com/quollwriter/ui/components/LinePainter.java
422	0	src/com/quollwriter/ui/components/Markup.java
276	0	src/com/quollwriter/ui/components/MultiImagePanel.java
17	0	src/com/quollwriter/ui/components/NonEditableDefaultTableModel.java
13	0	src/com/quollwriter/ui/components/PaintProvider.java
40	0	src/com/quollwriter/ui/components/ProgressBar.java
97	0	src/com/quollwriter/ui/components/QCaret.java
187	0	src/com/quollwriter/ui/components/QPopup.java
715	0	src/com/quollwriter/ui/components/QSpellChecker.java
1074	0	src/com/quollwriter/ui/components/QTextEditor.java
11	0	src/com/quollwriter/ui/components/Runner.java
56	0	src/com/quollwriter/ui/components/SelectedGradientPainter.java
11	0	src/com/quollwriter/ui/components/StyleChangeAdapter.java
61	0	src/com/quollwriter/ui/components/StyleChangeEvent.java
10	0	src/com/quollwriter/ui/components/StyleChangeListener.java
328	0	src/com/quollwriter/ui/components/TabHeader.java
316	0	src/com/quollwriter/ui/components/TextProperties.java
51	0	src/com/quollwriter/ui/components/TextRange.java
24	0	src/com/quollwriter/ui/components/TextStylable.java
73	0	src/com/quollwriter/ui/components/TextUnderlinePainter.java
158	0	src/com/quollwriter/ui/components/UIUtils.java
501	0	src/com/quollwriter/ui/components/VerticalLayout.java
72	0	src/com/quollwriter/ui/components/WavyLinePainter.java
0	0	src/com/quollwriter/ui/components/WindowStateAdapter.java
41	0	src/com/quollwriter/ui/events/DictionaryChangedEvent.java
11	0	src/com/quollwriter/ui/events/DictionaryChangedListener.java
38	0	src/com/quollwriter/ui/events/ItemChangedEvent.java
10	0	src/com/quollwriter/ui/events/NameChangedAdapter.java
28	0	src/com/quollwriter/ui/events/NameChangedEvent.java
11	0	src/com/quollwriter/ui/events/NameChangedListener.java
25	0	src/com/quollwriter/ui/events/TreeModelAdapter.java
36	0	src/com/quollwriter/ui/events/VetoableActionEvent.java
68	0	src/com/quollwriter/ui/events/WordCountTimerEvent.java
12	0	src/com/quollwriter/ui/events/WordCountTimerListener.java
1831	0	src/com/quollwriter/ui/panels/AbstractEditorPanel.java
678	0	src/com/quollwriter/ui/panels/AbstractObjectViewPanel.java
446	0	src/com/quollwriter/ui/panels/AchievementsPanel.java
436	0	src/com/quollwriter/ui/panels/AssetViewPanel.java
102	0	src/com/quollwriter/ui/panels/BlankQuollPanel.java
379	0	src/com/quollwriter/ui/panels/ChapterViewPanel.java
131	0	src/com/quollwriter/ui/panels/FullScreenQuollPanel.java
1997	0	src/com/quollwriter/ui/panels/IdeaBoard.java
1653	0	src/com/quollwriter/ui/panels/OptionsPanel.java
1208	0	src/com/quollwriter/ui/panels/QuollEditorPanel.java
1561	0	src/com/quollwriter/ui/panels/Timeline.java
258	0	src/com/quollwriter/ui/panels/WarmupEditorPanel.java
624	0	src/com/quollwriter/ui/panels/WordCountPanel.java
77	0	src/com/quollwriter/ui/renderers/ChapterSnippetsTreeCellRenderer.java
46	0	src/com/quollwriter/ui/renderers/CheckboxListCellRenderer.java
421	0	src/com/quollwriter/ui/renderers/ProjectTreeCellEditor.java
170	0	src/com/quollwriter/ui/renderers/ProjectTreeCellRenderer.java
142	0	src/com/quollwriter/ui/renderers/SelectableProjectTreeCellRenderer.java
236	0	src/com/quollwriter/ui/renderers/WarmupsProjectTreeCellEditor.java
204	0	src/com/quollwriter/ui/sidebars/AbstractSideBar.java
168	0	src/com/quollwriter/ui/sidebars/AccordionItemsSideBar.java
143	0	src/com/quollwriter/ui/sidebars/AppearsInChaptersSideBar.java
212	0	src/com/quollwriter/ui/sidebars/ChapterInformationSideBar.java
779	0	src/com/quollwriter/ui/sidebars/Finder.java
1136	0	src/com/quollwriter/ui/sidebars/FullScreenPropertiesSideBar.java
263	0	src/com/quollwriter/ui/sidebars/ProjectSideBar.java
133	0	src/com/quollwriter/ui/sidebars/TextPropertiesSideBar.java
124	0	src/com/quollwriter/ui/sidebars/WarmupsSideBar.java
835	0	src/com/quollwriter/ui/sidebars/WordCountsSideBar.java
13	0	src/com/quollwriter/ui/whatsnewcomps/WhatsNewComponentProvider.java
212	0	src/com/quollwriter/ui/whatsnewcomps/version_1_4_4.java

commit 1d4a4221b5a2ed91a950939238a039602dbe100e
Author: Gary Bentley <gary@quollwriter.com>
Date:   Sun Feb 24 11:45:24 2013 +1000

    Added standard .gitattributes

22	0	.gitattributes
163	163	.gitignore

commit 6ef75d81862a52de481f3502b0aff1bab7215c0f
Author: Gary Bentley <gary@quollwriter.com>
Date:   Wed Nov 21 00:13:46 2012 +1000

    Added standard .gitignore

163	0	.gitignore
